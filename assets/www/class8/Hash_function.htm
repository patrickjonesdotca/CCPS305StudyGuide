<!DOCTYPE html>
<html class="jsEnabled togglingEnabled" dir="ltr" lang="en"><head>
		<title>Hash function - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<meta name="robots" content="noindex,nofollow">		<link rel="stylesheet" href="Hash_function_files/load.css" type="text/css" media="all">		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png">		<script type="text/javascript">
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-header":"This article is available in 37 languages","mobile-frontend-language-footer":"<a href=\"\/wiki\/Special:Special:MobileOptions\/Language\">Wikipedia is available in other languages.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"scriptPath":"\/w","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			document.documentElement.className = 'jsEnabled page-loading';		</script>
		<link rel="canonical" href="http://en.wikipedia.org/wiki/Hash_function">
	</head>
	<body class="mobile mw-mf-checkboxes">
							<div id="mw-mf-header">
					<form id="mw-mf-searchForm" action="/w/index.php" class="search_bar" method="get">
							<img alt="Logo" id="mw-mf-logo" src="Hash_function_files/W_logo_for_Mobile_Frontend.gif" width="35" height="22">
						<input value="Special:Search" name="title" type="hidden">
			<div id="mw-mf-sq" class="divclearable">
				<input name="search" id="mw-mf-search" size="22" autocomplete="off" maxlength="1024" class="search" placeholder="Type your search here..." type="search">
				<img src="Hash_function_files/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear">
			</div>
						<button id="goButton" class="goButton" type="submit">
				<img src="Hash_function_files/blank.gif" alt="Go" title="Go">
			</button>
					</form>
									<div class="nav" id="nav">
				<div id="mw-mf-language-selection">
		Language:<br>
		<select id="languageselection"><option value="http://en.wikipedia.org/wiki/Hash_function" selected="selected">English</option><option value="//ar.m.wikipedia.org/wiki/%D8%AF%D8%A7%D9%84%D8%A9_%D9%87%D8%A7%D8%B4">العربية</option><option value="//bg.m.wikipedia.org/wiki/%D0%A5%D0%B5%D1%88-%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F">български</option><option value="//ca.m.wikipedia.org/wiki/Funci%C3%B3_resum">català</option><option value="//cs.m.wikipedia.org/wiki/Ha%C5%A1ovac%C3%AD_funkce">česky</option><option value="//da.m.wikipedia.org/wiki/Hashfunktion">dansk</option><option value="//de.m.wikipedia.org/wiki/Hashfunktion">Deutsch</option><option value="//el.m.wikipedia.org/wiki/%CE%A3%CF%85%CE%BD%CE%AC%CF%81%CF%84%CE%B7%CF%83%CE%B7_%CE%BA%CE%B1%CF%84%CE%B1%CF%84%CE%B5%CE%BC%CE%B1%CF%87%CE%B9%CF%83%CE%BC%CE%BF%CF%8D">Ελληνικά</option><option value="//es.m.wikipedia.org/wiki/Hash">español</option><option value="//eu.m.wikipedia.org/wiki/Hashing">euskara</option><option value="//fa.m.wikipedia.org/wiki/%D8%AA%D8%A7%D8%A8%D8%B9_%D8%AF%D8%B1%D9%87%D9%85%E2%80%8C%D8%B3%D8%A7%D8%B2%DB%8C">فارسی</option><option value="//fr.m.wikipedia.org/wiki/Fonction_de_hachage">français</option><option value="//ko.m.wikipedia.org/wiki/%ED%95%B4%EC%8B%9C_%ED%95%A8%EC%88%98">한국어</option><option value="//hy.m.wikipedia.org/wiki/%D5%80%D5%A5%D5%B7_%D6%86%D5%B8%D6%82%D5%B6%D5%AF%D6%81%D5%AB%D5%A1">Հայերեն</option><option value="//is.m.wikipedia.org/wiki/T%C3%A6tifall">íslenska</option><option value="//it.m.wikipedia.org/wiki/Hash">italiano</option><option value="//he.m.wikipedia.org/wiki/%D7%A4%D7%95%D7%A0%D7%A7%D7%A6%D7%99%D7%99%D7%AA_%D7%92%D7%99%D7%91%D7%95%D7%91">עברית</option><option value="//ka.m.wikipedia.org/wiki/%E1%83%B0%E1%83%94%E1%83%A8%E1%83%98%E1%83%A0%E1%83%94%E1%83%91%E1%83%98%E1%83%A1_%E1%83%A4%E1%83%A3%E1%83%9C%E1%83%A5%E1%83%AA%E1%83%98%E1%83%90">ქართული</option><option value="//kk.m.wikipedia.org/wiki/%D0%90%D1%80%D0%B0%D0%BB%D0%B0%D1%81%D1%82%D1%8B%D1%80%D1%83">Қазақша</option><option value="//lt.m.wikipedia.org/wiki/Mai%C5%A1os_funkcija">lietuvių</option><option value="//hu.m.wikipedia.org/wiki/Hash_f%C3%BCggv%C3%A9ny">magyar</option><option value="//mk.m.wikipedia.org/wiki/%D0%A5%D0%B5%D1%88%D0%B8%D1%80%D0%B0%D1%9A%D0%B5">македонски</option><option value="//nl.m.wikipedia.org/wiki/Hashfunctie">Nederlands</option><option value="//ja.m.wikipedia.org/wiki/%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5%E9%96%A2%E6%95%B0">日本語</option><option value="//pl.m.wikipedia.org/wiki/Funkcja_skr%C3%B3tu">polski</option><option value="//pt.m.wikipedia.org/wiki/Hash">português</option><option value="//ro.m.wikipedia.org/wiki/Func%C8%9Bie_hash">română</option><option value="//ru.m.wikipedia.org/wiki/%D0%A5%D0%B5%D1%88%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">русский</option><option value="//simple.m.wikipedia.org/wiki/Hash_function">Simple English</option><option value="//sk.m.wikipedia.org/wiki/Ha%C5%A1ovacia_funkcia">slovenčina</option><option value="//sl.m.wikipedia.org/wiki/Sekljalna_funkcija">slovenščina</option><option value="//fi.m.wikipedia.org/wiki/Hajautusalgoritmi">suomi</option><option value="//sv.m.wikipedia.org/wiki/Hashfunktion">svenska</option><option value="//th.m.wikipedia.org/wiki/%E0%B8%9F%E0%B8%B1%E0%B8%87%E0%B8%81%E0%B9%8C%E0%B8%8A%E0%B8%B1%E0%B8%99%E0%B9%81%E0%B8%AE%E0%B8%8A">ไทย</option><option value="//uk.m.wikipedia.org/wiki/%D0%A5%D0%B5%D1%88-%D1%84%D1%83%D0%BD%D0%BA%D1%86%D1%96%D1%8F">українська</option><option value="//vi.m.wikipedia.org/wiki/H%C3%A0m_b%C4%83m">Tiếng Việt</option><option value="//zh.m.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8">中文</option></select>
	</div><br>
			<a href="http://en.m.wikipedia.org/wiki/Main_Page" id="homeButton" class="button">Home</a>
			<a href="http://en.m.wikipedia.org/wiki/Special:Random" id="randomButton" class="button">Random</a>
			</div>
		</div>
				<div id="results"><ul class="suggestions-results" title="No Results"><li class="suggestions-result">Type search term above and matching article titles will appear here.</li></ul></div>
		<div class="show" id="content_wrapper">
				<div id="content">
			<h1 id="firstHeading">Hash function</h1>			
<table class="metadata plainlinks ambox ambox-content ambox-Refimprove" style=""><tbody><tr>
<td class="mbox-image">
<div style="width: 52px;"><img alt="" src="Hash_function_files/50px-Question_book-new.png" width="50" height="39"></div>
</td>
<td class="mbox-text" style=""><span class="mbox-text-span">This article <b>needs additional <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citing_sources#Inline_citations" title="Wikipedia:Citing sources">citations</a> for <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">verification</a></b>. <span class="hide-when-compact">Please help <a class="external text" href="http://en.wikipedia.org/w/index.php?title=Hash_function&amp;action=edit">improve this article</a> by adding citations to <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Identifying_reliable_sources" title="Wikipedia:Identifying reliable sources">reliable sources</a>. Unsourced material may be <a href="http://en.m.wikipedia.org/wiki/Template:Citation_needed" title="Template:Citation needed">challenged</a> and <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Verifiability#Burden_of_evidence" title="Wikipedia:Verifiability">removed</a>.</span> <small><i>(July 2010)</i></small> </span></td>
</tr></tbody></table>
<div class="thumb tright">
<div class="thumbinner" style="width:242px;">
<a href="http://en.m.wikipedia.org/wiki/File:Hash_table_4_1_1_0_0_1_0_LL.svg" class="image"><img alt="" src="Hash_function_files/240px-Hash_table_4_1_1_0_0_1_0_LL.png" class="thumbimage" width="240" height="184"></a>
<div class="thumbcaption">

A hash function that maps names to integers from 0 to 15.. There is a collision between keys "John Smith" and "Sandra Dee".</div>
</div>
</div>
<p>A <b>hash function</b> is any <a href="http://en.m.wikipedia.org/wiki/Algorithm" title="Algorithm">algorithm</a> or <a href="http://en.m.wikipedia.org/wiki/Subroutine" title="Subroutine">subroutine</a> that maps large <a href="http://en.m.wikipedia.org/wiki/Data_set" title="Data set">data sets</a> of variable length, called <i>keys</i>, to smaller data sets of a fixed length. For example, a person's name, having a variable length, could be hashed to a single <a href="http://en.m.wikipedia.org/wiki/Integer" title="Integer">integer</a>. The values returned by a hash function are called <b>hash values</b>, <b>hash codes</b>, <b>hash sums</b>, <b>checksums</b> or simply <b>hashes</b>.</p>
<div class="section"><h2 class="section_heading" id="section_1"><button>Show</button><span id="Descriptions">Descriptions</span></h2><div class="content_block" id="content_1">
<p>Hash functions are mostly used to accelerate table lookup or data comparison tasks such as finding items in a <a href="http://en.m.wikipedia.org/wiki/Database" title="Database">database</a>, detecting duplicated or similar <a href="http://en.m.wikipedia.org/wiki/Database_record" title="Database record" class="mw-redirect">records</a> in a large <a href="http://en.m.wikipedia.org/wiki/File_%28computer%29" title="File (computer)" class="mw-redirect">file</a>, finding similar stretches in <a href="http://en.m.wikipedia.org/wiki/Nucleic_acid" title="Nucleic acid">DNA</a> sequences, and so on.</p>
<p>A hash function should be <a href="http://en.m.wikipedia.org/wiki/Referential_transparency_%28computer_science%29" title="Referential transparency (computer science)">referentially transparent</a>, <i>i.e.</i>,
 if called twice on input that is "equal" (for example, strings that 
consist of the same sequence of characters), it should give the same 
result. This is a contract in many programming languages that allow the 
user to override equality and hash functions for an object: if two 
objects are equal, their hash codes must be the same. This is crucial to
 finding an element in a hash table quickly, because two of the same 
element would both hash to the same slot.</p>
<p>Some hash functions may map two or more keys to the same hash value, causing a <a href="http://en.m.wikipedia.org/wiki/Collision_%28computer_science%29" title="Collision (computer science)">collision</a>.
 Such hash functions try to map the keys to the hash values as evenly as
 possible because collisions become more frequent as hash tables fill 
up. Thus, single-digit hash values are frequently restricted to 80% of 
the size of the table. Depending on the algorithm used, other properties
 may be required as well, such as <a href="http://en.m.wikipedia.org/wiki/Double_hashing" title="Double hashing">double hashing</a> and <a href="http://en.m.wikipedia.org/wiki/Linear_probing" title="Linear probing">linear probing</a>. Although the idea was conceived in the 1950s,<sup id="cite_ref-knuth_0-0" class="reference"><a href="#cite_note-knuth-0"><span>[</span>1<span>]</span></a></sup> the design of good hash functions is still a topic of active research.</p>
<p>Hash functions are related to (and often confused with) <a href="http://en.m.wikipedia.org/wiki/Checksum" title="Checksum">checksums</a>, <a href="http://en.m.wikipedia.org/wiki/Check_digit" title="Check digit">check digits</a>, <a href="http://en.m.wikipedia.org/wiki/Fingerprint_%28computing%29" title="Fingerprint (computing)">fingerprints</a>, <a href="http://en.m.wikipedia.org/wiki/Randomization_function" title="Randomization function">randomization functions</a>, <a href="http://en.m.wikipedia.org/wiki/Error_correcting_codes" title="Error correcting codes" class="mw-redirect">error correcting codes</a>, and <a href="http://en.m.wikipedia.org/wiki/Cryptographic_hash_function" title="Cryptographic hash function">cryptographic hash functions</a>.
 Although these concepts overlap to some extent, each has its own uses 
and requirements and is designed and optimized differently. The <a href="http://en.m.wikipedia.org/wiki/HashKeeper" title="HashKeeper">HashKeeper</a> database maintained by the American <a href="http://en.m.wikipedia.org/wiki/National_Drug_Intelligence_Center" title="National Drug Intelligence Center">National Drug Intelligence Center</a>, for instance, is more aptly described as a catalog of file fingerprints than of hash values.</p>
<h3> <span class="mw-headline" id="Hash_tables">Hash tables</span>
</h3>
<p>Hash functions are primarily used in <a href="http://en.m.wikipedia.org/wiki/Hash_table" title="Hash table">hash tables</a>, to quickly locate a data record (for example, a <a href="http://en.m.wikipedia.org/wiki/Dictionary" title="Dictionary">dictionary</a> definition) given its <a href="http://en.m.wikipedia.org/wiki/Primary_key" title="Primary key" class="mw-redirect">search key</a>
 (the headword). Specifically, the hash function is used to map the 
search key to the hash. The index gives the place where the 
corresponding record should be stored. Hash tables, in turn, are used to
 implement <a href="http://en.m.wikipedia.org/wiki/Associative_arrays" title="Associative arrays" class="mw-redirect">associative arrays</a> and <a href="http://en.m.wikipedia.org/wiki/Dynamic_set" title="Dynamic set" class="mw-redirect">dynamic sets</a>.</p>
<p>In general, a hashing function may map several different keys to the 
same index. Therefore, each slot of a hash table is associated with 
(implicitly or explicitly) a <a href="http://en.m.wikipedia.org/wiki/Set_%28mathematics%29" title="Set (mathematics)">set</a> of records, rather than a single record. For this reason, each slot of a hash table is often called a <i>bucket</i>, and hash values are also called <i>bucket indices</i>.</p>
<p>Thus, the hash function only hints at the record's location—it tells 
where one should start looking for it. Still, in a half-full table, a 
good hash function will typically narrow the search down to only one or 
two entries.</p>
<h3> <span class="mw-headline" id="Caches">Caches</span>
</h3>
<p>Hash functions are also used to build <a href="http://en.m.wikipedia.org/wiki/Cache_%28computing%29" title="Cache (computing)">caches</a>
 for large data sets stored in slow media. A cache is generally simpler 
than a hashed search table, since any collision can be resolved by 
discarding or writing back the older of the two colliding items. This is
 also used in file comparison.</p>
<h3> <span class="mw-headline" id="Bloom_filters">Bloom filters</span>
</h3>
<p>Hash functions are an essential ingredient of the <a href="http://en.m.wikipedia.org/wiki/Bloom_filter" title="Bloom filter">Bloom filter</a>, a compact data structure that provides an enclosing approximation to a set of them.<sup class="noprint Inline-Template" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Please_clarify" title="Wikipedia:Please clarify"><span title="The text in the vicinity of this tag needs clarification or removal of jargon from May 2012">clarification needed</span></a></i>]</sup></p>
<h3> <span class="mw-headline" id="Finding_duplicate_records">Finding duplicate records</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Hash_table" title="Hash table">Hash table</a>
</div>
<p>When storing records in a large unsorted file, one may use a hash function to map each record to an index into a table <i>T</i>, and collect in each bucket <i>T</i>[<i>i</i>] a <a href="http://en.m.wikipedia.org/wiki/List_%28computing%29" title="List (computing)" class="mw-redirect">list</a> of the numbers of all records with the same hash value <i>i</i>.
 Once the table is complete, any two duplicate records will end up in 
the same bucket. The duplicates can then be found by scanning every 
bucket <i>T</i>[<i>i</i>] which contains two or more members, fetching 
those records, and comparing them. With a table of appropriate size, 
this method is likely to be much faster than any alternative approach 
(such as sorting the file and comparing all consecutive pairs).</p>
<h3> <span class="mw-headline" id="Finding_similar_records">Finding similar records</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Locality_sensitive_hashing" title="Locality sensitive hashing" class="mw-redirect">Locality sensitive hashing</a>
</div>
<p>Hash functions can also be used to locate table records whose key is 
similar, but not identical, to a given key; or pairs of records in a 
large file which have similar keys. For that purpose, one needs a hash 
function that maps similar keys to hash values that differ by at most <i>m</i>, where <i>m</i> is a small integer (say, 1 or 2). If one builds a table <i>T</i>
 of all record numbers, using such a hash function, then similar records
 will end up in the same bucket, or in nearby buckets. Then one need 
only check the records in each bucket <i>T</i>[<i>i</i>] against those in buckets <i>T</i>[<i>i</i>+<i>k</i>] where <i>k</i> ranges between −<i>m</i> and&nbsp;<i>m</i>.</p>
<p>This class includes the so-called <a href="http://en.m.wikipedia.org/wiki/Acoustic_fingerprint" title="Acoustic fingerprint">acoustic fingerprint</a> algorithms, that are used to locate similar-sounding entries in large collection of <a href="http://en.m.wikipedia.org/wiki/Audio_file" title="Audio file" class="mw-redirect">audio files</a>.
 For this application, the hash function must be as insensitive as 
possible to data capture or transmission errors, and to "trivial" 
changes such as timing and volume changes, compression, etc.<sup id="cite_ref-AudioHash1_1-0" class="reference"><a href="#cite_note-AudioHash1-1"><span>[</span>2<span>]</span></a></sup></p>
<h3> <span class="mw-headline" id="Finding_similar_substrings">Finding similar substrings</span>
</h3>
<p>The same techniques can be used to find equal or similar stretches in
 a large collection of strings, such as a document repository or a <a href="http://en.m.wikipedia.org/wiki/Biological_database" title="Biological database">genomic database</a>.
 In this case, the input strings are broken into many small pieces, and a
 hash function is used to detect potentially equal pieces, as above.</p>
<p>The <a href="http://en.m.wikipedia.org/wiki/Rabin%E2%80%93Karp_string_search_algorithm" title="Rabin–Karp string search algorithm" class="mw-redirect">Rabin–Karp algorithm</a> is a relatively fast <a href="http://en.m.wikipedia.org/wiki/String_searching_algorithm" title="String searching algorithm">string searching algorithm</a> that works in <a href="http://en.m.wikipedia.org/wiki/Big_O_notation" title="Big O notation">O(<i>n</i>)</a> time on average. It is based on the use of hashing to compare strings.</p>
<h3> <span class="mw-headline" id="Geometric_hashing">Geometric hashing</span>
</h3>
<p>This principle is widely used in <a href="http://en.m.wikipedia.org/wiki/Computer_graphics" title="Computer graphics">computer graphics</a>, <a href="http://en.m.wikipedia.org/wiki/Computational_geometry" title="Computational geometry">computational geometry</a> and many other disciplines, to solve many <a href="http://en.m.wikipedia.org/wiki/Proximity_problem" title="Proximity problem" class="mw-redirect">proximity problems</a> in the plane or in three-dimensional space, such as finding <a href="http://en.m.wikipedia.org/wiki/Closest_pair_problem" title="Closest pair problem" class="mw-redirect">closest pairs</a> in a set of points, similar shapes in a list of shapes, similar <a href="http://en.m.wikipedia.org/wiki/Image_processing" title="Image processing">images</a> in an <a href="http://en.m.wikipedia.org/wiki/Image_retrieval" title="Image retrieval">image database</a>, and so on. In these applications, the set of all inputs is some sort of <a href="http://en.m.wikipedia.org/wiki/Metric_space" title="Metric space">metric space</a>, and the hashing function can be interpreted as a <a href="http://en.m.wikipedia.org/wiki/Partition_%28mathematics%29" title="Partition (mathematics)" class="mw-redirect">partition</a> of that space into a grid of <i>cells</i>. The table is often an array with two or more indices (called a <i><a href="http://en.m.wikipedia.org/wiki/Grid_file" title="Grid file">grid file</a></i>, <i>grid index</i>, <i>bucket grid</i>, and similar names), and the hash function returns an index <a href="http://en.m.wikipedia.org/wiki/Tuple" title="Tuple">tuple</a>. This special case of hashing is known as <a href="http://en.m.wikipedia.org/wiki/Geometric_hashing" title="Geometric hashing">geometric hashing</a> or <i>the grid method</i>. Geometric hashing is also used in <a href="http://en.m.wikipedia.org/wiki/Telecommunication" title="Telecommunication">telecommunications</a> (usually under the name <a href="http://en.m.wikipedia.org/wiki/Vector_quantization" title="Vector quantization">vector quantization</a>) to <a href="http://en.m.wikipedia.org/wiki/Code_%28communications%29" title="Code (communications)" class="mw-redirect">encode</a> and <a href="http://en.m.wikipedia.org/wiki/Data_compression" title="Data compression">compress</a> multi-dimensional signals.</p>
<h3> <span class="mw-headline" id="Properties">Properties</span>
</h3>
<p>Good hash functions, in the original sense of the term, are usually 
required to satisfy certain properties listed below. Note that different
 requirements apply to the other related concepts (<a href="http://en.m.wikipedia.org/wiki/Cryptographic_hash_function" title="Cryptographic hash function">cryptographic hash functions</a>, checksums, etc.).</p>
<h3> <span class="mw-headline" id="Determinism">Determinism</span>
</h3>
<p>A hash procedure must be <a href="http://en.m.wikipedia.org/wiki/Deterministic_algorithm" title="Deterministic algorithm">deterministic</a>—meaning that for a given input value it must always generate the same hash value. In other words, it must be a <a href="http://en.m.wikipedia.org/wiki/Function_%28mathematics%29" title="Function (mathematics)">function</a>
 of the data to be hashed, in the mathematical sense of the term. This 
requirement excludes hash functions that depend on external variable 
parameters, such as <a href="http://en.m.wikipedia.org/wiki/Pseudo-random_number_generator" title="Pseudo-random number generator" class="mw-redirect">pseudo-random number generators</a>
 or the time of day. It also excludes functions that depend on the 
memory address of the object being hashed, because that address may 
change during execution (as may happen on systems that use certain 
methods of <a href="http://en.m.wikipedia.org/wiki/Garbage_collection_%28computer_science%29" title="Garbage collection (computer science)">garbage collection</a>), although sometimes rehashing of the item is possible.</p>
<h3> <span class="mw-headline" id="Uniformity">Uniformity</span>
</h3>
<p>A good hash function should map the expected inputs as evenly as 
possible over its output range. That is, every hash value in the output 
range should be generated with roughly the same <a href="http://en.m.wikipedia.org/wiki/Probability" title="Probability">probability</a>. The reason for this last requirement is that the cost of hashing-based methods goes up sharply as the number of <i>collisions</i>—pairs
 of inputs that are mapped to the same hash value—increases. Basically, 
if some hash values are more likely to occur than others, a larger 
fraction of the lookup operations will have to search through a larger 
set of colliding table entries.</p>
<p>Note that this criterion only requires the value to be <i>uniformly distributed</i>, not <i>random</i>
 in any sense. A good randomizing function is (barring computational 
efficiency concerns) generally a good choice as a hash function, but the
 converse need not be true.</p>
<p>Hash tables often contain only a small subset of the valid inputs. 
For instance, a club membership list may contain only a hundred or so 
member names, out of the very large set of all possible names. In these 
cases, the uniformity criterion should hold for almost all typical 
subsets of entries that may be found in the table, not just for the 
global set of all possible entries.</p>
<p>In other words, if a typical set of <i>m</i> records is hashed to <i>n</i> table slots, the probability of a bucket receiving many more than <i>m</i>/<i>n</i> records should be vanishingly small. In particular, if <i>m</i> is less than <i>n</i>, very few buckets should have more than one or two records. (In an ideal "<a href="http://en.m.wikipedia.org/wiki/Perfect_hash_function" title="Perfect hash function">perfect hash function</a>", no bucket should have more than one record; but a small number of collisions is virtually inevitable, even if <i>n</i> is much larger than <i>m</i> – see the <a href="http://en.m.wikipedia.org/wiki/Birthday_paradox" title="Birthday paradox" class="mw-redirect">birthday paradox</a>).</p>
<p>When testing a hash function, the uniformity of the distribution of hash values can be evaluated by the <a href="http://en.m.wikipedia.org/wiki/Chi-squared_test" title="Chi-squared test">chi-squared test</a>.</p>
<h3> <span class="mw-headline" id="Variable_range">Variable range</span>
</h3>
<p>In many applications, the range of hash values may be different for 
each run of the program, or may change along the same run (for instance,
 when a hash table needs to be expanded). In those situations, one needs
 a hash function which takes two parameters—the input data <i>z</i>, and the number <i>n</i> of allowed hash values.</p>
<p>A common solution is to compute a fixed hash function with a very large range (say, 0 to 2<sup>32</sup>&nbsp;−&nbsp;1), divide the result by <i>n</i>, and use the division's <a href="http://en.m.wikipedia.org/wiki/Modulo_operation" title="Modulo operation">remainder</a>. If <i>n</i> is itself a power of 2, this can be done by <a href="http://en.m.wikipedia.org/wiki/Bit_masking" title="Bit masking" class="mw-redirect">bit masking</a> and <a href="http://en.m.wikipedia.org/wiki/Bit_shifting" title="Bit shifting" class="mw-redirect">bit shifting</a>. When this approach is used, the hash function must be chosen so that the result has fairly uniform distribution between 0 and <i>n</i>&nbsp;−&nbsp;1, for any value of <i>n</i> that may occur in the application. Depending on the function, the remainder may be uniform only for certain values of <i>n</i>, e.g. <a href="http://en.m.wikipedia.org/wiki/Odd_number" title="Odd number" class="mw-redirect">odd</a> or <a href="http://en.m.wikipedia.org/wiki/Prime_number" title="Prime number">prime numbers</a>.</p>
<p>We can allow the table size <i>n</i> to not be a power of 2 and still
 not have to perform any remainder or division operation, as these 
computations are sometimes costly. For example, let <i>n</i> be significantly less than 2<sup><i>b</i></sup>. Consider a pseudo random number generator (<a href="http://en.m.wikipedia.org/wiki/PRNG" title="PRNG" class="mw-redirect">PRNG</a>) function <i>P</i>(key) that is uniform on the interval [0, 2<sup><i>b</i></sup>&nbsp;−&nbsp;1]. A hash function uniform on the interval [0, n-1] is <i>n</i> <i>P</i>(key)/2<sup><i>b</i></sup>. We can replace the division by a (possibly faster) right <a href="http://en.m.wikipedia.org/wiki/Bit_shifting" title="Bit shifting" class="mw-redirect">bit shift</a>: <i>nP</i>(key) &gt;&gt; <i>b</i>.</p>
<h3> <span class="mw-headline" id="Variable_range_with_minimal_movement_.28dynamic_hash_function.29">Variable range with minimal movement (dynamic hash function)</span>
</h3>
<p>When the hash function is used to store values in a hash table that 
outlives the run of the program, and the hash table needs to be expanded
 or shrunk, the hash table is referred to as a dynamic hash table.</p>
<p>A hash function that will relocate the minimum number of records when
 the table is resized is desirable. What is needed is a hash function <i>H</i>(<i>z</i>,<i>n</i>)&nbsp;– where <i>z</i> is the key being hashed and <i>n</i> is the number of allowed hash values&nbsp;– such that <i>H</i>(<i>z</i>,<i>n</i>&nbsp;+&nbsp;1) = <i>H</i>(<i>z</i>,<i>n</i>) with probability close to <i>n</i>/(<i>n</i>&nbsp;+&nbsp;1).</p>
<p><a href="http://en.m.wikipedia.org/wiki/Linear_hashing" title="Linear hashing">Linear hashing</a>
 and spiral storage are examples of dynamic hash functions that execute 
in constant time but relax the property of uniformity to achieve the 
minimal movement property.</p>
<p><a href="http://en.m.wikipedia.org/wiki/Extendible_hashing" title="Extendible hashing">Extendible hashing</a> uses a dynamic hash function that requires space proportional to <i>n</i> to compute the hash function, and it becomes a function of the previous keys that have been inserted.</p>
<p>Several algorithms that preserve the uniformity property but require time proportional to <i>n</i> to compute the value of <i>H</i>(<i>z</i>,<i>n</i>) have been invented.</p>
<h3> <span class="mw-headline" id="Data_normalization">Data normalization</span>
</h3>
<p>In some applications, the input data may contain features that are 
irrelevant for comparison purposes. For example, when looking up a 
personal name, it may be desirable to ignore the distinction between 
upper and lower case letters. For such data, one must use a hash 
function that is compatible with the data <a href="http://en.m.wikipedia.org/wiki/Equivalence_relation" title="Equivalence relation">equivalence</a>
 criterion being used: that is, any two inputs that are considered 
equivalent must yield the same hash value. This can be accomplished by 
normalizing the input before hashing it, as by upper-casing all letters.</p>
<h3> <span class="mw-headline" id="Continuity">Continuity</span>
</h3>
<p>A hash function that is used to search for similar (as opposed to equivalent) data must be as <a href="http://en.m.wikipedia.org/wiki/Continuous_function" title="Continuous function">continuous</a> as possible; two inputs that differ by a little should be mapped to equal or nearly equal hash values.</p>
<p>Note that continuity is usually considered a fatal flaw for checksums, <a href="http://en.m.wikipedia.org/wiki/Cryptographic_hash_function" title="Cryptographic hash function">cryptographic hash functions</a>,
 and other related concepts. Continuity is desirable for hash functions 
only in some applications, such as hash tables that use <a href="http://en.m.wikipedia.org/wiki/Linear_search" title="Linear search">linear search</a>.</p>
</div><a id="anchor_1" href="#section_1" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_2"><button>Show</button><span id="Hash_function_algorithms">Hash function algorithms</span></h2><div class="content_block" id="content_2">
<p>For most types of hashing functions the choice of the function depends strongly on the nature of the input data, and their <a href="http://en.m.wikipedia.org/wiki/Probability_distribution" title="Probability distribution">probability distribution</a> in the intended application.</p>
<h3> <span class="mw-headline" id="Trivial_hash_function">Trivial hash function</span>
</h3>
<p>If the datum to be hashed is small enough, one can use the datum 
itself (reinterpreted as an integer in binary notation) as the hashed 
value. The cost of computing this "trivial" (<a href="http://en.m.wikipedia.org/wiki/Identity_function" title="Identity function">identity</a>) hash function is effectively zero. This hash function is <a href="http://en.m.wikipedia.org/wiki/Perfect_hash_function" title="Perfect hash function">perfect</a>, as it maps each input to a distinct hash value.</p>
<p>The meaning of "small enough" depends on the size of the type that is used as the hashed value. For example, in <a href="http://en.m.wikipedia.org/wiki/Java_%28programming_language%29" title="Java (programming language)">Java</a>, the hash code is a 32-bit integer. Thus the 32-bit integer <code>Integer</code> and 32-bit floating-point <code>Float</code> objects can simply use the value directly; whereas the 64-bit integer <code>Long</code> and 64-bit floating-point <code>Double</code> cannot use this method.</p>
<p>Other types of data can also use this perfect hashing scheme. For example, when mapping <a href="http://en.m.wikipedia.org/wiki/Character_string" title="Character string" class="mw-redirect">character strings</a> between <a href="http://en.m.wikipedia.org/wiki/Case_%28typography%29" title="Case (typography)" class="mw-redirect">upper and lower case</a>,
 one can use the binary encoding of each character, interpreted as an 
integer, to index a table that gives the alternative form of that 
character ("A" for "a", "8" for "8", etc.). If each character is stored 
in 8 bits (as in <a href="http://en.m.wikipedia.org/wiki/ASCII" title="ASCII">ASCII</a> or <a href="http://en.m.wikipedia.org/wiki/ISO_Latin_1" title="ISO Latin 1" class="mw-redirect">ISO Latin 1</a>), the table has only 2<sup>8</sup> = 256 entries; in the case of <a href="http://en.m.wikipedia.org/wiki/Unicode" title="Unicode">Unicode</a> characters, the table would have 17×2<sup>16</sup> = 1114112 entries.</p>
<p>The same technique can be used to map <a href="http://en.m.wikipedia.org/wiki/ISO_3166-1_alpha-2" title="ISO 3166-1 alpha-2">two-letter country codes</a> like "us" or "za" to country names (26<sup>2</sup>=676
 table entries), 5-digit zip codes like 13083 to city names (100000 
entries), etc. Invalid data values (such as the country code "xx" or the
 zip code 00000) may be left undefined in the table, or mapped to some 
appropriate "null" value.</p>
<h3> <span class="mw-headline" id="Perfect_hashing">Perfect hashing</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Perfect_hash_function" title="Perfect hash function">Perfect hash function</a>
</div>
<div class="thumb tright">
<div class="thumbinner" style="width:242px;">
<a href="http://en.m.wikipedia.org/wiki/File:Hash_table_4_1_1_0_0_0_0_LL.svg" class="image"><img alt="" src="Hash_function_files/240px-Hash_table_4_1_1_0_0_0_0_LL.png" class="thumbimage" width="240" height="216"></a>
<div class="thumbcaption">

A perfect hash function for the four names shown</div>
</div>
</div>
<p>A hash function that is <a href="http://en.m.wikipedia.org/wiki/Injective_function" title="Injective function">injective</a>—that is, maps each valid input to a different hash value—is said to be <b><a href="http://en.m.wikipedia.org/wiki/Perfect_hash_function" title="Perfect hash function">perfect</a></b>. With such a function one can directly locate the desired entry in a hash table, without any additional searching.</p>
<h3> <span class="mw-headline" id="Minimal_perfect_hashing">Minimal perfect hashing</span>
</h3>
<div class="thumb tright">
<div class="thumbinner" style="width:242px;">
<a href="http://en.m.wikipedia.org/wiki/File:Hash_table_4_1_0_0_0_0_0_LL.svg" class="image"><img alt="" src="Hash_function_files/240px-Hash_table_4_1_0_0_0_0_0_LL.png" class="thumbimage" width="240" height="168"></a>
<div class="thumbcaption">

A minimal perfect hash function for the four names shown</div>
</div>
</div>
<p>A perfect hash function for <i>n</i> keys is said to be <b>minimal</b> if its range consists of <i>n</i> <i>consecutive</i> integers, usually from 0 to <i>n</i>−1.
 Besides providing single-step lookup, a minimal perfect hash function 
also yields a compact hash table, without any vacant slots. Minimal 
perfect hash functions are much harder to find than perfect ones with a 
wider range.</p>
<h3> <span class="mw-headline" id="Hashing_uniformly_distributed_data">Hashing uniformly distributed data</span>
</h3>
<p>If the inputs are bounded-length <a href="http://en.m.wikipedia.org/wiki/String_%28computer_science%29" title="String (computer science)">strings</a> (such as <a href="http://en.m.wikipedia.org/wiki/Telephone" title="Telephone">telephone</a> numbers, <a href="http://en.m.wikipedia.org/wiki/Vehicle_registration_plate" title="Vehicle registration plate">car license plates</a>, <a href="http://en.m.wikipedia.org/wiki/Invoice" title="Invoice">invoice</a> numbers, etc.), and each input may <a href="http://en.m.wikipedia.org/wiki/Statistical_independence" title="Statistical independence" class="mw-redirect">independently</a> occur with <a href="http://en.m.wikipedia.org/wiki/Uniform_distribution_%28discrete%29" title="Uniform distribution (discrete)">uniform</a>
 probability, then a hash function need only map roughly the same number
 of inputs to each hash value. For instance, suppose that each input is 
an integer <i>z</i> in the range 0 to <i>N</i>−1, and the output must be an integer <i>h</i> in the range 0 to <i>n</i>−1, where <i>N</i> is much larger than <i>n</i>. Then the hash function could be <i>h</i> = <i>z</i> <b>mod</b> <i>n</i> (the remainder of <i>z</i> divided by <i>n</i>), or <i>h</i> = (<i>z</i> × <i>n</i>) ÷ <i>N</i> (the value <i>z</i> scaled down by <i>n</i>/<i>N</i> and truncated to an integer), or many other formulas.</p>
<p>Warning: <i>h</i> = <i>z</i> <b>mod</b> <i>n</i> was used in many of the original random number generators, but was found to have a number of issues. One of which is that as <i>n</i> approaches <i>N</i>, this function becomes less and less uniform.</p>
<h3> <span class="mw-headline" id="Hashing_data_with_other_distributions">Hashing data with other distributions</span>
</h3>
<p>These simple formulas will not do if the input values are not equally
 likely, or are not independent. For instance, most patrons of a <a href="http://en.m.wikipedia.org/wiki/Supermarket" title="Supermarket">supermarket</a>
 will live in the same geographic area, so their telephone numbers are 
likely to begin with the same 3 to 4 digits. In that case, if <i>n</i> is 10000 or so, the division formula (<i>z</i> × <i>n</i>) ÷ <i>N</i>, which depends mainly on the leading digits, will generate a lot of collisions; whereas the remainder formula <i>z</i> <b>mod</b> <i>n</i>, which is quite sensitive to the trailing digits, may still yield a fairly even distribution.:-)</p>
<h3> <span class="mw-headline" id="Hashing_variable-length_data">Hashing variable-length data</span>
</h3>
<p>When the data values are long (or variable-length) <a href="http://en.m.wikipedia.org/wiki/Character_string" title="Character string" class="mw-redirect">character strings</a>—such as personal names, <a href="http://en.m.wikipedia.org/wiki/URL" title="URL" class="mw-redirect">web page addresses</a>, or mail messages—their distribution is usually very uneven, with complicated dependencies. For example, text in any <a href="http://en.m.wikipedia.org/wiki/Natural_language" title="Natural language">natural language</a> has highly non-uniform distributions of <a href="http://en.m.wikipedia.org/wiki/Character_%28computing%29" title="Character (computing)">characters</a>, and <a href="http://en.m.wikipedia.org/wiki/Digraph_%28computing%29" title="Digraph (computing)" class="mw-redirect">character pairs</a>,
 very characteristic of the language. For such data, it is prudent to 
use a hash function that depends on all characters of the string—and 
depends on each character in a different way.</p>
<p>In cryptographic hash functions, a <a href="http://en.m.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction" title="Merkle–Damgård construction">Merkle–Damgård construction</a> is usually used. In general, the scheme for hashing such data is to break the input into a sequence of small units (<a href="http://en.m.wikipedia.org/wiki/Bit" title="Bit">bits</a>, <a href="http://en.m.wikipedia.org/wiki/Byte" title="Byte">bytes</a>, <a href="http://en.m.wikipedia.org/wiki/Word_%28data_type%29" title="Word (data type)" class="mw-redirect">words</a>, etc.) and combine all the units <i>b</i>[1], <i>b</i>[2], ..., <i>b</i>[<i>m</i>] sequentially, as follows</p>
<pre><code>S ← S0;                             // <i>Initialize the state.</i>
<b>for</b> k <b>in</b> 1, 2, ..., m <b>do</b>             // <i>Scan the input data units:</i>
  S ← F(S, b[k]);                   //   <i>Combine data unit k into the state.</i>
<b>return</b> G(S, n)                      // <i>Extract the hash value from the state.</i></code>
</pre>
<p>This schema is also used in many text checksum and fingerprint algorithms. The state variable <i>S</i> may be a 32- or 64-bit unsigned integer; in that case, <i>S0</i> can be 0, and <i>G</i>(<i>S</i>,<i>n</i>) can be just <i>S</i> <b>mod</b> <i>n</i>. The best choice of <i>F</i> is a complex issue and depends on the nature of the data. If the units <i>b</i>[<i>k</i>] are single bits, then <i>F</i>(<i>S</i>,<i>b</i>) could be, for instance</p>
<pre><code> <b>if</b> highbit(S) = 0 <b>then</b>
   <b>return</b> 2 * S + b
 <b>else</b>
   <b>return</b> (2 * S + b) ^ P</code>
</pre>
<p>Here <i>highbit</i>(<i>S</i>) denotes the most significant bit of <i>S</i>; the '<tt>*</tt>' operator denotes unsigned integer multiplication with lost <a href="http://en.m.wikipedia.org/wiki/Overflow_%28software%29" title="Overflow (software)">overflow</a>; '<tt>^</tt>' is the bitwise <a href="http://en.m.wikipedia.org/wiki/Exclusive_or" title="Exclusive or">exclusive or</a> operation applied to words; and <i>P</i> is a suitable fixed word.<sup id="cite_ref-bro2_2-0" class="reference"><a href="#cite_note-bro2-2"><span>[</span>3<span>]</span></a></sup></p>
<h3> <span class="mw-headline" id="Special-purpose_hash_functions">Special-purpose hash functions</span>
</h3>
<p>In many cases, one can design a special-purpose (<a href="http://en.m.wikipedia.org/wiki/Heuristic_%28computer_science%29" title="Heuristic (computer science)">heuristic</a>)
 hash function that yields many fewer collisions than a good 
general-purpose hash function. For example, suppose that the input data 
are file names such as <tt>FILE0000.CHK</tt>, <tt>FILE0001.CHK</tt>, <tt>FILE0002.CHK</tt>, etc., with mostly sequential numbers. For such data, a function that extracts the numeric part <i>k</i> of the file name and returns <i>k</i> <b>mod</b> <i>n</i>
 would be nearly optimal. Needless to say, a function that is 
exceptionally good for a specific kind of data may have dismal 
performance on data with different distribution.</p>
<h3> <span class="mw-headline" id="Rolling_hash">Rolling hash</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Rolling_hash" title="Rolling hash">rolling hash</a>
</div>
<p>In some applications, such as <a href="http://en.m.wikipedia.org/wiki/String_searching_algorithm" title="String searching algorithm">substring search</a>, one must compute a hash function <i>h</i> for every <i>k</i>-character <a href="http://en.m.wikipedia.org/wiki/Substring" title="Substring">substring</a> of a given <i>n</i>-character string <i>t</i>; where <i>k</i> is a fixed integer, and <i>n</i> is <i>k</i>. The straightforward solution, which is to extract every such substring <i>s</i> of <i>t</i> and compute <i>h</i>(<i>s</i>) separately, requires a number of operations proportional to <i>k</i>·<i>n</i>. However, with the proper choice of <i>h</i>, one can use the technique of rolling hash to compute all those hashes with an effort proportional to <i>k</i>&nbsp;+&nbsp;<i>n</i>.</p>
<h3> <span class="mw-headline" id="Universal_hashing">Universal hashing</span>
</h3>
<p>A <a href="http://en.m.wikipedia.org/wiki/Universal_hashing" title="Universal hashing">universal hashing</a> scheme is a <a href="http://en.m.wikipedia.org/wiki/Randomized_algorithm" title="Randomized algorithm">randomized algorithm</a> that selects a hashing function <i>h</i> among a family of such functions, in such a way that the probability of a collision of any two distinct keys is 1/<i>n</i>, where <i>n</i>
 is the number of distinct hash values desired—independently of the two 
keys. Universal hashing ensures (in a probabilistic sense) that the hash
 function application will behave as well as if it were using a random 
function, for any distribution of the input data. It will however have 
more collisions than perfect hashing, and may require more operations 
than a special-purpose hash function.</p>
<h3> <span class="mw-headline" id="Hashing_with_checksum_functions">Hashing with checksum functions</span>
</h3>
<p>One can adapt certain checksum or fingerprinting algorithms for use 
as hash functions. Some of those algorithms will map arbitrary long 
string data <i>z</i>, with any typical real-world distribution—no matter
 how non-uniform and dependent—to a 32-bit or 64-bit string, from which 
one can extract a hash value in 0 through <i>n</i>&nbsp;−&nbsp;1.</p>
<p>This method may produce a sufficiently uniform distribution of hash values, as long as the hash range size <i>n</i> is small compared to the range of the checksum or fingerprint function. However, some checksums fare poorly in the <a href="http://en.m.wikipedia.org/wiki/Avalanche_effect" title="Avalanche effect">avalanche test</a>,
 which may be a concern in some applications. In particular, the popular
 CRC32 checksum provides only 16 bits (the higher half of the result) 
that are usable for hashing<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from June 2012">citation needed</span></a></i>]</sup>.
 Moreover, each bit of the input has a deterministic effect on each bit 
of the CRC32, that is one can tell without looking at the rest of the 
input, which bits of the output will flip if the input bit is flipped; 
so care must be taken to use all 32 bits when computing the hash from 
the checksum.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3"><span>[</span>4<span>]</span></a></sup></p>
<h3> <span class="mw-headline" id="Hashing_with_cryptographic_hash_functions">Hashing with cryptographic hash functions</span>
</h3>
<p>Some <a href="http://en.m.wikipedia.org/wiki/Cryptographic_hash_function" title="Cryptographic hash function">cryptographic hash functions</a>, such as <a href="http://en.m.wikipedia.org/wiki/SHA-1" title="SHA-1">SHA-1</a>,
 have even stronger uniformity guarantees than checksums or 
fingerprints, and thus can provide very good general-purpose hashing 
functions.</p>
<p>In ordinary applications, this advantage may be too small to offset their much higher cost.<sup id="cite_ref-4" class="reference"><a href="#cite_note-4"><span>[</span>5<span>]</span></a></sup>
 However, this method can provide uniformly distributed hashes even when
 the keys are chosen by a malicious agent. This feature may help protect
 services against <a href="http://en.m.wikipedia.org/wiki/Denial_of_service_attack" title="Denial of service attack" class="mw-redirect">denial of service attacks</a>.</p>
<h3> <span class="mw-headline" id="Hashing_By_Nonlinear_Table_Lookup">Hashing By Nonlinear Table Lookup</span>
</h3>
<p>Tables of random numbers (such as 256 random 32 bit integers) can 
provide high-quality non-linear functions to be used as hash functions 
or other purposes such as cryptography. The key to be hashed would be 
split in 8-bit (one byte) parts and each part will be used as an index 
for the non-linear table. The table values will be added by arithmetic 
or XOR addition to the hash output value. Because the table is just 1024
 bytes in size, it will fit into the cache of modern microprocessors and
 allow for very fast execution of the hashing algorithm. As the table 
value is on average much longer than 8 bit, one bit of input will affect
 nearly all output bits. This is different to multiplicative hash 
functions where higher-value input bits do not affect lower-value output
 bits.</p>
<p>This algorithm has proven to be very fast and of high quality for hashing purposes (especially hashing of integer number keys).</p>
<h3> <span class="mw-headline" id="Efficient_Hashing_Of_Strings">Efficient Hashing Of Strings</span>
</h3>
<p>Modern microprocessors will allow for much faster processing, if 
8-bit character Strings are not hashed by processing one character at a 
time, but by interpreting the string as an array of 32 bit or 64 bit 
integers and hashing/accumulating these "wide word" integer values by 
means of arithmetic operations (e.g. multiplication by constant and 
bit-shifting). The remainding characters of the string which are smaller
 than the word length of the CPU must be handled differently (e.g. being
 processed one character at a time).</p>
<p>This approach has proven to speed up hash code generation by a factor
 of five or more on modern microprocessors of a word size of 64 bit.</p>
</div><a id="anchor_2" href="#section_2" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_3"><button>Show</button><span id="Origins_of_the_term">Origins of the term</span></h2><div class="content_block" id="content_3">
<p>The term "hash" comes by way of analogy with its non-technical 
meaning, to "chop and mix". Indeed, typical hash functions, like the <b><a href="http://en.m.wikipedia.org/wiki/Modular_arithmetic" title="Modular arithmetic">mod</a></b>
 operation, "chop" the input domain into many sub-domains that get 
"mixed" into the output range to improve the uniformity of the key 
distribution.</p>
<p><a href="http://en.m.wikipedia.org/wiki/Donald_Knuth" title="Donald Knuth">Donald Knuth</a> notes that <a href="http://en.m.wikipedia.org/wiki/Hans_Peter_Luhn" title="Hans Peter Luhn">Hans Peter Luhn</a> of <a href="http://en.m.wikipedia.org/wiki/IBM" title="IBM">IBM</a> appears to have been the first to use the concept, in a memo dated January 1953, and that <a href="http://en.m.wikipedia.org/wiki/Robert_Morris_%28cryptographer%29" title="Robert Morris (cryptographer)">Robert Morris</a> used the term in a survey paper in <a href="http://en.m.wikipedia.org/wiki/Communications_of_the_ACM" title="Communications of the ACM">CACM</a> which elevated the term from technical jargon to formal terminology.<sup id="cite_ref-knuth_0-1" class="reference"><a href="#cite_note-knuth-0"><span>[</span>1<span>]</span></a></sup></p>
</div><a id="anchor_3" href="#section_3" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_4"><button>Show</button><span id="List_of_hash_functions">List of hash functions</span></h2><div class="content_block" id="content_4">
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/List_of_hash_functions" title="List of hash functions">List of hash functions</a>
</div>
<ul>
<li>Bernstein hash<sup id="cite_ref-5" class="reference"><a href="#cite_note-5"><span>[</span>6<span>]</span></a></sup>
</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Fowler-Noll-Vo_hash_function" title="Fowler-Noll-Vo hash function" class="mw-redirect">Fowler-Noll-Vo hash function</a> (32, 64, 128, 256, 512, or 1024 bits)</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Jenkins_hash_function" title="Jenkins hash function">Jenkins hash function</a> (32 bits)</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Pearson_hashing" title="Pearson hashing">Pearson hashing</a> (8 bits)</li>
<li><a href="http://en.m.wikipedia.org/wiki/Zobrist_hashing" title="Zobrist hashing">Zobrist hashing</a></li>
</ul>
</div><a id="anchor_4" href="#section_4" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_5"><button>Show</button><span id="See_also">See also</span></h2><div class="content_block" id="content_5">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Bloom_filter" title="Bloom filter">Bloom filter</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Coalesced_hashing" title="Coalesced hashing">Coalesced hashing</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Cuckoo_hashing" title="Cuckoo hashing">Cuckoo hashing</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Cryptographic_hash_function" title="Cryptographic hash function">Cryptographic hash function</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Distributed_hash_table" title="Distributed hash table">Distributed hash table</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Geometric_hashing" title="Geometric hashing">Geometric hashing</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Hash_table" title="Hash table">Hash table</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/HMAC" title="HMAC" class="mw-redirect">HMAC</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Identicon" title="Identicon">Identicon</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Linear_hash" title="Linear hash" class="mw-redirect">Linear hash</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/List_of_hash_functions" title="List of hash functions">List of hash functions</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Locality_sensitive_hashing" title="Locality sensitive hashing" class="mw-redirect">Locality sensitive hashing</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/MD5" title="MD5">MD5</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Perfect_hash_function" title="Perfect hash function">Perfect hash function</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Rabin%E2%80%93Karp_string_search_algorithm" title="Rabin–Karp string search algorithm" class="mw-redirect">Rabin–Karp string search algorithm</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Rolling_hash" title="Rolling hash">Rolling hash</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Transposition_table" title="Transposition table">Transposition table</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Universal_hashing" title="Universal hashing">Universal hashing</a></li>
</ul>
</div><a id="anchor_5" href="#section_5" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_6"><button>Show</button><span id="References">References</span></h2><div class="content_block" id="content_6">
<div class="reflist" style="list-style-type: decimal;">
<ol class="references">
<li id="cite_note-knuth-0">
<span class="mw-cite-backlink">^ <a href="#cite_ref-knuth_0-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-knuth_0-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Donald_Knuth" title="Donald Knuth">Knuth, Donald</a> (1973). <i><a href="http://en.m.wikipedia.org/wiki/The_Art_of_Computer_Programming" title="The Art of Computer Programming">The Art of Computer Programming</a>, volume 3, Sorting and Searching</i>. pp.&nbsp;506–542.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=%5B%5BThe+Art+of+Computer+Programming%5D%5D%2C+volume+3%2C+Sorting+and+Searching&amp;rft.aulast=%5B%5BDonald+Knuth%7CKnuth%2C+Donald%5D%5D&amp;rft.au=%5B%5BDonald+Knuth%7CKnuth%2C+Donald%5D%5D&amp;rft.date=1973&amp;rft.pages=pp.%26nbsp%3B506%E2%80%93542&amp;rfr_id=info:sid/en.wikipedia.org:Hash_function"><span style="display: none;">&nbsp;</span></span></span>
</li>
<li id="cite_note-AudioHash1-1">
<span class="mw-cite-backlink"><b><a href="#cite_ref-AudioHash1_1-0">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://citeseer.ist.psu.edu/rd/11787382%2C504088%2C1%2C0.25%2CDownload/http://citeseer.ist.psu.edu/cache/papers/cs/25861/http:zSzzSzwww.extra.research.philips.comzSznatlabzSzdownloadzSzaudiofpzSzcbmi01audiohashv1.0.pdf/haitsma01robust.pdf">"Robust Audio Hashing for Content Identification by Jaap Haitsma, Ton Kalker and Job Oostveen"</a></span>
</li>
<li id="cite_note-bro2-2">
<span class="mw-cite-backlink"><b><a href="#cite_ref-bro2_2-0">^</a></b></span> <span class="reference-text"><span class="citation book">Broder, A. Z. (1993). "Some applications of Rabin's fingerprinting method". <i>Sequences II: Methods in Communications, Security, and Computer Science</i>. Springer-Verlag. pp.&nbsp;143–152.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Some+applications+of+Rabin%27s+fingerprinting+method&amp;rft.atitle=Sequences+II%3A+Methods+in+Communications%2C+Security%2C+and+Computer+Science&amp;rft.aulast=Broder&amp;rft.aufirst=A.+Z.&amp;rft.au=Broder%2C%26%2332%3BA.+Z.&amp;rft.date=1993&amp;rft.pages=pp.%26nbsp%3B143%E2%80%93152&amp;rft.pub=Springer-Verlag&amp;rfr_id=info:sid/en.wikipedia.org:Hash_function"><span style="display: none;">&nbsp;</span></span></span>
</li>
<li id="cite_note-3">
<span class="mw-cite-backlink"><b><a href="#cite_ref-3">^</a></b></span> <span class="reference-text">Bret Mulvey, <i><a rel="nofollow" class="external text" href="http://home.comcast.net/%7Ebretm/hash/8.html">Evaluation of CRC32 for Hash Tables</a></i>, in <i><a rel="nofollow" class="external text" href="http://home.comcast.net/%7Ebretm/hash/">Hash Functions</a></i>. Accessed April 10, 2009.</span>
</li>
<li id="cite_note-4">
<span class="mw-cite-backlink"><b><a href="#cite_ref-4">^</a></b></span> <span class="reference-text">Bret Mulvey, <i><a rel="nofollow" class="external text" href="http://home.comcast.net/%7Ebretm/hash/9.html">Evaluation of SHA-1 for Hash Tables</a></i>, in <i><a rel="nofollow" class="external text" href="http://home.comcast.net/%7Ebretm/hash/">Hash Functions</a></i>. Accessed April 10, 2009.</span>
</li>
<li id="cite_note-5">
<span class="mw-cite-backlink"><b><a href="#cite_ref-5">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://www.cse.yorku.ca/%7Eoz/hash.html">http://www.cse.yorku.ca/~oz/hash.html</a></span>
</li>
</ol>
</div>
</div><a id="anchor_6" href="#section_6" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_7"><button>Show</button><span id="External_links">External links</span></h2><div class="content_block" id="content_7">
<table class="metadata mbox-small plainlinks" style="border: 1px solid rgb(170, 170, 170); background-color: rgb(249, 249, 249);"><tbody><tr>
<td class="mbox-image"><img alt="" src="Hash_function_files/37px-Wiktionary-logo-en.png" width="37" height="40"></td>
<td class="mbox-text" style="">Look up <i><b><a class="external text" href="http://en.wiktionary.org/wiki/hash">hash</a></b></i> in Wiktionary, the free dictionary.</td>
</tr></tbody></table>
<ul>
<li><a rel="nofollow" class="external text" href="http://www.partow.net/programming/hashfunctions/index.html">General purpose hash function algorithms (C/C++/Pascal/Java/Python/Ruby)</a></li>
<li><a rel="nofollow" class="external text" href="http://burtleburtle.net/bob/hash/index.html">Hash Functions and Block Ciphers by Bob Jenkins</a></li>
<li>
<a rel="nofollow" class="external text" href="http://www.webcitation.org/query?url=http://www.geocities.com/drone115b/Goulburn06.pdf&amp;date=2009-10-25+21:06:51">The Goulburn Hashing Function</a> (<a href="http://en.m.wikipedia.org/wiki/Portable_Document_Format" title="Portable Document Format">PDF</a>) by Mayur Patel</li>
<li>
<a rel="nofollow" class="external text" href="http://video.google.com/videoplay?docid=-727485696209877198&amp;q=source%3A014117792397255896270&amp;hl=en">MIT's Introduction to Algorithms: Hashing 1</a> MIT OCW lecture Video</li>
<li>
<a rel="nofollow" class="external text" href="http://video.google.com/videoplay?docid=2307261494964091254&amp;q=source%3A014117792397255896270&amp;hl=en">MIT's Introduction to Algorithms: Hashing 2</a> MIT OCW lecture Video</li>
<li>
<a rel="nofollow" class="external text" href="http://herakles.zcu.cz/%7Eskala/PUBL/PUBL_2010/2010_WSEAS-Corfu_Hash-final.pdf">Hash Fuction Construction for Textual and Geometrical Data Retrieval</a> Latest Trends on Computers, Vol.2, pp.&nbsp;483–489, CSCC conference, Corfu, 2010</li>
</ul>

</div>
</div>		</div>
	</div>
			<div id="footer">
			<h2 class="section_heading" id="section_footer"><button>Show</button>
		<div class="license">Wikipedia ™</div>		<span class="toggleCopyright">
			<span class="more">more</span><span class="less">less</span>
		</span>
	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Hash_function&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li>
				<span class="left"><a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span><span class="right">Images ON / <a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions/DisableImages&amp;returnto=Hash+function&amp;mobiletoken=5c89e355d2af09275b3b2ed3653e1683" title="Special:MobileOptions/DisableImages" id="imagetoggle">OFF</a></span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Hash_function&amp;action=history">contributors</a> like you<br>
				Content available under <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>			</li>
		</ul>
		<ul class="links">
			<li>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Hash+function&amp;feedbacksource=MobileFrontend">Contact</a>
			</li><li>
			<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div>
	</div>
				<!--[if gt IE 7]><!-->
		<script type="text/javascript">mw={loader:{state:function(){}}};</script>		<script src="Hash_function_files/load_002.php" type="text/javascript"></script>
<script src="Hash_function_files/load.php" type="text/javascript"></script>	<script type="text/javascript">
	window.onload = function() {
		mw.mobileFrontend.init();
	};
	</script>
	<!----><!--[endif]---->
	
	<div style="display: none;" id="mf-references"><div></div><button>close</button></div></body></html>