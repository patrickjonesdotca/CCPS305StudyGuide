<!DOCTYPE html>
<html class="jsEnabled togglingEnabled" dir="ltr" lang="en"><head>
		<title>Patience sorting - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<meta name="robots" content="noindex,nofollow">		<link rel="stylesheet" href="Patience_sorting_files/load.css" type="text/css" media="all">		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png">		<script type="text/javascript">
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-header":"This article is available in 5 languages","mobile-frontend-language-footer":"<a href=\"\/wiki\/Special:Special:MobileOptions\/Language\">Wikipedia is available in other languages.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"scriptPath":"\/w","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			document.documentElement.className = 'jsEnabled page-loading';		</script>
		<link rel="canonical" href="http://en.wikipedia.org/wiki/Patience_sorting">
	</head>
	<body class="mobile mw-mf-checkboxes">
							<div id="mw-mf-header">
					<form id="mw-mf-searchForm" action="/w/index.php" class="search_bar" method="get">
							<img alt="Logo" id="mw-mf-logo" src="Patience_sorting_files/W_logo_for_Mobile_Frontend.gif" width="35" height="22">
						<input value="Special:Search" name="title" type="hidden">
			<div id="mw-mf-sq" class="divclearable">
				<input name="search" id="mw-mf-search" size="22" autocomplete="off" maxlength="1024" class="search" placeholder="Type your search here..." type="search">
				<img src="Patience_sorting_files/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear">
			</div>
						<button id="goButton" class="goButton" type="submit">
				<img src="Patience_sorting_files/blank.gif" alt="Go" title="Go">
			</button>
					</form>
									<div class="nav" id="nav">
				<div id="mw-mf-language-selection">
		Language:<br>
		<select id="languageselection"><option value="http://en.wikipedia.org/wiki/Patience_sorting" selected="selected">English</option><option value="//eo.m.wikipedia.org/wiki/Paciencluda_ordigo">Esperanto</option><option value="//fa.m.wikipedia.org/wiki/%D9%85%D8%B1%D8%AA%D8%A8%E2%80%8C%D8%B3%D8%A7%D8%B2%DB%8C_%D8%B4%DA%A9%DB%8C%D8%A8%D8%A7%D9%86%D9%87">فارسی</option><option value="//is.m.wikipedia.org/wiki/Kapalr%C3%B6%C3%B0un">íslenska</option><option value="//tr.m.wikipedia.org/wiki/Sab%C4%B1r_s%C4%B1ralamas%C4%B1">Türkçe</option></select>
	</div><br>
			<a href="http://en.m.wikipedia.org/wiki/Main_Page" id="homeButton" class="button">Home</a>
			<a href="http://en.m.wikipedia.org/wiki/Special:Random" id="randomButton" class="button">Random</a>
			</div>
		</div>
				<div id="results"><ul class="suggestions-results" title="No Results"><li class="suggestions-result">Type search term above and matching article titles will appear here.</li></ul></div>
		<div class="show" id="content_wrapper">
				<div id="content">
			<h1 id="firstHeading">Patience sorting</h1>			
<table class="infobox" style="width: 22em;" cellspacing="5">
<caption class="" style="">Patience sorting</caption>
<tbody><tr class="">
<th scope="row" style="text-align: left;">Class</th>
<td class="" style=""><a href="http://en.m.wikipedia.org/wiki/Sorting_algorithm" title="Sorting algorithm">Sorting algorithm</a></td>
</tr>
<tr class="">
<th scope="row" style="text-align: left;">Data structure</th>
<td class="" style=""><a href="http://en.m.wikipedia.org/wiki/Array_data_structure" title="Array data structure">Array</a></td>
</tr>
<tr class="">
<th scope="row" style="text-align: left;"><a href="http://en.m.wikipedia.org/wiki/Best,_worst_and_average_case" title="Best, worst and average case">Worst case performance</a></th>
<td class="" style=""><img class="tex" alt="O(n \log n)" src="Patience_sorting_files/f49341ab621f12e8cb93d0146ea51d34.png"></td>
</tr>
</tbody></table>
<p><b>Patience sorting</b> is a <a href="http://en.m.wikipedia.org/wiki/Sorting_algorithm" title="Sorting algorithm">sorting algorithm</a>, based on a <a href="http://en.m.wikipedia.org/wiki/Solitaire" title="Solitaire">solitaire</a> <a href="http://en.m.wikipedia.org/wiki/Card_game" title="Card game">card game</a>, that has the property of being able to efficiently compute the length of a <a href="http://en.m.wikipedia.org/wiki/Longest_increasing_subsequence" title="Longest increasing subsequence">longest increasing subsequence</a> in a given <a href="http://en.m.wikipedia.org/wiki/Array_data_structure" title="Array data structure">array</a>.</p>
<div class="section"><h2 class="section_heading" id="section_1"><button>Show</button><span id="The_card_game">The card game</span></h2><div class="content_block" id="content_1">
<p>The game begins with a <a href="http://en.m.wikipedia.org/wiki/Shuffle" title="Shuffle" class="mw-redirect">shuffled</a> deck of cards, labeled <img class="tex" alt="1, 2, \ldots, n" src="Patience_sorting_files/9faf2d3c0edeb35025e102bcb2f8537b.png">.</p>
<p>The cards are dealt one by one into a sequence of piles on the table, according to the following rules.</p>
<ol>
<li>Initially, there are no piles. The first card dealt forms a new pile consisting of the single card.</li>
<li>Each new card may be placed either on an existing pile whose top 
card has a value higher than the new card's value, thus increasing the 
number of cards in that pile, or to the right of all of the existing 
piles, thus forming a new pile.</li>
<li>When there are no more cards remaining to deal, the game ends.</li>
</ol>
<p>The object of the game is to finish with as few piles as possible. D.&nbsp;Aldous and P.&nbsp;Diaconis<sup id="cite_ref-Aldous_0-0" class="reference"><a href="#cite_note-Aldous-0"><span>[</span>1<span>]</span></a></sup> suggest defining 9 or fewer piles as a winning outcome for <img class="tex" alt="n = 52" src="Patience_sorting_files/8efcbb31ae9408b35be6cfb5d4c8282a.png">, which has approximately 5% chance to happen.</p>
</div><a id="anchor_1" href="#section_1" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_2"><button>Show</button><span id="Algorithm_for_sorting">Algorithm for sorting</span></h2><div class="content_block" id="content_2">
<p>Given an <img class="tex" alt="n" src="Patience_sorting_files/7b8b965ad4bca0e41ab51de7b31363a1.png">-element array with an <a href="http://en.m.wikipedia.org/wiki/Total_order" title="Total order">ordering</a> <a href="http://en.m.wikipedia.org/wiki/Binary_relation" title="Binary relation">relation</a>
 as an input for the sorting, consider it as a collection of cards, with
 the (unknown in the beginning) statistical ordering of each element 
serving as its index. Note that the game never uses the actual value of 
the card, except for comparison between two cards, and the relative 
ordering of any two array elements is known.</p>
<p>Now simulate the patience sorting game, played with the <i><a href="http://en.m.wikipedia.org/wiki/Greedy_algorithm" title="Greedy algorithm">greedy strategy</a></i>,
 i.e., placing each new card on the leftmost pile that is legally 
possible to use. At each stage of the game, under this strategy, the 
labels on the top cards of the piles are increasing from left to right. 
To recover the sorted sequence, repeatedly remove the minimum visible 
card.</p>
<h3> <span class="mw-headline" id="Complexity">Complexity</span>
</h3>
<p>If values of cards are in the range <img class="tex" alt="1, \ldots, n" src="Patience_sorting_files/5b37aa8a320773d5bef8220454c56436.png">, there is an efficient implementation with <img class="tex" alt="O(n \cdot \log \log n)" src="Patience_sorting_files/d510c9ce01f46b940fb5e574b2ef69ee.png"><a href="http://en.m.wikipedia.org/wiki/Worst-case" title="Worst-case" class="mw-redirect">worst-case</a> running time for putting the cards into piles, relying on a <a href="http://en.m.wikipedia.org/wiki/Van_Emde_Boas_tree" title="Van Emde Boas tree">van Emde Boas tree</a>. A description is given in the work by S.&nbsp;Bespamyatnikh and M.&nbsp;Segal.<sup id="cite_ref-Bespamyatnikh_1-0" class="reference"><a href="#cite_note-Bespamyatnikh-1"><span>[</span>2<span>]</span></a></sup></p>
<p>When no assumption is made about values, the greedy strategy can be implemented in <img class="tex" alt="O(n \log n)" src="Patience_sorting_files/f49341ab621f12e8cb93d0146ea51d34.png"> comparisons in worst case. In fact, one can implement it with an array of <a href="http://en.m.wikipedia.org/wiki/Stack_data_structure" title="Stack data structure" class="mw-redirect">stacks</a> ordered by values of top cards and, for inserting a new card, use a <a href="http://en.m.wikipedia.org/wiki/Binary_search_algorithm" title="Binary search algorithm">binary search</a>, which is <img class="tex" alt="O(\log p)" src="Patience_sorting_files/c2bfd79d2c8eab4bbf44b07f61414997.png"> comparisons in worst case, where <img class="tex" alt="p" src="Patience_sorting_files/83878c91171338902e0fe0fb97a8c47a.png"> is the number of piles. To complete the sorting in an efficient way (aka <img class="tex" alt="O(n \log n)" src="Patience_sorting_files/f49341ab621f12e8cb93d0146ea51d34.png">
 worst case), each step will retrieve the card with the least value from
 the top of leftmost pile, and then some work has to be done. Finding 
the next card by searching it among all tops of piles, as in the 
wikibooks implementation suggested below, gives a <img class="tex" alt="O(n \sqrt n)" src="Patience_sorting_files/51c03f338419c316b72d73e56a7767f8.png">
 worst case. However, we can use an efficient priority queue(for 
example, a binary heap) to maintain the piles so that we can extract the
 maximum data in O(log n) time.</p>
</div><a id="anchor_2" href="#section_2" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_3"><button>Show</button><span id="Algorithm_for_finding_a_longest_increasing_subsequence">Algorithm for finding a longest increasing subsequence</span></h2><div class="content_block" id="content_3">
<p>First, execute the sorting algorithm as described above. The number 
of piles is the length of a longest subsequence. Whenever a card is 
placed on top of a pile, put a back-<a href="http://en.m.wikipedia.org/wiki/Pointer_%28computer_programming%29" title="Pointer (computer programming)">pointer</a>
 to the top card in the previous pile (that, by assumption, has a lower 
value than the new card has). In the end, follow the back-pointers from 
the top card in the last pile to recover a decreasing subsequence of the
 longest length; its reverse is an answer to the longest increasing 
subsequence algorithm.</p>
<p>S.&nbsp;Bespamyatnikh and M.&nbsp;Segal<sup id="cite_ref-Bespamyatnikh_1-1" class="reference"><a href="#cite_note-Bespamyatnikh-1"><span>[</span>2<span>]</span></a></sup> give a description of an efficient implementation of the algorithm, incurring no additional <a href="http://en.m.wikipedia.org/wiki/Asymptotic" title="Asymptotic" class="mw-redirect">asymptotic</a>
 cost over the sorting one (as the back-pointers storage, creation and 
traversal require linear time and space). They further show how to 
report <i>all</i> the longest increasing subsequences from the same resulting <a href="http://en.m.wikipedia.org/wiki/Data_structure" title="Data structure">data structures</a>.</p>
</div><a id="anchor_3" href="#section_3" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_4"><button>Show</button><span id="C.2B.2B_Implementation">C++ Implementation</span></h2><div class="content_block" id="content_4">
<p>This is an implementation using Patience Sorting to sort an array, performing O(n log n) time complexity.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1"><span class="co2">#include &lt;vector&gt;</span>
<span class="co2">#include &lt;algorithm&gt;</span>
<span class="co2">#include &lt;stack&gt;</span>
<span class="co2">#include &lt;iterator&gt;</span>
 
<span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw2">typename</span> PileType<span class="sy1">&gt;</span>
<span class="kw4">bool</span> pile_less<span class="br0">(</span><span class="kw4">const</span> PileType<span class="sy3">&amp;</span> x, <span class="kw4">const</span> PileType<span class="sy3">&amp;</span> y<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw1">return</span> x.<span class="me1">top</span><span class="br0">(</span><span class="br0">)</span> <span class="sy1">&lt;</span> y.<span class="me1">top</span><span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span>
<span class="br0">}</span>
 
<span class="co1">// reverse less predicate to turn max-heap into min-heap</span>
<span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw2">typename</span> PileType<span class="sy1">&gt;</span>
<span class="kw4">bool</span> pile_more<span class="br0">(</span><span class="kw4">const</span> PileType<span class="sy3">&amp;</span> x, <span class="kw4">const</span> PileType<span class="sy3">&amp;</span> y<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw1">return</span> pile_less<span class="br0">(</span>y, x<span class="br0">)</span><span class="sy4">;</span>
<span class="br0">}</span>
 
<span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw2">typename</span> Iterator<span class="sy1">&gt;</span>
<span class="kw4">void</span> patience_sort<span class="br0">(</span>Iterator begin, Iterator end<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">typedef</span> <span class="kw2">typename</span> std<span class="sy4">::</span><span class="me2">iterator_traits</span><span class="sy1">&lt;</span>Iterator<span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">value_type</span> DataType<span class="sy4">;</span>
    <span class="kw4">typedef</span> std<span class="sy4">::</span><span class="me2">stack</span><span class="sy1">&lt;</span>DataType<span class="sy1">&gt;</span> PileType<span class="sy4">;</span>
    std<span class="sy4">::</span><span class="me2">vector</span><span class="sy1">&lt;</span>PileType<span class="sy1">&gt;</span> piles<span class="sy4">;</span>
 
    <span class="kw1">for</span> <span class="br0">(</span>Iterator it <span class="sy1">=</span> begin<span class="sy4">;</span> it <span class="sy3">!</span><span class="sy1">=</span> end<span class="sy4">;</span> it<span class="sy2">++</span><span class="br0">)</span>
    <span class="br0">{</span>
        PileType new_pile<span class="sy4">;</span>
        new_pile.<span class="me1">push</span><span class="br0">(</span><span class="sy2">*</span>it<span class="br0">)</span><span class="sy4">;</span>
        <span class="kw2">typename</span> std<span class="sy4">::</span><span class="me2">vector</span><span class="sy1">&lt;</span>PileType<span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">iterator</span> insert_it <span class="sy1">=</span>
            std<span class="sy4">::</span><span class="me2">lower_bound</span><span class="br0">(</span>piles.<span class="me1">begin</span><span class="br0">(</span><span class="br0">)</span>, piles.<span class="me1">end</span><span class="br0">(</span><span class="br0">)</span>, new_pile,
                             pile_less<span class="sy1">&lt;</span>PileType<span class="sy1">&gt;</span><span class="br0">)</span><span class="sy4">;</span>
        <span class="kw1">if</span> <span class="br0">(</span>insert_it <span class="sy1">==</span> piles.<span class="me1">end</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>
            piles.<span class="me1">push_back</span><span class="br0">(</span>new_pile<span class="br0">)</span><span class="sy4">;</span>
        <span class="kw1">else</span>
            insert_it<span class="sy2">-</span><span class="sy1">&gt;</span>push<span class="br0">(</span><span class="sy2">*</span>it<span class="br0">)</span><span class="sy4">;</span>
    <span class="br0">}</span>
    <span class="co1">// sorted array already satisfies heap property for min-heap</span>
 
    <span class="kw1">for</span> <span class="br0">(</span>Iterator it <span class="sy1">=</span> begin<span class="sy4">;</span> it <span class="sy3">!</span><span class="sy1">=</span> end<span class="sy4">;</span> it<span class="sy2">++</span><span class="br0">)</span>
    <span class="br0">{</span>
        std<span class="sy4">::</span><span class="me2">pop_heap</span><span class="br0">(</span>piles.<span class="me1">begin</span><span class="br0">(</span><span class="br0">)</span>, piles.<span class="me1">end</span><span class="br0">(</span><span class="br0">)</span>, pile_more<span class="sy1">&lt;</span>PileType<span class="sy1">&gt;</span><span class="br0">)</span><span class="sy4">;</span>
        <span class="sy2">*</span>it <span class="sy1">=</span> piles.<span class="me1">back</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">top</span><span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span>
        piles.<span class="me1">back</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">pop</span><span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span>
        <span class="kw1">if</span> <span class="br0">(</span>piles.<span class="me1">back</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">empty</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>
            piles.<span class="me1">pop_back</span><span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span>
        <span class="kw1">else</span>
            std<span class="sy4">::</span><span class="me2">push_heap</span><span class="br0">(</span>piles.<span class="me1">begin</span><span class="br0">(</span><span class="br0">)</span>, piles.<span class="me1">end</span><span class="br0">(</span><span class="br0">)</span>, pile_more<span class="sy1">&lt;</span>PileType<span class="sy1">&gt;</span><span class="br0">)</span><span class="sy4">;</span>
    <span class="br0">}</span>
<span class="br0">}</span>
</pre>
</div>
</div>
</div><a id="anchor_4" href="#section_4" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_5"><button>Show</button><span id="Java_Implementation">Java Implementation</span></h2><div class="content_block" id="content_5">
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="java source-java">
<pre class="de1"><span class="kw1">import</span> <span class="co2">java.util.*</span><span class="sy0">;</span>
<span class="kw1">public</span> <span class="kw1">class</span> PatienceSort
<span class="br0">{</span>
    <span class="kw1">public</span> <span class="kw1">static</span> <span class="sy0">&lt;</span>E <span class="kw1">extends</span> Comparable<span class="sy0">&lt;?</span> <span class="kw1">super</span> E<span class="sy0">&gt;&gt;</span> <span class="kw4">void</span> sort <span class="br0">(</span>E<span class="br0">[</span><span class="br0">]</span> n<span class="br0">)</span>
    <span class="br0">{</span>
        List<span class="sy0">&lt;</span>Pile<span class="sy0">&lt;</span>E<span class="sy0">&gt;&gt;</span> piles <span class="sy0">=</span> <span class="kw1">new</span> ArrayList<span class="sy0">&lt;</span>Pile<span class="sy0">&lt;</span>E<span class="sy0">&gt;&gt;</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
        <span class="co1">// sort into piles</span>
        <span class="kw1">for</span> <span class="br0">(</span>E x <span class="sy0">:</span> n<span class="br0">)</span>
        <span class="br0">{</span>
            Pile<span class="sy0">&lt;</span>E<span class="sy0">&gt;</span> newPile <span class="sy0">=</span> <span class="kw1">new</span> Pile<span class="sy0">&lt;</span>E<span class="sy0">&gt;</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
            newPile.<span class="me1">push</span><span class="br0">(</span>x<span class="br0">)</span><span class="sy0">;</span>
            <span class="kw4">int</span> i <span class="sy0">=</span> <span class="kw3">Collections</span>.<span class="me1">binarySearch</span><span class="br0">(</span>piles, newPile<span class="br0">)</span><span class="sy0">;</span>
            <span class="kw1">if</span> <span class="br0">(</span>i <span class="sy0">&lt;</span> <span class="nu0">0</span><span class="br0">)</span> i <span class="sy0">=</span> ~i<span class="sy0">;</span>
            <span class="kw1">if</span> <span class="br0">(</span>i <span class="sy0">!=</span> piles.<span class="me1">size</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>
                piles.<span class="me1">get</span><span class="br0">(</span>i<span class="br0">)</span>.<span class="me1">push</span><span class="br0">(</span>x<span class="br0">)</span><span class="sy0">;</span>
            <span class="kw1">else</span>
                piles.<span class="me1">add</span><span class="br0">(</span>newPile<span class="br0">)</span><span class="sy0">;</span>
        <span class="br0">}</span>
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"longest increasing subsequence has length = "</span> <span class="sy0">+</span> piles.<span class="me1">size</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
 
        <span class="co1">// priority queue allows us to retrieve least pile efficiently</span>
        PriorityQueue<span class="sy0">&lt;</span>Pile<span class="sy0">&lt;</span>E<span class="sy0">&gt;&gt;</span> heap <span class="sy0">=</span> <span class="kw1">new</span> PriorityQueue<span class="sy0">&lt;</span>Pile<span class="sy0">&lt;</span>E<span class="sy0">&gt;&gt;</span><span class="br0">(</span>piles<span class="br0">)</span><span class="sy0">;</span>
        <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> c <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> c <span class="sy0">&lt;</span> n.<span class="me1">length</span><span class="sy0">;</span> c<span class="sy0">++</span><span class="br0">)</span>
        <span class="br0">{</span>
            Pile<span class="sy0">&lt;</span>E<span class="sy0">&gt;</span> smallPile <span class="sy0">=</span> heap.<span class="me1">poll</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
            n<span class="br0">[</span>c<span class="br0">]</span> <span class="sy0">=</span> smallPile.<span class="me1">pop</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
            <span class="kw1">if</span> <span class="br0">(</span><span class="sy0">!</span>smallPile.<span class="me1">isEmpty</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>
                heap.<span class="me1">offer</span><span class="br0">(</span>smallPile<span class="br0">)</span><span class="sy0">;</span>
        <span class="br0">}</span>
        <span class="kw1">assert</span><span class="br0">(</span>heap.<span class="me1">isEmpty</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
    <span class="br0">}</span>
 
    <span class="kw1">private</span> <span class="kw1">static</span> <span class="kw1">class</span> Pile<span class="sy0">&lt;</span>E <span class="kw1">extends</span> Comparable<span class="sy0">&lt;?</span> <span class="kw1">super</span> E<span class="sy0">&gt;&gt;</span> <span class="kw1">extends</span> Stack<span class="sy0">&lt;</span>E<span class="sy0">&gt;</span> <span class="kw1">implements</span> Comparable<span class="sy0">&lt;</span>Pile<span class="sy0">&lt;</span>E<span class="sy0">&gt;&gt;</span>
    <span class="br0">{</span>
        <span class="kw1">public</span> <span class="kw4">int</span> compareTo<span class="br0">(</span>Pile<span class="sy0">&lt;</span>E<span class="sy0">&gt;</span> y<span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> peek<span class="br0">(</span><span class="br0">)</span>.<span class="me1">compareTo</span><span class="br0">(</span>y.<span class="me1">peek</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span> <span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
</pre>
</div>
</div>
</div><a id="anchor_5" href="#section_5" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_6"><button>Show</button><span id="History">History</span></h2><div class="content_block" id="content_6">
<p>According to D.&nbsp;Aldous and P.&nbsp;Diaconis,<sup id="cite_ref-Aldous_0-1" class="reference"><a href="#cite_note-Aldous-0"><span>[</span>1<span>]</span></a></sup> patience sorting was first recognized as an algorithm to compute the longest increasing subsequence length by Hammersley,<sup id="cite_ref-2" class="reference"><a href="#cite_note-2"><span>[</span>3<span>]</span></a></sup> and by A.S.C.&nbsp;Ross and independently <a href="http://en.m.wikipedia.org/wiki/Robert_W._Floyd" title="Robert W. Floyd">Robert W. Floyd</a> as a sorting algorithm. Initial analysis was done by Mallows.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3"><span>[</span>4<span>]</span></a></sup></p>
</div><a id="anchor_6" href="#section_6" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_7"><button>Show</button><span id="Use">Use</span></h2><div class="content_block" id="content_7">
<p>The <a href="http://en.m.wikipedia.org/wiki/Bazaar_%28software%29" title="Bazaar (software)">Bazaar</a> version control system uses the patience sorting algorithm for merge resolution.<sup id="cite_ref-4" class="reference"><a href="#cite_note-4"><span>[</span>5<span>]</span></a></sup></p>
</div><a id="anchor_7" href="#section_7" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_8"><button>Show</button><span id="References">References</span></h2><div class="content_block" id="content_8">
<div class="reflist" style="list-style-type: decimal;">
<ol class="references">
<li id="cite_note-Aldous-0">
<span class="mw-cite-backlink">^ <a href="#cite_ref-Aldous_0-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Aldous_0-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><a href="http://en.m.wikipedia.org/wiki/David_Aldous" title="David Aldous">David Aldous</a> and <a href="http://en.m.wikipedia.org/wiki/Persi_Diaconis" title="Persi Diaconis">Persi Diaconis</a>. <a rel="nofollow" class="external text" href="http://www-stat.stanford.edu/%7Ecgates/PERSI/year.html#99">Longest increasing subsequences: from patience sorting to the Baik-Deift-Johansson theorem.</a> <i>Bull.&nbsp;(new series) of the Amer.&nbsp;Math.&nbsp;Society, Volume&nbsp;36</i>, number&nbsp;4, pages&nbsp;413–432, p.414</span>
</li>
<li id="cite_note-Bespamyatnikh-1">
<span class="mw-cite-backlink">^ <a href="#cite_ref-Bespamyatnikh_1-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Bespamyatnikh_1-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text">Sergei Bespamyatnikh and Michael Segal. <a rel="nofollow" class="external text" href="http://www.pims.math.ca/publications/preprints/bespamyatnikh-segal_6-12-99.ps.gz">Enumerating Longest Increasing Subsequences and Patience Sorting.</a> <i>Pacific Inst.&nbsp;for the Math.&nbsp;Sci.&nbsp;Preprints</i>, PIMS-99-3., pp.7–8</span>
</li>
<li id="cite_note-2">
<span class="mw-cite-backlink"><b><a href="#cite_ref-2">^</a></b></span> <span class="reference-text"><a href="http://en.m.wikipedia.org/wiki/John_Hammersley" title="John Hammersley">J.M.&nbsp;Hammersley</a>. A few seedlings of research. In <i>Proc.&nbsp;Sixth Berkeley Symp.&nbsp;Math.&nbsp;Statist.&nbsp;and Probability, Volume&nbsp;1</i>, pages 345–394. University of California Press,&nbsp;1972. MR <b>53</b>:9457, p.362</span>
</li>
<li id="cite_note-3">
<span class="mw-cite-backlink"><b><a href="#cite_ref-3">^</a></b></span> <span class="reference-text">C.L.&nbsp;Mallows. Patience sorting. <i>Bull.&nbsp;Inst.&nbsp;Math.&nbsp;Appl.</i>, 9:216–224,&nbsp;1973.</span>
</li>
<li id="cite_note-4">
<span class="mw-cite-backlink"><b><a href="#cite_ref-4">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://revctrl.org/PreciseCodevilleMerge">http://revctrl.org/PreciseCodevilleMerge</a></span>
</li>
</ol>
</div>
<table class="metadata mbox-small plainlinks" style="border: 1px solid rgb(170, 170, 170); background-color: rgb(249, 249, 249);"><tbody><tr>
<td class="mbox-image"><img alt="" src="Patience_sorting_files/40px-Wikibooks-logo-en-noslogan.png" width="40" height="40"></td>
<td class="mbox-text" style="">The Wikibook <i><a class="external text" href="http://en.wikibooks.org/wiki/Algorithm_implementation">Algorithm implementation</a></i> has a page on the topic of
<div style="margin-left:10px;"><i><b><a class="external text" href="http://en.wikibooks.org/wiki/Algorithm_implementation/Sorting/Patience_sort">Patience sorting</a></b></i></div>
</td>
</tr></tbody></table>
<table class="navbox" style="border-spacing: 0pt;" cellspacing="0"><tbody><tr>
<td style="padding: 2px;">
<table class="nowraplinks collapsible autocollapse navbox-inner" style="border-spacing: 0pt; background: none repeat scroll 0% 0% transparent; color: inherit;" cellspacing="0">
<tbody><tr>
<th scope="col" style="" class="navbox-title" colspan="2">
<div class="noprint plainlinks hlist navbar mini" style="">
<ul>
<li class="nv-view"><a href="http://en.m.wikipedia.org/wiki/Template:Sorting" title="Template:Sorting"><span title="View this template" style=";;background:none transparent;border:none;">v</span></a></li>
<li class="nv-talk"><a href="http://en.m.wikipedia.org/wiki/Template_talk:Sorting" title="Template talk:Sorting"><span title="Discuss this template" style=";;background:none transparent;border:none;">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Sorting&amp;action=edit"><span title="Edit this template" style=";;background:none transparent;border:none;">e</span></a></li>
</ul>
</div>
<div class="" style="font-size:110%;"><a href="http://en.m.wikipedia.org/wiki/Sorting_algorithm" title="Sorting algorithm">Sorting algorithms</a></div>
</th>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Theory</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-odd hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Computational_complexity_theory" title="Computational complexity theory">Computational complexity theory</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Big_O_notation" title="Big O notation">Big O notation</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Total_order" title="Total order">Total order</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/List_%28computing%29" title="List (computing)" class="mw-redirect">Lists</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Sorting_algorithm#Stability" title="Sorting algorithm">Stability</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Comparison_sort" title="Comparison sort">Comparison sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Adaptive_sort" title="Adaptive sort">Adaptive sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Sorting_network" title="Sorting network">Sorting network</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Integer_sorting" title="Integer sorting">Integer sorting</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Exchange sorts</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-even hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Bubble_sort" title="Bubble sort">Bubble sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Cocktail_sort" title="Cocktail sort">Cocktail sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Odd%E2%80%93even_sort" title="Odd–even sort">Odd–even sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Comb_sort" title="Comb sort">Comb sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Gnome_sort" title="Gnome sort">Gnome sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Quicksort" title="Quicksort">Quicksort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Stooge_sort" title="Stooge sort">Stooge sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Bogosort" title="Bogosort">Bogosort</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Selection sorts</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-odd hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Selection_sort" title="Selection sort">Selection sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Heapsort" title="Heapsort">Heapsort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Smoothsort" title="Smoothsort">Smoothsort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Cartesian_tree#Application_in_sorting" title="Cartesian tree">Cartesian tree sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Tournament_sort" title="Tournament sort">Tournament sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Cycle_sort" title="Cycle sort">Cycle sort</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Insertion sorts</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-even hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Insertion_sort" title="Insertion sort">Insertion sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Shellsort" title="Shellsort">Shellsort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Tree_sort" title="Tree sort">Tree sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Library_sort" title="Library sort">Library sort</a></li>
<li><strong class="selflink">Patience sorting</strong></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Merge sorts</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-odd hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Merge_sort" title="Merge sort">Merge sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Polyphase_merge_sort" title="Polyphase merge sort">Polyphase merge sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Strand_sort" title="Strand sort">Strand sort</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Distribution sorts</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-even hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/American_flag_sort" title="American flag sort">American flag sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Bead_sort" title="Bead sort">Bead sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Bucket_sort" title="Bucket sort">Bucket sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Burstsort" title="Burstsort">Burstsort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Counting_sort" title="Counting sort">Counting sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Pigeonhole_sort" title="Pigeonhole sort">Pigeonhole sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Proxmap_sort" title="Proxmap sort">Proxmap sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Radix_sort" title="Radix sort">Radix sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Flashsort" title="Flashsort">Flashsort</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Concurrent sorts</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-odd hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Bitonic_sorter" title="Bitonic sorter">Bitonic sorter</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Batcher_odd%E2%80%93even_mergesort" title="Batcher odd–even mergesort">Batcher odd–even mergesort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Pairwise_sorting_network" title="Pairwise sorting network">Pairwise sorting network</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Hybrid sorts</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-even hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Timsort" title="Timsort">Timsort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Introsort" title="Introsort">Introsort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Spreadsort" title="Spreadsort">Spreadsort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/UnShuffle_sort" title="UnShuffle sort">UnShuffle sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/JSort" title="JSort">JSort</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Other</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-odd hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Topological_sorting" title="Topological sorting">Topological sorting</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Pancake_sorting" title="Pancake sorting">Pancake sorting</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Spaghetti_sort" title="Spaghetti sort">Spaghetti sort</a></li>
</ul>
</div>
</td>
</tr>
</tbody></table>
</td>
</tr></tbody></table>

</div>
</div>		</div>
	</div>
			<div id="footer">
			<h2 class="section_heading" id="section_footer"><button>Show</button>
		<div class="license">Wikipedia ™</div>		<span class="toggleCopyright">
			<span class="more">more</span><span class="less">less</span>
		</span>
	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Patience_sorting&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li>
				<span class="left"><a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span><span class="right">Images ON / <a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions/DisableImages&amp;returnto=Patience+sorting&amp;mobiletoken=5c89e355d2af09275b3b2ed3653e1683" title="Special:MobileOptions/DisableImages" id="imagetoggle">OFF</a></span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Patience_sorting&amp;action=history">contributors</a> like you<br>
				Content available under <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>			</li>
		</ul>
		<ul class="links">
			<li>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Patience+sorting&amp;feedbacksource=MobileFrontend">Contact</a>
			</li><li>
			<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div>
	</div>
				<!--[if gt IE 7]><!-->
		<script type="text/javascript">mw={loader:{state:function(){}}};</script>		<script src="Patience_sorting_files/load_002.php" type="text/javascript"></script>
<script src="Patience_sorting_files/load.php" type="text/javascript"></script>	<script type="text/javascript">
	window.onload = function() {
		mw.mobileFrontend.init();
	};
	</script>
	<!----><!--[endif]---->
	
	<div style="display: none;" id="mf-references"><div></div><button>close</button></div></body></html>