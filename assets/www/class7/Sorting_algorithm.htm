<!DOCTYPE html>
<html class="jsEnabled togglingEnabled" dir="ltr" lang="en"><head>
		<title>Sorting algorithm - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<meta name="robots" content="noindex,nofollow">		<link rel="stylesheet" href="Sorting_algorithm_files/load.css" type="text/css" media="all">		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png">		<script type="text/javascript">
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-header":"This article is available in 40 languages","mobile-frontend-language-footer":"<a href=\"\/wiki\/Special:Special:MobileOptions\/Language\">Wikipedia is available in other languages.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"scriptPath":"\/w","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			document.documentElement.className = 'jsEnabled page-loading';		</script>
		<link rel="canonical" href="http://en.wikipedia.org/wiki/Sorting_algorithm">
	</head>
	<body class="mobile mw-mf-checkboxes">
							<div id="mw-mf-header">
					<form id="mw-mf-searchForm" action="/w/index.php" class="search_bar" method="get">
							<img alt="Logo" id="mw-mf-logo" src="Sorting_algorithm_files/W_logo_for_Mobile_Frontend.gif" width="35" height="22">
						<input value="Special:Search" name="title" type="hidden">
			<div id="mw-mf-sq" class="divclearable">
				<input name="search" id="mw-mf-search" size="22" autocomplete="off" maxlength="1024" class="search" placeholder="Type your search here..." type="search">
				<img src="Sorting_algorithm_files/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear">
			</div>
						<button id="goButton" class="goButton" type="submit">
				<img src="Sorting_algorithm_files/blank.gif" alt="Go" title="Go">
			</button>
					</form>
									<div class="nav" id="nav">
				<div id="mw-mf-language-selection">
		Language:<br>
		<select id="languageselection"><option value="http://en.wikipedia.org/wiki/Sorting_algorithm" selected="selected">English</option><option value="//ar.m.wikipedia.org/wiki/%D8%AE%D9%88%D8%A7%D8%B1%D8%B2%D9%85%D9%8A%D8%A9_%D8%AA%D8%B1%D8%AA%D9%8A%D8%A8">العربية</option><option value="//bg.m.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D1%8A%D0%BC_%D0%B7%D0%B0_%D1%81%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%B0%D0%BD%D0%B5">български</option><option value="//ca.m.wikipedia.org/wiki/Algorisme_d%27ordenaci%C3%B3">català</option><option value="//cs.m.wikipedia.org/wiki/%C5%98adic%C3%AD_algoritmus">česky</option><option value="//da.m.wikipedia.org/wiki/Sorteringsalgoritme">dansk</option><option value="//de.m.wikipedia.org/wiki/Sortierverfahren">Deutsch</option><option value="//et.m.wikipedia.org/wiki/Sortimisalgoritm">eesti</option><option value="//es.m.wikipedia.org/wiki/Algoritmo_de_ordenamiento">español</option><option value="//fa.m.wikipedia.org/wiki/%D8%A7%D9%84%DA%AF%D9%88%D8%B1%DB%8C%D8%AA%D9%85_%D9%85%D8%B1%D8%AA%D8%A8%E2%80%8C%D8%B3%D8%A7%D8%B2%DB%8C">فارسی</option><option value="//fr.m.wikipedia.org/wiki/Algorithme_de_tri">français</option><option value="//ko.m.wikipedia.org/wiki/%EC%A0%95%EB%A0%AC_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98">한국어</option><option value="//hy.m.wikipedia.org/wiki/%D5%8F%D5%A5%D5%BD%D5%A1%D5%AF%D5%A1%D5%BE%D5%B8%D6%80%D5%B4%D5%A1%D5%B6_%D5%A1%D5%AC%D5%A3%D5%B8%D6%80%D5%AB%D5%A9%D5%B4">Հայերեն</option><option value="//is.m.wikipedia.org/wiki/R%C3%B6%C3%B0unarreiknirit">íslenska</option><option value="//it.m.wikipedia.org/wiki/Algoritmo_di_ordinamento">italiano</option><option value="//he.m.wikipedia.org/wiki/%D7%9E%D7%99%D7%95%D7%9F_(%D7%9E%D7%93%D7%A2%D7%99_%D7%94%D7%9E%D7%97%D7%A9%D7%91)">עברית</option><option value="//kk.m.wikipedia.org/wiki/%D0%9C%D3%99%D0%BB%D1%96%D0%BC%D0%B5%D1%82%D1%82%D0%B5%D1%80%D0%B4%D1%96_%D1%81%D2%B1%D1%80%D1%8B%D0%BF%D1%82%D0%B0%D1%83">Қазақша</option><option value="//ku.m.wikipedia.org/wiki/Algor%C3%AEtmay%C3%AA_r%C3%AAzkerdi%C5%9F%C3%AE">Kurdî</option><option value="//lv.m.wikipedia.org/wiki/Datu_%C5%A1%C4%B7iro%C5%A1anas_algoritmi">latviešu</option><option value="//lb.m.wikipedia.org/wiki/Zort%C3%A9ieralgorithmus">Lëtzebuergesch</option><option value="//lt.m.wikipedia.org/wiki/Rikiavimo_algoritmas">lietuvių</option><option value="//hu.m.wikipedia.org/wiki/Rendez%C3%A9s_(programoz%C3%A1s)">magyar</option><option value="//nl.m.wikipedia.org/wiki/Sorteeralgoritme">Nederlands</option><option value="//ja.m.wikipedia.org/wiki/%E3%82%BD%E3%83%BC%E3%83%88">日本語</option><option value="//no.m.wikipedia.org/wiki/Sorteringsalgoritme">‪norsk (bokmål)‬</option><option value="//mhr.m.wikipedia.org/wiki/%D0%9E%D0%B9%D1%8B%D1%80%D0%BA%D0%B0%D0%BB%D1%8B%D0%BC%D0%B0%D1%88">Олык Марий</option><option value="//pl.m.wikipedia.org/wiki/Sortowanie">polski</option><option value="//pt.m.wikipedia.org/wiki/Algoritmo_de_ordena%C3%A7%C3%A3o">português</option><option value="//ru.m.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D1%81%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B8">русский</option><option value="//sk.m.wikipedia.org/wiki/Triediaci_algoritmus">slovenčina</option><option value="//sl.m.wikipedia.org/wiki/Algoritmi_za_urejanje_podatkov">slovenščina</option><option value="//sr.m.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC%D0%B8_%D1%81%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%B0%D1%9A%D0%B0">српски / srpski</option><option value="//fi.m.wikipedia.org/wiki/Lajittelualgoritmi">suomi</option><option value="//sv.m.wikipedia.org/wiki/Sorteringsalgoritm">svenska</option><option value="//ta.m.wikipedia.org/wiki/%E0%AE%B5%E0%AE%B0%E0%AE%BF%E0%AE%9A%E0%AF%88%E0%AE%AF%E0%AE%BE%E0%AE%95%E0%AF%8D%E0%AE%95%E0%AE%AA%E0%AF%8D_%E0%AE%AA%E0%AE%9F%E0%AE%BF%E0%AE%AE%E0%AF%81%E0%AE%B1%E0%AF%88">தமிழ்</option><option value="//th.m.wikipedia.org/wiki/%E0%B8%82%E0%B8%B1%E0%B9%89%E0%B8%99%E0%B8%95%E0%B8%AD%E0%B8%99%E0%B8%A7%E0%B8%B4%E0%B8%98%E0%B8%B5%E0%B8%81%E0%B8%B2%E0%B8%A3%E0%B9%80%E0%B8%A3%E0%B8%B5%E0%B8%A2%E0%B8%87%E0%B8%A5%E0%B8%B3%E0%B8%94%E0%B8%B1%E0%B8%9A">ไทย</option><option value="//tr.m.wikipedia.org/wiki/S%C4%B1ralama_algoritmas%C4%B1">Türkçe</option><option value="//uk.m.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D1%81%D0%BE%D1%80%D1%82%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F">українська</option><option value="//vi.m.wikipedia.org/wiki/Thu%E1%BA%ADt_to%C3%A1n_s%E1%BA%AFp_x%E1%BA%BFp">Tiếng Việt</option><option value="//zh.m.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">中文</option></select>
	</div><br>
			<a href="http://en.m.wikipedia.org/wiki/Main_Page" id="homeButton" class="button">Home</a>
			<a href="http://en.m.wikipedia.org/wiki/Special:Random" id="randomButton" class="button">Random</a>
			</div>
		</div>
				<div id="results"><ul class="suggestions-results" title="No Results"><li class="suggestions-result">Type search term above and matching article titles will appear here.</li></ul></div>
		<div class="show" id="content_wrapper">
				<div id="content">
			<h1 id="firstHeading">Sorting algorithm</h1>			
<p>In <a href="http://en.m.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a>, a <b>sorting algorithm</b> is an <a href="http://en.m.wikipedia.org/wiki/Algorithm" title="Algorithm">algorithm</a> that puts elements of a <a href="http://en.m.wikipedia.org/wiki/List_%28computing%29" title="List (computing)" class="mw-redirect">list</a> in a certain <a href="http://en.m.wikipedia.org/wiki/Total_order" title="Total order">order</a>. The most-used orders are numerical order and <a href="http://en.m.wikipedia.org/wiki/Lexicographical_order" title="Lexicographical order">lexicographical order</a>. Efficient <a href="http://en.m.wikipedia.org/wiki/Sorting" title="Sorting">sorting</a> is important for optimizing the use of other algorithms (such as <a href="http://en.m.wikipedia.org/wiki/Search_algorithm" title="Search algorithm">search</a> and <a href="http://en.m.wikipedia.org/wiki/Merge_algorithm" title="Merge algorithm">merge</a> algorithms) that require sorted lists to work correctly; it is also often useful for <a href="http://en.m.wikipedia.org/wiki/Canonicalization" title="Canonicalization">canonicalizing</a> data and for producing human-readable output. More formally, the output must satisfy two conditions:</p>
<ol>
<li>The output is in nondecreasing order (each element is no smaller than the previous element according to the desired <a href="http://en.m.wikipedia.org/wiki/Total_order" title="Total order">total order</a>);</li>
<li>The output is a <a href="http://en.m.wikipedia.org/wiki/Permutation" title="Permutation">permutation</a> (reordering) of the input.</li>
</ol>
<p>Since the dawn of computing, the sorting problem has attracted a 
great deal of research, perhaps due to the complexity of solving it 
efficiently despite its simple, familiar statement. For example, <a href="http://en.m.wikipedia.org/wiki/Bubble_sort" title="Bubble sort">bubble sort</a> was analyzed as early as 1956.<sup id="cite_ref-0" class="reference"><a href="#cite_note-0"><span>[</span>1<span>]</span></a></sup> Although many consider it a solved problem, useful new sorting algorithms are still being invented (for example, <a href="http://en.m.wikipedia.org/wiki/Library_sort" title="Library sort">library sort</a>
 was first published in 2006). Sorting algorithms are prevalent in 
introductory computer science classes, where the abundance of algorithms
 for the problem provides a gentle introduction to a variety of core 
algorithm concepts, such as <a href="http://en.m.wikipedia.org/wiki/Big_O_notation" title="Big O notation">big O notation</a>, <a href="http://en.m.wikipedia.org/wiki/Divide_and_conquer_algorithm" title="Divide and conquer algorithm">divide and conquer algorithms</a>, <a href="http://en.m.wikipedia.org/wiki/Data_structure" title="Data structure">data structures</a>, <a href="http://en.m.wikipedia.org/wiki/Randomized_algorithm" title="Randomized algorithm">randomized algorithms</a>, <a href="http://en.m.wikipedia.org/wiki/Best,_worst_and_average_case" title="Best, worst and average case">best, worst and average case</a> analysis, <a href="http://en.m.wikipedia.org/wiki/Time-space_tradeoff" title="Time-space tradeoff" class="mw-redirect">time-space tradeoffs</a>, and <a href="http://en.m.wikipedia.org/wiki/Upper_and_lower_bounds" title="Upper and lower bounds">upper and lower bounds</a>.</p>
<div class="section"><h2 class="section_heading" id="section_1"><button>Show</button><span id="Classification">Classification</span></h2><div class="content_block" id="content_1">
<p>Sorting algorithms used in <a href="http://en.m.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a> are often classified by:</p>
<ul>
<li>
<a href="http://en.m.wikipedia.org/wiki/Computational_complexity_theory" title="Computational complexity theory">Computational complexity</a> (<a href="http://en.m.wikipedia.org/wiki/Worst-case_performance" title="Worst-case performance" class="mw-redirect">worst</a>, <a href="http://en.m.wikipedia.org/wiki/Average_performance" title="Average performance" class="mw-redirect">average</a> and <a href="http://en.m.wikipedia.org/wiki/Best-case_performance" title="Best-case performance" class="mw-redirect">best</a> behavior) of element comparisons in terms of the size of the list (<i>n</i>). For typical sorting algorithms good behavior is O(<i>n</i>&nbsp;log&nbsp;<i>n</i>) and bad behavior is O(<i>n</i><sup>2</sup>). (See <a href="http://en.m.wikipedia.org/wiki/Big_O_notation" title="Big O notation">Big O notation</a>.) Ideal behavior for a sort is O(<i>n</i>), but this is not possible in the average case. <a href="http://en.m.wikipedia.org/wiki/Comparison_sort" title="Comparison sort">Comparison-based sorting algorithms</a>, which evaluate the elements of the list via an abstract key comparison operation, need at least O(<i>n</i>&nbsp;log&nbsp;<i>n</i>) comparisons for most inputs.</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Computational_complexity_theory" title="Computational complexity theory">Computational complexity</a> of swaps (for "in place" algorithms).</li>
<li>Memory usage (and use of other computer resources). In particular, some sorting algorithms are "<a href="http://en.m.wikipedia.org/wiki/In-place_algorithm" title="In-place algorithm">in place</a>". Strictly, an in place sort needs only O(1) memory beyond the items being sorted; sometimes O(log(<i>n</i>)) additional memory is considered "in place".</li>
<li>Recursion. Some algorithms are either recursive or non-recursive, while others may be both (e.g., merge sort).</li>
<li>Stability: <a href="#Stability">stable sorting algorithms</a> maintain the relative order of records with equal keys (i.e., values).</li>
<li>Whether or not they are a <a href="http://en.m.wikipedia.org/wiki/Comparison_sort" title="Comparison sort">comparison sort</a>. A comparison sort examines the data only by comparing two elements with a comparison operator.</li>
<li>General method: insertion, exchange, selection, merging, <i>etc.</i>. Exchange sorts include bubble sort and quicksort. Selection sorts include shaker sort and heapsort.</li>
<li>Adaptability: Whether or not the presortedness of the input affects 
the running time. Algorithms that take this into account are known to be
 <a href="http://en.m.wikipedia.org/wiki/Adaptive_sort" title="Adaptive sort">adaptive</a>.</li>
</ul>
<h3> <span class="mw-headline" id="Stability">Stability</span>
</h3>
<p>Stable sorting algorithms maintain the relative order of records with
 equal keys. If all keys are different then this distinction is not 
necessary. But if there are equal keys, then a sorting algorithm is 
stable if whenever there are two records (let's say R and S) with the 
same key, and R appears before S in the original list, then R will 
always appear before S in the sorted list. When equal elements are 
indistinguishable, such as with integers, or more generally, any data 
where the entire element is the key, stability is not an issue. However,
 assume that the following pairs of numbers are to be sorted by their 
first component:</p>
<pre>(4, 2)  (3, 7)  (3, 1)  (5, 6)
</pre>
<p>In this case, two different results are possible, one which maintains
 the relative order of records with equal keys, and one which does not:</p>
<pre>(3, 7)  (3, 1)  (4, 2)  (5, 6)   (order maintained)
(3, 1)  (3, 7)  (4, 2)  (5, 6)   (order changed)
</pre>
<p>Unstable sorting algorithms may change the relative order of records 
with equal keys, but stable sorting algorithms never do so. Unstable 
sorting algorithms can be specially implemented to be stable. One way of
 doing this is to artificially extend the key comparison, so that 
comparisons between two objects with otherwise equal keys are decided 
using the order of the entries in the original data order as a 
tie-breaker. Remembering this order, however, often involves an 
additional <a href="http://en.m.wikipedia.org/wiki/Computational_complexity_theory" title="Computational complexity theory">computational cost</a>.</p>
<p>Sorting based on a primary, secondary, tertiary, etc. sort key can be
 done by any sorting method, taking all sort keys into account in 
comparisons (in other words, using a single composite sort key). If a 
sorting method is stable, it is also possible to sort multiple times, 
each time with one sort key. In that case the keys need to be applied in
 order of increasing priority.</p>
<p>Example: sorting pairs of numbers as above by second, then first component:</p>
<pre>(4, 2)  (3, 7)  (3, 1)  (5, 6) (original)
</pre>
<pre>(3, 1)  (4, 2)  (5, 6)  (3, 7) (after sorting by second component)
(3, 1)  (3, 7)  (4, 2)  (5, 6) (after sorting by first component)
</pre>
<p>On the other hand:</p>
<pre>(3, 7)  (3, 1)  (4, 2)  (5, 6) (after sorting by first component)
(3, 1)  (4, 2)  (5, 6)  (3, 7) (after sorting by second component, 
                                order by first component is disrupted).
</pre>
</div><a id="anchor_1" href="#section_1" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_2"><button>Show</button><span id="Comparison_of_algorithms">Comparison of algorithms</span></h2><div class="content_block" id="content_2">
<p>In this table, <i>n</i> is the number of records to be sorted. The 
columns "Average" and "Worst" give the time complexity in each case, 
under the assumption that the length of each key is constant, and that 
therefore all comparisons, swaps, and other needed operations can 
proceed in constant time. "Memory" denotes the amount of auxiliary 
storage needed beyond that used by the list itself, under the same 
assumption. These are all <a href="http://en.m.wikipedia.org/wiki/Comparison_sort" title="Comparison sort">comparison sorts</a>.
 The run time and the memory of algorithms could be measured using 
various notations like theta, omega, Big-O, small-o, etc. The memory and
 the run times below are applicable for all the 5 notations.</p>
<table class="wikitable sortable">
<caption><a href="http://en.m.wikipedia.org/wiki/Comparison_sort" title="Comparison sort">Comparison sorts</a></caption>
<tbody><tr>
<th>Name</th>
<th>Best</th>
<th>Average</th>
<th>Worst<br>
</th>
<th>Memory</th>
<th>Stable</th>
<th>Method<br>
</th>
<th width="350">Other notes</th>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Quicksort" title="Quicksort">Quicksort</a></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n \log n" src="Sorting_algorithm_files/f39d56274a6581e102d27a7ceb5cb2c2.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n \log n" src="Sorting_algorithm_files/f39d56274a6581e102d27a7ceb5cb2c2.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">25 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n^2" src="Sorting_algorithm_files/a2562874a32bab685e29f1889353691a.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 255, 221);">
<span style="display:none" class="sortkey">05 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} \log n" src="Sorting_algorithm_files/4470e9287bc53f83b4c85a97e297fc4f.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 255, 221);">Depends</td>
<td>Partitioning</td>
<td align="left">Quicksort is usually done in place with O(log(<i>n</i>)) stack space.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from December 2010">citation needed</span></a></i>]</sup> Most implementations are unstable, as stable in-place partitioning is more complex. <a href="http://en.m.wikipedia.org/wiki/Na%C3%AFve_algorithm" title="Naïve algorithm" class="mw-redirect">Naïve</a> variants use an O(<i>n</i>) space array to store the partition.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from December 2010">citation needed</span></a></i>]</sup>
</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Merge_sort" title="Merge sort">Merge sort</a></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} {n \log n} " src="Sorting_algorithm_files/26887d99dbc1e32bbfa34256341735d9.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} {n \log n} " src="Sorting_algorithm_files/26887d99dbc1e32bbfa34256341735d9.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} {n \log n} " src="Sorting_algorithm_files/26887d99dbc1e32bbfa34256341735d9.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext">Depends; worst case is <img class="tex" alt=" \mathcal{} n " src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">Yes</td>
<td>Merging</td>
<td align="left">Used to sort this table in Firefox.<sup id="cite_ref-1" class="reference"><a href="#cite_note-1"><span>[</span>2<span>]</span></a></sup>
</td>
</tr>
<tr align="center">
<td nowrap="nowrap">
<a href="http://en.m.wikipedia.org/wiki/In-place" title="In-place" class="mw-redirect">In-place</a> <a href="http://en.m.wikipedia.org/wiki/Merge_sort" title="Merge sort">Merge sort</a>
</td>
<td>
<span style="display:none" class="sortkey">50 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} - " src="Sorting_algorithm_files/26563ee183e4115c5034751a91201707.png"></span>
</td>
<td>
<span style="display:none" class="sortkey">50 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} - " src="Sorting_algorithm_files/26563ee183e4115c5034751a91201707.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 255, 221);">
<span style="display:none" class="sortkey">23 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} {n \left( \log n \right)^2} " src="Sorting_algorithm_files/eb9a7c65d0a023cc8c86466b2332a19b.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">00 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} {1} " src="Sorting_algorithm_files/a6c6e1e26fbd8692aa1bfd1a40d90479.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">Yes</td>
<td>Merging</td>
<td align="left">Implemented in Standard Template Library (STL);<sup id="cite_ref-2" class="reference"><a href="#cite_note-2"><span>[</span>3<span>]</span></a></sup> can be implemented as a stable sort based on stable in-place merging.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3"><span>[</span>4<span>]</span></a></sup>
</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Heapsort" title="Heapsort">Heapsort</a></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} {n \log n} " src="Sorting_algorithm_files/26887d99dbc1e32bbfa34256341735d9.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} {n \log n} " src="Sorting_algorithm_files/26887d99dbc1e32bbfa34256341735d9.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} {n \log n} " src="Sorting_algorithm_files/26887d99dbc1e32bbfa34256341735d9.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">00 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} {1} " src="Sorting_algorithm_files/a6c6e1e26fbd8692aa1bfd1a40d90479.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">No</td>
<td>Selection</td>
<td align="left"></td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Insertion_sort" title="Insertion sort">Insertion sort</a></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} n " src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">25 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} n^2 " src="Sorting_algorithm_files/a2562874a32bab685e29f1889353691a.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">25 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} n^2 " src="Sorting_algorithm_files/a2562874a32bab685e29f1889353691a.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">00 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} {1} " src="Sorting_algorithm_files/a6c6e1e26fbd8692aa1bfd1a40d90479.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">Yes</td>
<td>Insertion</td>
<td align="left">O(<i>n</i> + <i>d</i>), where <i>d</i> is the number of <a href="http://en.m.wikipedia.org/wiki/Permutation_groups#Transpositions.2C_simple_transpositions.2C_inversions_and_sorting" title="Permutation groups" class="mw-redirect">inversions</a>
</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Introsort" title="Introsort">Introsort</a></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n \log n" src="Sorting_algorithm_files/f39d56274a6581e102d27a7ceb5cb2c2.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n \log n" src="Sorting_algorithm_files/f39d56274a6581e102d27a7ceb5cb2c2.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n \log n" src="Sorting_algorithm_files/f39d56274a6581e102d27a7ceb5cb2c2.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 255, 221);">
<span style="display:none" class="sortkey">05 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} \log n" src="Sorting_algorithm_files/4470e9287bc53f83b4c85a97e297fc4f.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">No</td>
<td>Partitioning &amp; Selection</td>
<td align="left">Used in <a href="http://en.m.wikipedia.org/wiki/Silicon_Graphics" title="Silicon Graphics">SGI</a> <a href="http://en.m.wikipedia.org/wiki/Standard_Template_Library" title="Standard Template Library">STL</a> implementations</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Selection_sort" title="Selection sort">Selection sort</a></td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">25 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} n^2 " src="Sorting_algorithm_files/a2562874a32bab685e29f1889353691a.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">25 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} n^2 " src="Sorting_algorithm_files/a2562874a32bab685e29f1889353691a.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">25 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} n^2 " src="Sorting_algorithm_files/a2562874a32bab685e29f1889353691a.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">00 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} {1} " src="Sorting_algorithm_files/a6c6e1e26fbd8692aa1bfd1a40d90479.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 255, 221);">No</td>
<td>Selection</td>
<td align="left">Stable with O(n) extra space, for example using lists.<sup id="cite_ref-4" class="reference"><a href="#cite_note-4"><span>[</span>5<span>]</span></a></sup> Used to sort this table in Safari or other Webkit web browser.<sup id="cite_ref-5" class="reference"><a href="#cite_note-5"><span>[</span>6<span>]</span></a></sup>
</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Timsort" title="Timsort">Timsort</a></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} {n} " src="Sorting_algorithm_files/6f4a6def0e0a5f696a61993faab0e730.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} {n \log n} " src="Sorting_algorithm_files/26887d99dbc1e32bbfa34256341735d9.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} {n \log n} " src="Sorting_algorithm_files/26887d99dbc1e32bbfa34256341735d9.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} n " src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">Yes</td>
<td>Insertion &amp; Merging</td>
<td align="left">
<img class="tex" alt="\mathcal{} {n} " src="Sorting_algorithm_files/b4ae34143baae3db34104a6ce68392b9.png"> comparisons when the data is already sorted or reverse sorted.</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Shell_sort" title="Shell sort" class="mw-redirect">Shell sort</a></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n" src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 255, 221);">
<span style="display:none" class="sortkey">23 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n (\log n)^2" src="Sorting_algorithm_files/80018a566b1eefe255df71e36dff4404.png"><br><br>
or<br><br><img class="tex" alt="\mathcal{} n^{3/2}" src="Sorting_algorithm_files/b09c95869f560c4da4006ec3242d58a6.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 255, 221);">
<span style="display:none" class="sortkey">23 !</span><span class="sorttext">Depends on gap sequence; best known is <img class="tex" alt="\mathcal{} n (\log n)^2" src="Sorting_algorithm_files/80018a566b1eefe255df71e36dff4404.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">00 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} 1" src="Sorting_algorithm_files/076b4b72cf4d85f2be324ef6a7648191.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">No</td>
<td>Insertion</td>
<td align="left"></td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Bubble_sort" title="Bubble sort">Bubble sort</a></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n" src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">25 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n^2" src="Sorting_algorithm_files/a2562874a32bab685e29f1889353691a.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">25 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n^2" src="Sorting_algorithm_files/a2562874a32bab685e29f1889353691a.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">00 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} {1}" src="Sorting_algorithm_files/a6c6e1e26fbd8692aa1bfd1a40d90479.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">Yes</td>
<td>Exchanging</td>
<td align="left">Tiny code size</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Binary_tree_sort" title="Binary tree sort" class="mw-redirect">Binary tree sort</a></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n" src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} {n \log n} " src="Sorting_algorithm_files/26887d99dbc1e32bbfa34256341735d9.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} {n \log n} " src="Sorting_algorithm_files/26887d99dbc1e32bbfa34256341735d9.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n " src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">Yes</td>
<td>Insertion</td>
<td align="left">When using a <a href="http://en.m.wikipedia.org/wiki/Self-balancing_binary_search_tree" title="Self-balancing binary search tree">self-balancing binary search tree</a>
</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Cycle_sort" title="Cycle sort">Cycle sort</a></td>
<td>
<span style="display:none" class="sortkey">50 !</span><span class="sorttext">—</span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">25 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} n^2 " src="Sorting_algorithm_files/a2562874a32bab685e29f1889353691a.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">25 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} n^2 " src="Sorting_algorithm_files/a2562874a32bab685e29f1889353691a.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">00 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} {1} " src="Sorting_algorithm_files/a6c6e1e26fbd8692aa1bfd1a40d90479.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">No</td>
<td>Insertion</td>
<td align="left">In-place with theoretically optimal number of writes</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Library_sort" title="Library sort">Library sort</a></td>
<td>
<span style="display:none" class="sortkey">50 !</span><span class="sorttext">—</span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} {n \log n} " src="Sorting_algorithm_files/26887d99dbc1e32bbfa34256341735d9.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">25 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} n^2 " src="Sorting_algorithm_files/a2562874a32bab685e29f1889353691a.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} n " src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">Yes</td>
<td>Insertion</td>
<td align="left"></td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Patience_sorting" title="Patience sorting">Patience sorting</a></td>
<td>
<span style="display:none" class="sortkey">50 !</span><span class="sorttext">—</span>
</td>
<td>
<span style="display:none" class="sortkey">50 !</span><span class="sorttext">—</span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n \log n" src="Sorting_algorithm_files/f39d56274a6581e102d27a7ceb5cb2c2.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n" src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">No</td>
<td>Insertion &amp; Selection</td>
<td align="left">Finds all the <a href="http://en.m.wikipedia.org/wiki/Longest_increasing_subsequence" title="Longest increasing subsequence">longest increasing subsequences</a> within O(<i>n</i> log <i>n</i>)</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Smoothsort" title="Smoothsort">Smoothsort</a></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} {n} " src="Sorting_algorithm_files/b4ae34143baae3db34104a6ce68392b9.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} {n \log n} " src="Sorting_algorithm_files/26887d99dbc1e32bbfa34256341735d9.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} {n \log n} " src="Sorting_algorithm_files/26887d99dbc1e32bbfa34256341735d9.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">00 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} {1} " src="Sorting_algorithm_files/a6c6e1e26fbd8692aa1bfd1a40d90479.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">No</td>
<td>Selection</td>
<td align="left">An <a href="http://en.m.wikipedia.org/wiki/Adaptive_sort" title="Adaptive sort">adaptive sort</a> - <img class="tex" alt="\mathcal{} {n} " src="Sorting_algorithm_files/b4ae34143baae3db34104a6ce68392b9.png"> comparisons when the data is already sorted, and 0 swaps.</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Strand_sort" title="Strand sort">Strand sort</a></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n " src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">25 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n^2" src="Sorting_algorithm_files/a2562874a32bab685e29f1889353691a.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">25 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n^2" src="Sorting_algorithm_files/a2562874a32bab685e29f1889353691a.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n" src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">Yes</td>
<td>Selection</td>
<td align="left"></td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Tournament_sort" title="Tournament sort">Tournament sort</a></td>
<td>
<span style="display:none" class="sortkey">50 !</span><span class="sorttext">—</span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n \log n" src="Sorting_algorithm_files/f39d56274a6581e102d27a7ceb5cb2c2.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">20 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n \log n" src="Sorting_algorithm_files/f39d56274a6581e102d27a7ceb5cb2c2.png"></span>
</td>
<td></td>
<td></td>
<td>Selection</td>
<td align="left"></td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Cocktail_sort" title="Cocktail sort">Cocktail sort</a></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n" src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">25 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n^2" src="Sorting_algorithm_files/a2562874a32bab685e29f1889353691a.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">25 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} n^2 " src="Sorting_algorithm_files/a2562874a32bab685e29f1889353691a.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">00 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} {1} " src="Sorting_algorithm_files/a6c6e1e26fbd8692aa1bfd1a40d90479.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">Yes</td>
<td>Exchanging</td>
<td align="left"></td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Comb_sort" title="Comb sort">Comb sort</a></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n" src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n \log n" src="Sorting_algorithm_files/f39d56274a6581e102d27a7ceb5cb2c2.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">25 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} n^2 " src="Sorting_algorithm_files/a2562874a32bab685e29f1889353691a.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">00 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} {1} " src="Sorting_algorithm_files/a6c6e1e26fbd8692aa1bfd1a40d90479.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">No</td>
<td>Exchanging</td>
<td align="left">Small code size</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Gnome_sort" title="Gnome sort">Gnome sort</a></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} n " src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">25 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} n^2 " src="Sorting_algorithm_files/a2562874a32bab685e29f1889353691a.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">25 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} n^2 " src="Sorting_algorithm_files/a2562874a32bab685e29f1889353691a.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">00 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} {1} " src="Sorting_algorithm_files/a6c6e1e26fbd8692aa1bfd1a40d90479.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">Yes</td>
<td>Exchanging</td>
<td align="left">Tiny code size</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Bogosort" title="Bogosort">Bogosort</a></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} n " src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">45 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} n \cdot n! " src="Sorting_algorithm_files/6fc1aa8bea04d45ed85e9104790f11cd.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">45 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} {n \cdot n! \to \infty} " src="Sorting_algorithm_files/b33c7663426c600f04a920716f2fa8ca.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">00 !</span><span class="sorttext"><img class="tex" alt=" \mathcal{} {1} " src="Sorting_algorithm_files/a6c6e1e26fbd8692aa1bfd1a40d90479.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">No</td>
<td>Luck</td>
<td align="left">Randomly permute the array and check if sorted.</td>
</tr>
</tbody></table>
<p>The following table describes <a href="http://en.m.wikipedia.org/wiki/Integer_sorting" title="Integer sorting">integer sorting</a> algorithms and other sorting algorithms that are not <a href="http://en.m.wikipedia.org/wiki/Comparison_sort" title="Comparison sort">comparison sorts</a>. As such, they are not limited by a <img class="tex" alt="\Omega\left( {n \log n} \right)" src="Sorting_algorithm_files/28087fab7257e9f24f6f78e64c600834.png"> lower bound. Complexities below are in terms of <i>n</i>, the number of items to be sorted, <i>k</i>, the size of each key, and <i>d</i>,
 the digit size used by the implementation. Many of them are based on 
the assumption that the key size is large enough that all entries have 
unique key values, and hence that <i>n</i> &lt;&lt; 2<sup><i>k</i></sup>, where &lt;&lt; means "much less than."</p>
<table class="wikitable sortable">
<caption>Non-comparison sorts</caption>
<tbody><tr>
<th>Name</th>
<th>Best</th>
<th>Average</th>
<th>Worst<br>
</th>
<th>Memory<br>
</th>
<th>Stable</th>
<th>
<i>n</i> &lt;&lt; 2<sup><i>k</i></sup>
</th>
<th>Notes<br>
</th>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Pigeonhole_sort" title="Pigeonhole sort">Pigeonhole sort</a></td>
<td>
<span style="display:none" class="sortkey">03 !</span><span class="sorttext">—</span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);"><img class="tex" alt="\;n + 2^k" src="Sorting_algorithm_files/311100cd46381d521b744724b85e7bf5.png"></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);"><img class="tex" alt="\;n + 2^k" src="Sorting_algorithm_files/311100cd46381d521b744724b85e7bf5.png"></td>
<td><img class="tex" alt="\;2^k" src="Sorting_algorithm_files/cf5e58c002a2dd25a560f2d68055a202.png"></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">Yes</td>
<td>Yes</td>
<td></td>
</tr>
<tr align="center">
<td>
<a href="http://en.m.wikipedia.org/wiki/Bucket_sort" title="Bucket sort">Bucket sort</a> (uniform keys)</td>
<td>
<span style="display:none" class="sortkey">03 !</span><span class="sorttext">—</span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);"><img class="tex" alt="\;n+k" src="Sorting_algorithm_files/5e11a52ff8d584b8e8730f1980bcffbf.png"></td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);"><img class="tex" alt="\;n^2 \cdot k" src="Sorting_algorithm_files/582ba24b532bf82a75ed53c54e8f3838.png"></td>
<td><img class="tex" alt="\;n \cdot k" src="Sorting_algorithm_files/a23878bf135e2b4ca4b000ddf7a0d3a1.png"></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">Yes</td>
<td>No</td>
<td>Assumes uniform distribution of elements from the domain in the array.<sup id="cite_ref-clrs_6-0" class="reference"><a href="#cite_note-clrs-6"><span>[</span>7<span>]</span></a></sup>
</td>
</tr>
<tr align="center">
<td>
<a href="http://en.m.wikipedia.org/wiki/Bucket_sort" title="Bucket sort">Bucket sort</a> (integer keys)</td>
<td>
<span style="display:none" class="sortkey">03 !</span><span class="sorttext">—</span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);"><img class="tex" alt="\;n+r" src="Sorting_algorithm_files/93095a2b7a5ce85a11699b8a47b25574.png"></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);"><img class="tex" alt="\;n+r" src="Sorting_algorithm_files/93095a2b7a5ce85a11699b8a47b25574.png"></td>
<td><img class="tex" alt="\;n+r" src="Sorting_algorithm_files/93095a2b7a5ce85a11699b8a47b25574.png"></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">Yes</td>
<td>Yes</td>
<td>r is the range of numbers to be sorted. If r = <img class="tex" alt="\mathcal{O}\left( {n} \right)" src="Sorting_algorithm_files/60715d8c29aa2d3fc2ad4de6e410fc34.png"> then Avg RT = <img class="tex" alt="\mathcal{O}\left( {n} \right)" src="Sorting_algorithm_files/60715d8c29aa2d3fc2ad4de6e410fc34.png"><sup id="cite_ref-gt_7-0" class="reference"><a href="#cite_note-gt-7"><span>[</span>8<span>]</span></a></sup>
</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Counting_sort" title="Counting sort">Counting sort</a></td>
<td>
<span style="display:none" class="sortkey">03 !</span><span class="sorttext">—</span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);"><img class="tex" alt="\;n+r" src="Sorting_algorithm_files/93095a2b7a5ce85a11699b8a47b25574.png"></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);"><img class="tex" alt="\;n+r" src="Sorting_algorithm_files/93095a2b7a5ce85a11699b8a47b25574.png"></td>
<td><img class="tex" alt="\;n+r" src="Sorting_algorithm_files/93095a2b7a5ce85a11699b8a47b25574.png"></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">Yes</td>
<td>Yes</td>
<td>r is the range of numbers to be sorted. If r = <img class="tex" alt="\mathcal{O}\left( {n} \right)" src="Sorting_algorithm_files/60715d8c29aa2d3fc2ad4de6e410fc34.png"> then Avg RT = <img class="tex" alt="\mathcal{O}\left( {n} \right)" src="Sorting_algorithm_files/60715d8c29aa2d3fc2ad4de6e410fc34.png"><sup id="cite_ref-clrs_6-1" class="reference"><a href="#cite_note-clrs-6"><span>[</span>7<span>]</span></a></sup>
</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Radix_sort#Least_significant_digit_radix_sorts" title="Radix sort">LSD Radix Sort</a></td>
<td>
<span style="display:none" class="sortkey">03 !</span><span class="sorttext">—</span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);"><img class="tex" alt="\;n \cdot \frac{k}{d}" src="Sorting_algorithm_files/8d4167690f9d6d7170365b41aa17ec1f.png"></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);"><img class="tex" alt="\;n \cdot \frac{k}{d}" src="Sorting_algorithm_files/8d4167690f9d6d7170365b41aa17ec1f.png"></td>
<td><img class="tex" alt="\mathcal{} n " src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">Yes</td>
<td>No</td>
<td>
<sup id="cite_ref-clrs_6-2" class="reference"><a href="#cite_note-clrs-6"><span>[</span>7<span>]</span></a></sup><sup id="cite_ref-gt_7-1" class="reference"><a href="#cite_note-gt-7"><span>[</span>8<span>]</span></a></sup>
</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Radix_sort#Most_significant_digit_radix_sorts" title="Radix sort">MSD Radix Sort</a></td>
<td>
<span style="display:none" class="sortkey">03 !</span><span class="sorttext">—</span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);"><img class="tex" alt="\;n \cdot \frac{k}{d}" src="Sorting_algorithm_files/8d4167690f9d6d7170365b41aa17ec1f.png"></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);"><img class="tex" alt="\;n \cdot \frac{k}{d}" src="Sorting_algorithm_files/8d4167690f9d6d7170365b41aa17ec1f.png"></td>
<td><img class="tex" alt="\mathcal{} n + \frac{k}{d} \cdot 2^d " src="Sorting_algorithm_files/4b1ebfe06579fd6209e152d011f71f40.png"></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">Yes</td>
<td>No</td>
<td>Stable version uses an external array of size n to hold all of the bins</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Radix_sort#Most_significant_digit_radix_sorts" title="Radix sort">MSD Radix Sort</a></td>
<td>
<span style="display:none" class="sortkey">03 !</span><span class="sorttext">—</span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);"><img class="tex" alt="\;n \cdot \frac{k}{d}" src="Sorting_algorithm_files/8d4167690f9d6d7170365b41aa17ec1f.png"></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);"><img class="tex" alt="\;n \cdot \frac{k}{d}" src="Sorting_algorithm_files/8d4167690f9d6d7170365b41aa17ec1f.png"></td>
<td><img class="tex" alt="\frac{k}{d} \cdot 2^d" src="Sorting_algorithm_files/9159232ffcf53c0be7ab2e36a7d8bb11.png"></td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">No</td>
<td>No</td>
<td>In-Place. k / d recursion levels, 2<sup>d</sup> for count array</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Spreadsort" title="Spreadsort">Spreadsort</a></td>
<td>
<span style="display:none" class="sortkey">03 !</span><span class="sorttext">—</span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);"><img class="tex" alt="\;n \cdot \frac{k}{d}" src="Sorting_algorithm_files/8d4167690f9d6d7170365b41aa17ec1f.png"></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);"><img class="tex" alt="\;n \cdot \left( {\frac{k}{s} + d} \right)" src="Sorting_algorithm_files/d966501d7b3b54bb4ce5651cea4b0cd3.png"></td>
<td><img class="tex" alt="\;\frac{k}{d} \cdot 2^d" src="Sorting_algorithm_files/a72696b6fdfec35fadb5ae25c13349c3.png"></td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">No</td>
<td>No</td>
<td>Asymptotics are based on the assumption that n &lt;&lt; 2<sup>k</sup>, but the algorithm does not require this.</td>
</tr>
</tbody></table>
<p>The following table describes some sorting algorithms that are 
impractical for real-life use due to extremely poor performance or a 
requirement for specialized hardware.</p>
<table class="wikitable sortable">
<tbody><tr>
<th>Name</th>
<th>Best</th>
<th>Average</th>
<th>Worst</th>
<th>Memory</th>
<th>Stable</th>
<th>Comparison</th>
<th>Other notes</th>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Bead_sort" title="Bead sort">Bead sort</a></td>
<td>
<span style="display:none" class="sortkey">03 !</span><span class="sorttext">—</span>
</td>
<td>N/A</td>
<td>N/A</td>
<td>—</td>
<td>N/A</td>
<td>No</td>
<td align="left" nowrap="nowrap">Requires specialized hardware</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Pancake_sorting" title="Pancake sorting">Simple pancake sort</a></td>
<td>
<span style="display:none" class="sortkey">03 !</span><span class="sorttext">—</span>
</td>
<td><img class="tex" alt="\mathcal{} n " src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></td>
<td><img class="tex" alt="\mathcal{} n " src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></td>
<td><img class="tex" alt="\mathcal{} {\log n} " src="Sorting_algorithm_files/afa40d8add687fb513b20686f807a04f.png"></td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">No</td>
<td>Yes</td>
<td align="left" nowrap="nowrap">Count is number of flips.</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Spaghetti_sort" title="Spaghetti sort">Spaghetti (Poll) sort</a></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n" src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n" src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">
<span style="display:none" class="sortkey">15 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n" src="Sorting_algorithm_files/76b4176218aa31958f33ab89e56d772d.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(255, 221, 221);">
<span style="display:none" class="sortkey">25 !</span><span class="sorttext"><img class="tex" alt="\mathcal{} n^2" src="Sorting_algorithm_files/a2562874a32bab685e29f1889353691a.png"></span>
</td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">Yes</td>
<td>Polling</td>
<td align="left">This A linear-time, analog algorithm for sorting a sequence of items, requiring O(<i>n</i>) stack space, and the sort is stable. This requires <img class="tex" alt="n" src="Sorting_algorithm_files/7b8b965ad4bca0e41ab51de7b31363a1.png"> parallel processors. <a href="http://en.m.wikipedia.org/wiki/Spaghetti_sort#Analysis" title="Spaghetti sort">Spaghetti sort#Analysis</a>
</td>
</tr>
<tr align="center">
<td><a href="http://en.m.wikipedia.org/wiki/Sorting_network" title="Sorting network">Sorting networks</a></td>
<td>
<span style="display:none" class="sortkey">03 !</span><span class="sorttext">—</span>
</td>
<td nowrap="nowrap"><img class="tex" alt="\mathcal{} {\log n} " src="Sorting_algorithm_files/afa40d8add687fb513b20686f807a04f.png"></td>
<td nowrap="nowrap"><img class="tex" alt="\mathcal{} {\log n} " src="Sorting_algorithm_files/afa40d8add687fb513b20686f807a04f.png"></td>
<td><img class="tex" alt="\mathcal{} {n \cdot \log (n)} " src="Sorting_algorithm_files/8920abb9f7c067ffb65b1427893eece5.png"></td>
<td style="background: none repeat scroll 0% 0% rgb(221, 255, 221);">Yes</td>
<td>No</td>
<td align="left" nowrap="nowrap">Requires a custom circuit of size <img class="tex" alt="\mathcal{O}\left( n \cdot \log (n) \right)" src="Sorting_algorithm_files/85898d194fb019343c32fb8a97c17c7e.png">
</td>
</tr>
</tbody></table>
<p>Additionally, theoretical computer scientists have detailed other sorting algorithms that provide better than <img class="tex" alt="\mathcal{O}\left( {n \log n} \right)" src="Sorting_algorithm_files/c904a91cb9bb7dffa7dc33bc380081de.png"> time complexity with additional constraints, including:</p>
<ul>
<li>Han's algorithm, a deterministic algorithm for sorting keys from a <a href="http://en.m.wikipedia.org/wiki/Domain_of_a_function" title="Domain of a function">domain</a> of finite size, taking <img class="tex" alt="\mathcal{O}\left( {n \log \log n} \right)" src="Sorting_algorithm_files/1e4f7396a637c161f643b268935067c9.png"> time and <img class="tex" alt="\mathcal{O}\left( {n} \right)" src="Sorting_algorithm_files/60715d8c29aa2d3fc2ad4de6e410fc34.png"> space.<sup id="cite_ref-8" class="reference"><a href="#cite_note-8"><span>[</span>9<span>]</span></a></sup>
</li>
<li>Thorup's algorithm, a randomized algorithm for sorting keys from a domain of finite size, taking <img class="tex" alt="\mathcal{O}\left( {n \log \log n} \right)" src="Sorting_algorithm_files/1e4f7396a637c161f643b268935067c9.png"> time and <img class="tex" alt="\mathcal{O}\left( {n} \right)" src="Sorting_algorithm_files/60715d8c29aa2d3fc2ad4de6e410fc34.png"> space.<sup id="cite_ref-9" class="reference"><a href="#cite_note-9"><span>[</span>10<span>]</span></a></sup>
</li>
<li>An <a href="http://en.m.wikipedia.org/wiki/Integer" title="Integer">integer</a> sorting algorithm taking <img class="tex" alt="\mathcal{O}\left( {n \sqrt{\log \log n}} \right)" src="Sorting_algorithm_files/eb420ac9c3fe348691684521fe2ad264.png"> expected time and <img class="tex" alt="\mathcal{O}\left( {n} \right)" src="Sorting_algorithm_files/60715d8c29aa2d3fc2ad4de6e410fc34.png"> space.<sup id="cite_ref-10" class="reference"><a href="#cite_note-10"><span>[</span>11<span>]</span></a></sup>
</li>
</ul>
<p>Algorithms not yet compared above include:</p>
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Odd-even_sort" title="Odd-even sort" class="mw-redirect">Odd-even sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Flashsort" title="Flashsort">Flashsort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Burstsort" title="Burstsort">Burstsort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Postman_sort" title="Postman sort" class="mw-redirect">Postman sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Stooge_sort" title="Stooge sort">Stooge sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Samplesort" title="Samplesort">Samplesort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Bitonic_sorter" title="Bitonic sorter">Bitonic sorter</a></li>
</ul>
</div><a id="anchor_2" href="#section_2" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_3"><button>Show</button><span id="Summaries_of_popular_sorting_algorithms">Summaries of popular sorting algorithms</span></h2><div class="content_block" id="content_3">
<h3> <span class="mw-headline" id="Bubble_sort">Bubble sort</span>
</h3>
<div class="thumb tright">
<div class="thumbinner" style="width:222px;">
<a href="http://en.m.wikipedia.org/wiki/File:Bubblesort-edited.png" class="image"><img alt="" src="Sorting_algorithm_files/220px-Bubblesort-edited.png" class="thumbimage" width="220" height="196"></a>
<div class="thumbcaption">

A bubble sort, a sorting algorithm that continuously steps through a list, <a href="http://en.m.wikipedia.org/wiki/Swap_%28computer_science%29" title="Swap (computer science)">swapping</a> items until they appear in the correct order.</div>
</div>
</div>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Bubble_sort" title="Bubble sort">Bubble sort</a>
</div>
<p><i>Bubble sort</i> is a simple sorting algorithm. The algorithm 
starts at the beginning of the data set. It compares the first two 
elements, and if the first is greater than the second, it swaps them. It
 continues doing this for each pair of adjacent elements to the end of 
the data set. It then starts again with the first two elements, 
repeating until no swaps have occurred on the last pass. This 
algorithm's average and worst case performance is O(<i>n</i><sup>2</sup>),
 so it is rarely used to sort large, unordered, data sets. Bubble sort 
can be used to sort a small number of items (where its asymptotic 
inefficiency is not a high penalty). Bubble sort may also be efficiently
 used on a list that is nearly sorted, as long as the elements are not 
significantly out of place. For example, if any number of elements are 
out of place by only one position (e.g. 0123546789 and 1032547869), then
 bubble sort's exchange puts them in order, so bubble sort will take 
only <i>2n</i> time.</p>
<h3> <span class="mw-headline" id="Selection_sort">Selection sort</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Selection_sort" title="Selection sort">Selection sort</a>
</div>
<p><i>Selection sort</i> is an <a href="http://en.m.wikipedia.org/wiki/In-place_algorithm" title="In-place algorithm">in-place</a> <a href="http://en.m.wikipedia.org/wiki/Comparison_sort" title="Comparison sort">comparison sort</a>. It has <a href="http://en.m.wikipedia.org/wiki/Big_O_notation" title="Big O notation">O</a>(<i>n</i><sup>2</sup>) complexity, making it inefficient on large lists, and generally performs worse than the similar <a href="http://en.m.wikipedia.org/wiki/Insertion_sort" title="Insertion sort">insertion sort</a>.
 Selection sort is noted for its simplicity, and also has performance 
advantages over more complicated algorithms in certain situations.</p>
<p>The algorithm finds the minimum value, swaps it with the value in the
 first position, and repeats these steps for the remainder of the list. 
It does no more than <i>n</i> swaps, and thus is useful where swapping is very expensive.</p>
<h3> <span class="mw-headline" id="Insertion_sort">Insertion sort</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Insertion_sort" title="Insertion sort">Insertion sort</a>
</div>
<p><i>Insertion sort</i> is a simple sorting algorithm that is 
relatively efficient for small lists and mostly sorted lists, and often 
is used as part of more sophisticated algorithms. It works by taking 
elements from the list one by one and inserting them in their correct 
position into a new sorted list. In arrays, the new list and the 
remaining elements can share the array's space, but insertion is 
expensive, requiring shifting all following elements over by one. <a href="http://en.m.wikipedia.org/wiki/Shell_sort" title="Shell sort" class="mw-redirect">Shell sort</a> (see below) is a variant of insertion sort that is more efficient for larger lists.</p>
<h3> <span class="mw-headline" id="Shell_sort">Shell sort</span>
</h3>
<div class="thumb tright">
<div class="thumbinner" style="width:222px;">
<a href="http://en.m.wikipedia.org/wiki/File:Shellsort-edited.png" class="image"><img alt="" src="Sorting_algorithm_files/220px-Shellsort-edited.png" class="thumbimage" width="220" height="196"></a>
<div class="thumbcaption">

A Shell sort, different from bubble sort in that it moves elements numerous positions <a href="http://en.m.wikipedia.org/wiki/Swap_%28computer_science%29" title="Swap (computer science)">swapping</a>
</div>
</div>
</div>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Shell_sort" title="Shell sort" class="mw-redirect">Shell sort</a>
</div>
<p><i>Shell sort</i> was invented by <a href="http://en.m.wikipedia.org/wiki/Donald_Shell" title="Donald Shell">Donald Shell</a>
 in 1959. It improves upon bubble sort and insertion sort by moving out 
of order elements more than one position at a time. One implementation 
can be described as arranging the data sequence in a two-dimensional 
array and then sorting the columns of the array using insertion sort.</p>
<h3> <span class="mw-headline" id="Comb_sort">Comb sort</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Comb_sort" title="Comb sort">Comb sort</a>
</div>
<p><i>Comb sort</i> is a relatively simplistic sorting algorithm originally designed by <span class="new" title="Wlodzimierz Dobosiewicz (page does not exist)">Wlodzimierz Dobosiewicz</span> in 1980. Later it was rediscovered and popularized by <span class="new" title="Stephen Lacey (page does not exist)">Stephen Lacey</span> and <span class="new" title="Richard Box (page does not exist)">Richard Box</span> with a <a href="http://en.m.wikipedia.org/wiki/Byte_Magazine" title="Byte Magazine" class="mw-redirect">Byte Magazine</a> article published in April 1991. Comb sort improves on <a href="http://en.m.wikipedia.org/wiki/Bubble_sort" title="Bubble sort">bubble sort</a>, and rivals algorithms like <a href="http://en.m.wikipedia.org/wiki/Quicksort" title="Quicksort">Quicksort</a>. The basic idea is to eliminate <i>turtles</i>, or small values near the end of the list, since in a bubble sort these slow the sorting down tremendously. (<i>Rabbits</i>, large values around the beginning of the list, do not pose a problem in bubble sort)</p>
<h3> <span class="mw-headline" id="Merge_sort">Merge sort</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Merge_sort" title="Merge sort">Merge sort</a>
</div>
<p><i>Merge sort</i> takes advantage of the ease of merging already 
sorted lists into a new sorted list. It starts by comparing every two 
elements (i.e., 1 with 2, then 3 with 4...) and swapping them if the 
first should come after the second. It then merges each of the resulting
 lists of two into lists of four, then merges those lists of four, and 
so on; until at last two lists are merged into the final sorted list. Of
 the algorithms described here, this is the first that scales well to 
very large lists, because its worst-case running time is O(<i>n</i> log <i>n</i>).
 Merge sort has seen a relatively recent surge in popularity for 
practical implementations, being used for the standard sort routine in 
the programming languages <a href="http://en.m.wikipedia.org/wiki/Perl" title="Perl">Perl</a>,<sup id="cite_ref-11" class="reference"><a href="#cite_note-11"><span>[</span>12<span>]</span></a></sup><a href="http://en.m.wikipedia.org/wiki/Python_%28programming_language%29" title="Python (programming language)">Python</a> (as <a href="http://en.m.wikipedia.org/wiki/Timsort" title="Timsort">timsort</a><sup id="cite_ref-12" class="reference"><a href="#cite_note-12"><span>[</span>13<span>]</span></a></sup>), and <a href="http://en.m.wikipedia.org/wiki/Java_%28programming_language%29" title="Java (programming language)">Java</a> (also uses timsort as of <a href="http://en.m.wikipedia.org/wiki/JDK7" title="JDK7" class="mw-redirect">JDK7</a><sup id="cite_ref-13" class="reference"><a href="#cite_note-13"><span>[</span>14<span>]</span></a></sup>), among others. Merge sort has been used in Java at least since 2000 in JDK1.3.<sup id="cite_ref-mergesort_in_jdk13_14-0" class="reference"><a href="#cite_note-mergesort_in_jdk13-14"><span>[</span>15<span>]</span></a></sup><sup id="cite_ref-jdk13_since_2000_15-0" class="reference"><a href="#cite_note-jdk13_since_2000-15"><span>[</span>16<span>]</span></a></sup></p>
<h3> <span class="mw-headline" id="Heapsort">Heapsort</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Heapsort" title="Heapsort">Heapsort</a>
</div>
<p><i>Heapsort</i> is a much more efficient version of <a href="http://en.m.wikipedia.org/wiki/Selection_sort" title="Selection sort">selection sort</a>.
 It also works by determining the largest (or smallest) element of the 
list, placing that at the end (or beginning) of the list, then 
continuing with the rest of the list, but accomplishes this task 
efficiently by using a data structure called a <a href="http://en.m.wikipedia.org/wiki/Heap_%28data_structure%29" title="Heap (data structure)">heap</a>, a special type of <a href="http://en.m.wikipedia.org/wiki/Binary_tree" title="Binary tree">binary tree</a>.
 Once the data list has been made into a heap, the root node is 
guaranteed to be the largest (or smallest) element. When it is removed 
and placed at the end of the list, the heap is rearranged so the largest
 element remaining moves to the root. Using the heap, finding the next 
largest element takes <i>O(</i>log <i>n)</i> time, instead of <i>O(n)</i> for a linear scan as in simple selection sort. This allows Heapsort to run in <i>O(n</i> log <i>n)</i> time, and this is also the worst case complexity.</p>
<h3> <span class="mw-headline" id="Quicksort">Quicksort</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Quicksort" title="Quicksort">Quicksort</a>
</div>
<p><i>Quicksort</i> is a <a href="http://en.m.wikipedia.org/wiki/Divide_and_conquer_algorithm" title="Divide and conquer algorithm">divide and conquer</a> <a href="http://en.m.wikipedia.org/wiki/Algorithm" title="Algorithm">algorithm</a> which relies on a <i>partition</i> operation: to partition an array an element called a <i>pivot</i>
 is selected. All elements smaller than the pivot are moved before it 
and all greater elements are moved after it. This can be done 
efficiently in linear time and <a href="http://en.m.wikipedia.org/wiki/In-place_algorithm" title="In-place algorithm">in-place</a>.
 The lesser and greater sublists are then recursively sorted. Efficient 
implementations of quicksort (with in-place partitioning) are typically 
unstable sorts and somewhat complex, but are among the fastest sorting 
algorithms in practice. Together with its modest O(log <i>n</i>) space 
usage, quicksort is one of the most popular sorting algorithms and is 
available in many standard programming libraries. The most complex issue
 in quicksort is choosing a good pivot element; consistently poor 
choices of pivots can result in drastically slower O(<i>n</i>²) performance, if at each step the <a href="http://en.m.wikipedia.org/wiki/Median" title="Median">median</a> is chosen as the pivot then the algorithm works in O(<i>n</i>&nbsp;log&nbsp;<i>n</i>). Finding the median however, is an O(n) operation on unsorted lists and therefore exacts its own penalty with sorting.</p>
<h3> <span class="mw-headline" id="Counting_sort">Counting sort</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Counting_sort" title="Counting sort">Counting sort</a>
</div>
<p>Counting sort is applicable when each input is known to belong to a particular set, <i>S</i>, of possibilities. The algorithm runs in O(|<i>S</i>| + <i>n</i>) time and O(|<i>S</i>|) memory where <i>n</i> is the length of the input. It works by creating an integer array of size |<i>S</i>| and using the <i>i</i>th bin to count the occurrences of the <i>i</i>th member of <i>S</i>
 in the input. Each input is then counted by incrementing the value of 
its corresponding bin. Afterward, the counting array is looped through 
to arrange all of the inputs in order. This sorting algorithm cannot 
often be used because <i>S</i> needs to be reasonably small for it to be
 efficient, but the algorithm is extremely fast and demonstrates great 
asymptotic behavior as <i>n</i> increases. It also can be modified to provide stable behavior.</p>
<h3> <span class="mw-headline" id="Bucket_sort">Bucket sort</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Bucket_sort" title="Bucket sort">Bucket sort</a>
</div>
<p>Bucket sort is a <a href="http://en.m.wikipedia.org/wiki/Divide_and_conquer_algorithm" title="Divide and conquer algorithm">divide and conquer</a> sorting algorithm that generalizes <a href="http://en.m.wikipedia.org/wiki/Counting_sort" title="Counting sort">Counting sort</a>
 by partitioning an array into a finite number of buckets. Each bucket 
is then sorted individually, either using a different sorting algorithm,
 or by recursively applying the bucket sorting algorithm. A variation of
 this method called the single buffered count sort is faster than 
quicksort.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from October 2010">citation needed</span></a></i>]</sup></p>
<p>Due to the fact that bucket sort must use a limited number of buckets
 it is best suited to be used on data sets of a limited scope. Bucket 
sort would be unsuitable for data such as social security numbers - 
which have a lot of variation.</p>
<h3> <span class="mw-headline" id="Radix_sort">Radix sort</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Radix_sort" title="Radix sort">Radix sort</a>
</div>
<p><i>Radix sort</i> is an algorithm that sorts numbers by processing individual digits. <i>n</i> numbers consisting of <i>k</i> digits each are sorted in O(<i>n</i> · <i>k</i>) time. Radix sort can process digits of each number either starting from the <a href="http://en.m.wikipedia.org/wiki/Least_significant_digit" title="Least significant digit" class="mw-redirect">least significant digit</a> (LSD) or starting from the <a href="http://en.m.wikipedia.org/wiki/Most_significant_digit" title="Most significant digit" class="mw-redirect">most significant digit</a>
 (MSD). The LSD algorithm first sorts the list by the least significant 
digit while preserving their relative order using a stable sort. Then it
 sorts them by the next digit, and so on from the least significant to 
the most significant, ending up with a sorted list. While the LSD radix 
sort requires the use of a stable sort, the MSD radix sort algorithm 
does not (unless stable sorting is desired). In-place MSD radix sort is 
not stable. It is common for the <a href="http://en.m.wikipedia.org/wiki/Counting_sort" title="Counting sort">counting sort</a> algorithm to be used internally by the radix sort. Hybrid sorting approach, such as using <a href="http://en.m.wikipedia.org/wiki/Insertion_sort" title="Insertion sort">insertion sort</a> for small bins improves performance of radix sort significantly.</p>
<h3> <span class="mw-headline" id="Distribution_sort">Distribution sort</span>
</h3>
<p><i>Distribution sort</i> refers to any sorting algorithm where data 
are distributed from their input to multiple intermediate structures 
which are then gathered and placed on the output. See <a href="http://en.m.wikipedia.org/wiki/Bucket_sort" title="Bucket sort">Bucket sort</a>, <a href="http://en.m.wikipedia.org/wiki/Flashsort" title="Flashsort">Flashsort</a>.</p>
<h3> <span class="mw-headline" id="Timsort">Timsort</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Timsort" title="Timsort">Timsort</a>
</div>
<p><i>Timsort</i> finds runs in the data, creates runs with insertion 
sort if necessary, and then uses merge sort to create the final sorted 
list. It has the same complexity (O(nlogn)) in the average and worst 
cases, but with pre-sorted data it goes down to O(n).</p>
</div><a id="anchor_3" href="#section_3" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_4"><button>Show</button><span id="Memory_usage_patterns_and_index_sorting">Memory usage patterns and index sorting</span></h2><div class="content_block" id="content_4">
<p>When the size of the array to be sorted approaches or exceeds the 
available primary memory, so that (much slower) disk or swap space must 
be employed, the memory usage pattern of a sorting algorithm becomes 
important, and an algorithm that might have been fairly efficient when 
the array fit easily in RAM may become impractical. In this scenario, 
the total number of comparisons becomes (relatively) less important, and
 the number of times sections of memory must be copied or swapped to and
 from the disk can dominate the performance characteristics of an 
algorithm. Thus, the number of passes and the localization of 
comparisons can be more important than the raw number of comparisons, 
since comparisons of nearby elements to one another happen at <a href="http://en.m.wikipedia.org/wiki/Computer_bus" title="Computer bus" class="mw-redirect">system bus</a> speed (or, with caching, even at <a href="http://en.m.wikipedia.org/wiki/Central_Processing_Unit" title="Central Processing Unit" class="mw-redirect">CPU</a> speed), which, compared to disk speed, is virtually instantaneous.</p>
<p>For example, the popular recursive <a href="http://en.m.wikipedia.org/wiki/Quicksort" title="Quicksort">quicksort</a>
 algorithm provides quite reasonable performance with adequate RAM, but 
due to the recursive way that it copies portions of the array it becomes
 much less practical when the array does not fit in RAM, because it may 
cause a number of slow copy or move operations to and from disk. In that
 scenario, another algorithm may be preferable even if it requires more 
total comparisons.</p>
<p>One way to work around this problem, which works well when complex records (such as in a <a href="http://en.m.wikipedia.org/wiki/Relational_database" title="Relational database">relational database</a>)
 are being sorted by a relatively small key field, is to create an index
 into the array and then sort the index, rather than the entire array. 
(A sorted version of the entire array can then be produced with one 
pass, reading from the index, but often even that is unnecessary, as 
having the sorted index is adequate.) Because the index is much smaller 
than the entire array, it may fit easily in memory where the entire 
array would not, effectively eliminating the disk-swapping problem. This
 procedure is sometimes called "tag sort".<sup id="cite_ref-16" class="reference"><a href="#cite_note-16"><span>[</span>17<span>]</span></a></sup></p>
<p>Another technique for overcoming the memory-size problem is to 
combine two algorithms in a way that takes advantages of the strength of
 each to improve overall performance. For instance, the array might be 
subdivided into chunks of a size that will fit easily in RAM (say, a few
 thousand elements), the chunks sorted using an efficient algorithm 
(such as <a href="http://en.m.wikipedia.org/wiki/Quicksort" title="Quicksort">quicksort</a> or <a href="http://en.m.wikipedia.org/wiki/Heapsort" title="Heapsort">heapsort</a>), and the results merged as per <a href="http://en.m.wikipedia.org/wiki/Mergesort" title="Mergesort" class="mw-redirect">mergesort</a>.
 This is less efficient than just doing mergesort in the first place, 
but it requires less physical RAM (to be practical) than a full 
quicksort on the whole array.</p>
<p>Techniques can also be combined. For sorting very large sets of data 
that vastly exceed system memory, even the index may need to be sorted 
using an algorithm or combination of algorithms designed to perform 
reasonably with <a href="http://en.m.wikipedia.org/wiki/Virtual_memory" title="Virtual memory">virtual memory</a>, i.e., to reduce the amount of swapping required.</p>
</div><a id="anchor_4" href="#section_4" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_5"><button>Show</button><span id="Inefficient.2Fhumorous_sorts">Inefficient/humorous sorts</span></h2><div class="content_block" id="content_5">
<p>Some algorithms are extremely slow compared to those discussed above, such as the <a href="http://en.m.wikipedia.org/wiki/Bogosort" title="Bogosort">Bogosort</a> <img class="tex" alt="O(n\cdot n!)" src="Sorting_algorithm_files/9fb7de5820bc661e7cab9281ea68ee2a.png"> and the <a href="http://en.m.wikipedia.org/wiki/Stooge_sort" title="Stooge sort">Stooge sort</a> <img class="tex" alt=" O(n^{2.7})" src="Sorting_algorithm_files/ebbd08860741a6666a9ddba0c8135092.png">.</p>
</div><a id="anchor_5" href="#section_5" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_6"><button>Show</button><span id="See_also">See also</span></h2><div class="content_block" id="content_6">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/External_sorting" title="External sorting">External sorting</a></li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Sorting_network" title="Sorting network">Sorting networks</a> (compare)</li>
<li><a href="http://en.m.wikipedia.org/wiki/Cocktail_sort" title="Cocktail sort">Cocktail sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Collation" title="Collation">Collation</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Schwartzian_transform" title="Schwartzian transform">Schwartzian transform</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Shuffle#Shuffling_algorithms" title="Shuffle" class="mw-redirect">Shuffling algorithms</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Search_algorithm" title="Search algorithm">Search algorithms</a></li>
</ul>
</div><a id="anchor_6" href="#section_6" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_7"><button>Show</button><span id="References">References</span></h2><div class="content_block" id="content_7">
<table class="metadata plainlinks ambox ambox-style ambox-More_footnotes" style=""><tbody><tr>
<td class="mbox-image">
<div style="width: 52px;"><img alt="" src="Sorting_algorithm_files/40px-Text_document_with_red_question_mark.png" width="40" height="40"></div>
</td>
<td class="mbox-text" style=""><span class="mbox-text-span">This article includes a <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">list of references</a>, but <b>its sources remain unclear because it has insufficient <a href="http://en.m.wikipedia.org/wiki/Wikipedia:INCITE" title="Wikipedia:INCITE" class="mw-redirect">inline citations</a></b>. <span class="hide-when-compact">Please help to <a href="http://en.m.wikipedia.org/wiki/Wikipedia:WikiProject_Fact_and_Reference_Check" title="Wikipedia:WikiProject Fact and Reference Check">improve</a> this article by <a href="http://en.m.wikipedia.org/wiki/Wikipedia:When_to_cite" title="Wikipedia:When to cite">introducing</a> more precise citations.</span> <small><i>(September 2009)</i></small> </span></td>
</tr></tbody></table>
<div class="reflist" style="list-style-type: decimal;">
<ol class="references">
<li id="cite_note-0">
<span class="mw-cite-backlink"><b><a href="#cite_ref-0">^</a></b></span> <span class="reference-text">Demuth, H. Electronic Data Sorting. PhD thesis, Stanford University, 1956.</span>
</li>
<li id="cite_note-1">
<span class="mw-cite-backlink"><b><a href="#cite_ref-1">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://mxr.mozilla.org/seamonkey/source/js/src/jsarray.c">http://mxr.mozilla.org/seamonkey/source/js/src/jsarray.c</a></span>
</li>
<li id="cite_note-2">
<span class="mw-cite-backlink"><b><a href="#cite_ref-2">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://www.sgi.com/tech/stl/stable_sort.html">http://www.sgi.com/tech/stl/stable_sort.html</a></span>
</li>
<li id="cite_note-3">
<span class="mw-cite-backlink"><b><a href="#cite_ref-3">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.54.8381">http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.54.8381</a></span>
</li>
<li id="cite_note-4">
<span class="mw-cite-backlink"><b><a href="#cite_ref-4">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://www.algolist.net/Algorithms/Sorting/Selection_sort">http://www.algolist.net/Algorithms/Sorting/Selection_sort</a></span>
</li>
<li id="cite_note-5">
<span class="mw-cite-backlink"><b><a href="#cite_ref-5">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://svn.webkit.org/repository/webkit/trunk/Source/JavaScriptCore/runtime/ArrayPrototype.cpp">http://svn.webkit.org/repository/webkit/trunk/Source/JavaScriptCore/runtime/ArrayPrototype.cpp</a></span>
</li>
<li id="cite_note-clrs-6">
<span class="mw-cite-backlink">^ <a href="#cite_ref-clrs_6-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-clrs_6-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-clrs_6-2"><sup><i><b>c</b></i></sup></a></span> <span class="reference-text"><span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Thomas_H._Cormen" title="Thomas H. Cormen">Cormen, Thomas H.</a>; <a href="http://en.m.wikipedia.org/wiki/Charles_E._Leiserson" title="Charles E. Leiserson">Leiserson, Charles E.</a>, <a href="http://en.m.wikipedia.org/wiki/Ron_Rivest" title="Ron Rivest">Rivest, Ronald L.</a>, <a href="http://en.m.wikipedia.org/wiki/Clifford_Stein" title="Clifford Stein">Stein, Clifford</a> (2001) [1990]. <i><a href="http://en.m.wikipedia.org/wiki/Introduction_to_Algorithms" title="Introduction to Algorithms">Introduction to Algorithms</a></i> (2nd ed.). MIT Press and McGraw-Hill. <a href="http://en.m.wikipedia.org/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&nbsp;<a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0-262-03293-7" title="Special:BookSources/0-262-03293-7">0-262-03293-7</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=%5B%5BIntroduction+to+Algorithms%5D%5D&amp;rft.aulast=Cormen&amp;rft.aufirst=Thomas+H.&amp;rft.au=Cormen%2C%26%2332%3BThomas+H.&amp;rft.date=2001&amp;rft.edition=2nd&amp;rft.pub=MIT+Press+and+McGraw-Hill&amp;rft.isbn=0-262-03293-7&amp;rfr_id=info:sid/en.wikipedia.org:Sorting_algorithm"><span style="display: none;">&nbsp;</span></span></span>
</li>
<li id="cite_note-gt-7">
<span class="mw-cite-backlink">^ <a href="#cite_ref-gt_7-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-gt_7-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Michael_T._Goodrich" title="Michael T. Goodrich">Goodrich, Michael T.</a>; <a href="http://en.m.wikipedia.org/wiki/Roberto_Tamassia" title="Roberto Tamassia">Tamassia, Roberto</a> (2002). "4.5 Bucket-Sort and Radix-Sort". <i>Algorithm Design: Foundations, Analysis, and Internet Examples</i>. John Wiley &amp; Sons. pp.&nbsp;241–243.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=4.5+Bucket-Sort+and+Radix-Sort&amp;rft.atitle=Algorithm+Design%3A+Foundations%2C+Analysis%2C+and+Internet+Examples&amp;rft.aulast=Goodrich&amp;rft.aufirst=Michael+T.&amp;rft.au=Goodrich%2C%26%2332%3BMichael+T.&amp;rft.au=Tamassia%2C%26%2332%3BRoberto&amp;rft.date=2002&amp;rft.pages=pp.%26nbsp%3B241%E2%80%93243&amp;rft.pub=John+Wiley+%26+Sons&amp;rfr_id=info:sid/en.wikipedia.org:Sorting_algorithm"><span style="display: none;">&nbsp;</span></span></span>
</li>
<li id="cite_note-8">
<span class="mw-cite-backlink"><b><a href="#cite_ref-8">^</a></b></span> <span class="reference-text">Y. Han. <i>Deterministic sorting in <img class="tex" alt="\mathcal{O}\left( {n \log \log n} \right)" src="Sorting_algorithm_files/1e4f7396a637c161f643b268935067c9.png"> time and linear space</i>. Proceedings of the thirty-fourth annual ACM symposium on Theory of computing, Montreal, Quebec, Canada, 2002,p.602-608.</span>
</li>
<li id="cite_note-9">
<span class="mw-cite-backlink"><b><a href="#cite_ref-9">^</a></b></span> <span class="reference-text"><a href="http://en.m.wikipedia.org/wiki/Mikkel_Thorup" title="Mikkel Thorup">M. Thorup</a>. <i>Randomized Sorting in <img class="tex" alt="\mathcal{O}\left( {n \log \log n} \right)" src="Sorting_algorithm_files/1e4f7396a637c161f643b268935067c9.png"> Time and Linear Space Using Addition, Shift, and Bit-wise Boolean Operations</i>. Journal of Algorithms, Volume 42, Number 2, February 2002, pp. 205-230(26)</span>
</li>
<li id="cite_note-10">
<span class="mw-cite-backlink"><b><a href="#cite_ref-10">^</a></b></span> <span class="reference-text">Han, Y. and <a href="http://en.m.wikipedia.org/wiki/Mikkel_Thorup" title="Mikkel Thorup">Thorup, M.</a> 2002. Integer Sorting in <img class="tex" alt="\mathcal{O}\left( {n \sqrt{\log \log n}} \right)" src="Sorting_algorithm_files/eb420ac9c3fe348691684521fe2ad264.png"> Expected Time and Linear Space. In <i>Proceedings of the 43rd Symposium on Foundations of Computer Science</i> (November 16–19, 2002). FOCS. IEEE Computer Society, Washington, DC, 135-144.</span>
</li>
<li id="cite_note-11">
<span class="mw-cite-backlink"><b><a href="#cite_ref-11">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://perldoc.perl.org/functions/sort.html">Perl sort documentation</a></span>
</li>
<li id="cite_note-12">
<span class="mw-cite-backlink"><b><a href="#cite_ref-12">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://svn.python.org/projects/python/trunk/Objects/listsort.txt">Tim Peters's original description of timsort</a></span>
</li>
<li id="cite_note-13">
<span class="mw-cite-backlink"><b><a href="#cite_ref-13">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://hg.openjdk.java.net/jdk7/tl/jdk/rev/bfd7abda8f79">http://hg.openjdk.java.net/jdk7/tl/jdk/rev/bfd7abda8f79</a></span>
</li>
<li id="cite_note-mergesort_in_jdk13-14">
<span class="mw-cite-backlink"><b><a href="#cite_ref-mergesort_in_jdk13_14-0">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://java.sun.com/j2se/1.3/docs/api/java/util/Arrays.html#sort%28java.lang.Object%5B%5D%29">Merge sort in Java 1.3</a>, Sun.</span>
</li>
<li id="cite_note-jdk13_since_2000-15">
<span class="mw-cite-backlink"><b><a href="#cite_ref-jdk13_since_2000_15-0">^</a></b></span> <span class="reference-text"><a href="http://en.m.wikipedia.org/wiki/Java_version_history#J2SE_1.3_.28May_8.2C_2000.29" title="Java version history">Java 1.3 live since 2000</a></span>
</li>
<li id="cite_note-16">
<span class="mw-cite-backlink"><b><a href="#cite_ref-16">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.pcmag.com/encyclopedia_term/0,2542,t=tag+sort&amp;i=52532,00.asp">Definition of "tag sort" according to PC Magazine</a></span>
</li>
</ol>
</div>
<ul>
<li>
<a href="http://en.m.wikipedia.org/wiki/D._E._Knuth" title="D. E. Knuth" class="mw-redirect">D. E. Knuth</a>, <i><a href="http://en.m.wikipedia.org/wiki/The_Art_of_Computer_Programming" title="The Art of Computer Programming">The Art of Computer Programming</a>, Volume 3: Sorting and Searching</i>.</li>
</ul>
</div><a id="anchor_7" href="#section_7" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_8"><button>Show</button><span id="External_links">External links</span></h2><div class="content_block" id="content_8">
<table class="metadata mbox-small plainlinks" style="border: 1px solid rgb(170, 170, 170); background-color: rgb(249, 249, 249);"><tbody><tr>
<td class="mbox-image"><img alt="" src="Sorting_algorithm_files/40px-Wikibooks-logo-en-noslogan.png" width="40" height="40"></td>
<td class="mbox-text" style="">The Wikibook <i><a class="external text" href="http://en.wikibooks.org/wiki/Algorithm_implementation">Algorithm implementation</a></i> has a page on the topic of
<div style="margin-left:10px;"><i><b><a class="external text" href="http://en.wikibooks.org/wiki/Algorithm_implementation/Sorting">Sorting algorithms</a></b></i></div>
</td>
</tr></tbody></table>
<table class="metadata mbox-small plainlinks" style="border: 1px solid rgb(170, 170, 170); background-color: rgb(249, 249, 249);"><tbody><tr>
<td class="mbox-image"><img alt="" src="Sorting_algorithm_files/40px-Wikibooks-logo-en-noslogan.png" width="40" height="40"></td>
<td class="mbox-text" style="">The Wikibook <i><a class="external text" href="http://en.wikibooks.org/wiki/A-level_Mathematics">A-level Mathematics</a></i> has a page on the topic of
<div style="margin-left:10px;"><i><b><a class="external text" href="http://en.wikibooks.org/wiki/A-level_Mathematics/OCR/D1/Algorithms">Sorting algorithms</a></b></i></div>
</td>
</tr></tbody></table>
<ul>
<li>
<a rel="nofollow" class="external text" href="http://www.sorting-algorithms.com/">Sorting Algorithm Animations</a> - Graphical illustration of how different algorithms handle different kinds of data sets.</li>
<li>
<a rel="nofollow" class="external text" href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/algoen.htm">Sequential and parallel sorting algorithms</a> - Explanations and analyses of many sorting algorithms.</li>
<li>
<a rel="nofollow" class="external text" href="http://www.nist.gov/dads/">Dictionary of Algorithms, Data Structures, and Problems</a> - Dictionary of algorithms, techniques, common functions, and problems.</li>
<li>
<a rel="nofollow" class="external text" href="http://www.softpanorama.org/Algorithms/sorting.shtml">Slightly Skeptical View on Sorting Algorithms</a> Discusses several classic algorithms and promotes alternatives to the <a href="http://en.m.wikipedia.org/wiki/Quicksort" title="Quicksort">quicksort</a> algorithm.</li>
</ul>
<table class="navbox" style="border-spacing: 0pt;" cellspacing="0"><tbody><tr>
<td style="padding: 2px;">
<table class="nowraplinks collapsible autocollapse navbox-inner" style="border-spacing: 0pt; background: none repeat scroll 0% 0% transparent; color: inherit;" cellspacing="0">
<tbody><tr>
<th scope="col" style="" class="navbox-title" colspan="2">
<div class="noprint plainlinks hlist navbar mini" style="">
<ul>
<li class="nv-view"><a href="http://en.m.wikipedia.org/wiki/Template:Sorting" title="Template:Sorting"><span title="View this template" style=";;background:none transparent;border:none;">v</span></a></li>
<li class="nv-talk"><a href="http://en.m.wikipedia.org/wiki/Template_talk:Sorting" title="Template talk:Sorting"><span title="Discuss this template" style=";;background:none transparent;border:none;">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Sorting&amp;action=edit"><span title="Edit this template" style=";;background:none transparent;border:none;">e</span></a></li>
</ul>
</div>
<div class="" style="font-size:110%;"><strong class="selflink">Sorting algorithms</strong></div>
</th>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Theory</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-odd hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Computational_complexity_theory" title="Computational complexity theory">Computational complexity theory</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Big_O_notation" title="Big O notation">Big O notation</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Total_order" title="Total order">Total order</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/List_%28computing%29" title="List (computing)" class="mw-redirect">Lists</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Sorting_algorithm#Stability" title="Sorting algorithm">Stability</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Comparison_sort" title="Comparison sort">Comparison sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Adaptive_sort" title="Adaptive sort">Adaptive sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Sorting_network" title="Sorting network">Sorting network</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Integer_sorting" title="Integer sorting">Integer sorting</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Exchange sorts</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-even hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Bubble_sort" title="Bubble sort">Bubble sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Cocktail_sort" title="Cocktail sort">Cocktail sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Odd%E2%80%93even_sort" title="Odd–even sort">Odd–even sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Comb_sort" title="Comb sort">Comb sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Gnome_sort" title="Gnome sort">Gnome sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Quicksort" title="Quicksort">Quicksort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Stooge_sort" title="Stooge sort">Stooge sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Bogosort" title="Bogosort">Bogosort</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Selection sorts</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-odd hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Selection_sort" title="Selection sort">Selection sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Heapsort" title="Heapsort">Heapsort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Smoothsort" title="Smoothsort">Smoothsort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Cartesian_tree#Application_in_sorting" title="Cartesian tree">Cartesian tree sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Tournament_sort" title="Tournament sort">Tournament sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Cycle_sort" title="Cycle sort">Cycle sort</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Insertion sorts</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-even hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Insertion_sort" title="Insertion sort">Insertion sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Shellsort" title="Shellsort">Shellsort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Tree_sort" title="Tree sort">Tree sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Library_sort" title="Library sort">Library sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Patience_sorting" title="Patience sorting">Patience sorting</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Merge sorts</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-odd hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Merge_sort" title="Merge sort">Merge sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Polyphase_merge_sort" title="Polyphase merge sort">Polyphase merge sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Strand_sort" title="Strand sort">Strand sort</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Distribution sorts</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-even hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/American_flag_sort" title="American flag sort">American flag sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Bead_sort" title="Bead sort">Bead sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Bucket_sort" title="Bucket sort">Bucket sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Burstsort" title="Burstsort">Burstsort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Counting_sort" title="Counting sort">Counting sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Pigeonhole_sort" title="Pigeonhole sort">Pigeonhole sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Proxmap_sort" title="Proxmap sort">Proxmap sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Radix_sort" title="Radix sort">Radix sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Flashsort" title="Flashsort">Flashsort</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Concurrent sorts</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-odd hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Bitonic_sorter" title="Bitonic sorter">Bitonic sorter</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Batcher_odd%E2%80%93even_mergesort" title="Batcher odd–even mergesort">Batcher odd–even mergesort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Pairwise_sorting_network" title="Pairwise sorting network">Pairwise sorting network</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Hybrid sorts</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-even hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Timsort" title="Timsort">Timsort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Introsort" title="Introsort">Introsort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Spreadsort" title="Spreadsort">Spreadsort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/UnShuffle_sort" title="UnShuffle sort">UnShuffle sort</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/JSort" title="JSort">JSort</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Other</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-odd hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Topological_sorting" title="Topological sorting">Topological sorting</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Pancake_sorting" title="Pancake sorting">Pancake sorting</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Spaghetti_sort" title="Spaghetti sort">Spaghetti sort</a></li>
</ul>
</div>
</td>
</tr>
</tbody></table>
</td>
</tr></tbody></table>

</div>
</div>		</div>
	</div>
			<div id="footer">
			<h2 class="section_heading" id="section_footer"><button>Show</button>
		<div class="license">Wikipedia ™</div>		<span class="toggleCopyright">
			<span class="more">more</span><span class="less">less</span>
		</span>
	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Sorting_algorithm&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li>
				<span class="left"><a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span><span class="right">Images ON / <a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions/DisableImages&amp;returnto=Sorting+algorithm&amp;mobiletoken=5c89e355d2af09275b3b2ed3653e1683" title="Special:MobileOptions/DisableImages" id="imagetoggle">OFF</a></span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Sorting_algorithm&amp;action=history">contributors</a> like you<br>
				Content available under <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>			</li>
		</ul>
		<ul class="links">
			<li>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Sorting+algorithm&amp;feedbacksource=MobileFrontend">Contact</a>
			</li><li>
			<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div>
	</div>
				<!--[if gt IE 7]><!-->
		<script type="text/javascript">mw={loader:{state:function(){}}};</script>		<script src="Sorting_algorithm_files/load_002.php" type="text/javascript"></script>
<script src="Sorting_algorithm_files/load.php" type="text/javascript"></script>	<script type="text/javascript">
	window.onload = function() {
		mw.mobileFrontend.init();
	};
	</script>
	<!----><!--[endif]---->
	
	<div style="display: none; top: 598px; bottom: auto; position: absolute;" id="mf-references"><div></div><button>close</button></div></body></html>