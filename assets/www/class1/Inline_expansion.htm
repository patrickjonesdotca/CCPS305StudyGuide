<!DOCTYPE html>
<html class="jsEnabled togglingEnabled" dir="ltr" lang="en"><head>
		<title>Inline expansion - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<meta name="robots" content="noindex,nofollow">		<link rel="stylesheet" href="Inline_expansion_files/load.css" type="text/css" media="all">		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png">		<script type="text/javascript">
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-header":"This article is available in 3 languages","mobile-frontend-language-footer":"<a href=\"\/wiki\/Special:Special:MobileOptions\/Language\">Wikipedia is available in other languages.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"scriptPath":"\/w","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			document.documentElement.className = 'jsEnabled page-loading';		</script>
		<link rel="canonical" href="http://en.wikipedia.org/wiki/Inline_expansion">
	</head>
	<body class="mobile mw-mf-checkboxes">
							<div id="mw-mf-header">
					<form id="mw-mf-searchForm" action="/w/index.php" class="search_bar" method="get">
							<img alt="Logo" id="mw-mf-logo" src="Inline_expansion_files/W_logo_for_Mobile_Frontend.gif" width="35" height="22">
						<input value="Special:Search" name="title" type="hidden">
			<div id="mw-mf-sq" class="divclearable">
				<input name="search" id="mw-mf-search" size="22" autocomplete="off" maxlength="1024" class="search" placeholder="Type your search here..." type="search">
				<img src="Inline_expansion_files/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear">
			</div>
						<button id="goButton" class="goButton" type="submit">
				<img src="Inline_expansion_files/blank.gif" alt="Go" title="Go">
			</button>
					</form>
									<div class="nav" id="nav">
				<div id="mw-mf-language-selection">
		Language:<br>
		<select id="languageselection"><option value="http://en.wikipedia.org/wiki/Inline_expansion" selected="selected">English</option><option value="//de.m.wikipedia.org/wiki/Inline-Ersetzung">Deutsch</option><option value="//ja.m.wikipedia.org/wiki/%E3%82%A4%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E5%B1%95%E9%96%8B">日本語</option></select>
	</div><br>
			<a href="http://en.m.wikipedia.org/wiki/Main_Page" id="homeButton" class="button">Home</a>
			<a href="http://en.m.wikipedia.org/wiki/Special:Random" id="randomButton" class="button">Random</a>
			</div>
		</div>
				<div id="results"><ul class="suggestions-results" title="No Results"><li class="suggestions-result">Type search term above and matching article titles will appear here.</li></ul></div>
		<div class="show" id="content_wrapper">
				<div id="content">
			<h1 id="firstHeading">Inline expansion</h1>			
<p>In <a href="http://en.m.wikipedia.org/wiki/Computing" title="Computing">computing</a>, <b>inline expansion</b>, or <b>inlining</b>, is a manual or <a href="http://en.m.wikipedia.org/wiki/Compiler_optimization" title="Compiler optimization">compiler optimization</a> that replaces a function <a href="http://en.m.wikipedia.org/wiki/Call_site" title="Call site">call site</a> with the body of the <a href="http://en.m.wikipedia.org/wiki/Callee" title="Callee" class="mw-redirect">callee</a>.
 This optimization may improve time and space usage at runtime, at the 
possible cost of increasing the final size of the program (i.e. the <a href="http://en.m.wikipedia.org/wiki/Binary_file" title="Binary file">binary file</a> size).</p>
<p>Ordinarily, when a function is invoked, <a href="http://en.m.wikipedia.org/wiki/Control_flow" title="Control flow">control</a> is transferred to its definition by a <a href="http://en.m.wikipedia.org/wiki/Branch_%28computer_science%29" title="Branch (computer science)">branch</a>
 or call instruction. With inlining, control drops through directly to 
the code for the function, without a branch or call instruction. 
Inlining improves <a href="http://en.m.wikipedia.org/wiki/Algorithmic_efficiency" title="Algorithmic efficiency">performance</a> in several ways:</p>
<ul>
<li>It removes the cost of the <a href="http://en.m.wikipedia.org/wiki/Function_call" title="Function call" class="mw-redirect">function call</a> and <a href="http://en.m.wikipedia.org/wiki/Return_statement" title="Return statement">return</a> instructions, as well as any other <a href="http://en.m.wikipedia.org/wiki/Function_prologue" title="Function prologue">prologue and epilog</a> code injected into every function by the compiler.</li>
<li>Eliminating branches and keeping code that is executed close together in memory improves <a href="http://en.m.wikipedia.org/wiki/Instruction_cache" title="Instruction cache" class="mw-redirect">instruction cache</a> performance by improving <a href="http://en.m.wikipedia.org/wiki/Locality_of_reference" title="Locality of reference">locality of reference</a>.</li>
<li>Once inlining has been performed, additional intraprocedural 
optimizations become possible on the inlined function body. For example,
 a <a href="http://en.m.wikipedia.org/wiki/Constant_%28programming%29" title="Constant (programming)">constant</a> passed as an argument, can often be propagated to all instances of the matching parameter, or part of the function may be <a href="http://en.m.wikipedia.org/wiki/Loop-invariant_code_motion" title="Loop-invariant code motion">"hoisted out" of a loop</a>.</li>
</ul>
<p>The primary cost of inlining is that it tends to increase code size, 
although it does not always do so. Inlining may also decrease 
performance in some cases - for instance, multiple copies of a function 
may increase code size enough that the code no longer fits in the cache,
 resulting in more cache misses.</p>
<p>Some languages (for example, <a href="http://en.m.wikipedia.org/wiki/C_%28computer_language%29" title="C (computer language)" class="mw-redirect">C</a> and <a href="http://en.m.wikipedia.org/wiki/C%2B%2B" title="C++">C++</a>) support the <tt>inline</tt> keyword in function definitions. This keyword serves as a "hint" to the <a href="http://en.m.wikipedia.org/wiki/Compiler" title="Compiler">compiler</a>
 that it should try to inline the function. Compilers use a variety of 
mechanisms, including hints from programmers, to decide which function 
calls should be inlined.</p>
<p><a href="http://en.m.wikipedia.org/wiki/Compiler" title="Compiler">Compilers</a> usually implement <a href="http://en.m.wikipedia.org/wiki/Statement_%28computer_science%29" title="Statement (computer science)">statements</a> with inlining. Loop conditions and loop bodies need <a href="http://en.m.wikipedia.org/wiki/Lazy_evaluation" title="Lazy evaluation">lazy evaluation</a>.
 This property is fulfilled when the code to compute loop conditions and
 loop bodies is inlined. Performance considerations are another reason 
to inline statements.</p>
<p>In the context of <a href="http://en.m.wikipedia.org/wiki/Functional_programming_language" title="Functional programming language" class="mw-redirect">functional programming languages</a>, inline expansion is usually followed by the <a href="http://en.m.wikipedia.org/wiki/Lambda_calculus" title="Lambda calculus">beta-reduction</a> transformation.</p>
<p>A programmer might inline a function manually through <a href="http://en.m.wikipedia.org/wiki/Copy_and_paste_programming" title="Copy and paste programming">copy and paste programming</a>, as a one-time operation on the <a href="http://en.m.wikipedia.org/wiki/Source_code" title="Source code">source code</a>.
 However, other methods of controlling inlining (see below) are 
preferable, because they do not precipitate bugs arising when the 
programmer overlooks a (possibly modified) duplicated version of the 
original function body, while fixing a bug in the inlined function.</p>
<div class="section"><h2 class="section_heading" id="section_1"><button>Show</button><span id="Implementation">Implementation</span></h2><div class="content_block" id="content_1">
<p>Once the <a href="http://en.m.wikipedia.org/wiki/Compiler" title="Compiler">compiler</a>
 has decided to inline a particular function, performing the inlining 
operation itself is usually simple. Depending on whether the compiler 
inlines functions across code in different languages, the compiler can 
do inlining on either a high-level <a href="http://en.m.wikipedia.org/wiki/Intermediate_representation" title="Intermediate representation" class="mw-redirect">intermediate representation</a> (like <a href="http://en.m.wikipedia.org/wiki/Abstract_syntax_tree" title="Abstract syntax tree">abstract syntax trees</a>) or a low-level intermediate representation. In either case, the compiler simply computes the <a href="http://en.m.wikipedia.org/wiki/Parameter" title="Parameter">arguments</a>,
 stores them in variables corresponding to the function's arguments, and
 then inserts the body of the function at the call site.</p>
<p><a href="http://en.m.wikipedia.org/wiki/Linker_%28computing%29" title="Linker (computing)">Linkers</a>,
 as well as compilers, can also do function inlining. When a linker 
inlines functions, it may inline functions whose source is not 
available, such as library functions (see <a href="http://en.m.wikipedia.org/wiki/Link-time_optimization" title="Link-time optimization">link-time optimization</a>). A <a href="http://en.m.wikipedia.org/wiki/Run-time_system" title="Run-time system">run-time system</a> can inline function as well. <a href="http://en.m.wikipedia.org/wiki/Run-time" title="Run-time" class="mw-redirect">Run-time</a> inlining can use dynamic profiling information to make better decisions about which functions to inline, as in the <a href="http://en.m.wikipedia.org/wiki/Java_Hotspot_compiler" title="Java Hotspot compiler" class="mw-redirect">Java Hotspot compiler</a>.</p>
<p>Here is a simple example of inline expansion performed "by hand" at the source level in the <a href="http://en.m.wikipedia.org/wiki/C_%28programming_language%29" title="C (programming language)">C programming language</a>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1"><span class="kw4">int</span> pred<span class="br0">(</span><span class="kw4">int</span> x<span class="br0">)</span> <span class="br0">{</span>
    <span class="kw1">if</span> <span class="br0">(</span>x <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span>
       <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
    <span class="kw1">else</span>
       <span class="kw1">return</span> x <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<p><i>Before inlining:</i></p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1"> <span class="kw4">int</span> f<span class="br0">(</span><span class="kw4">int</span> y<span class="br0">)</span> <span class="br0">{</span>
     <span class="kw1">return</span> pred<span class="br0">(</span>y<span class="br0">)</span> <span class="sy0">+</span> pred<span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span> <span class="sy0">+</span> pred<span class="br0">(</span>y<span class="sy0">+</span><span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span>
 <span class="br0">}</span>
</pre>
</div>
</div>
<p><i>After inlining:</i></p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1"><span class="kw4">int</span> f<span class="br0">(</span><span class="kw4">int</span> y<span class="br0">)</span> <span class="br0">{</span>
    <span class="kw4">int</span> temp <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">(</span>y   <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span> temp <span class="sy0">+=</span> <span class="nu0">0</span><span class="sy0">;</span> <span class="kw1">else</span> temp <span class="sy0">+=</span> y       <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span> <span class="coMULTI">/* (1) */</span>
    <span class="kw1">if</span> <span class="br0">(</span><span class="nu0">0</span>   <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span> temp <span class="sy0">+=</span> <span class="nu0">0</span><span class="sy0">;</span> <span class="kw1">else</span> temp <span class="sy0">+=</span> <span class="nu0">0</span>       <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span> <span class="coMULTI">/* (2) */</span>
    <span class="kw1">if</span> <span class="br0">(</span>y<span class="sy0">+</span><span class="nu0">1</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span> temp <span class="sy0">+=</span> <span class="nu0">0</span><span class="sy0">;</span> <span class="kw1">else</span> temp <span class="sy0">+=</span> <span class="br0">(</span>y <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span> <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span> <span class="coMULTI">/* (3) */</span>
    <span class="kw1">return</span> temp<span class="sy0">;</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<p>Note that this is only an example. In an actual C application, it 
would be preferable to use an inlining language feature such as <a href="http://en.m.wikipedia.org/wiki/Parameterized_macro" title="Parameterized macro">parameterized macros</a> or <a href="http://en.m.wikipedia.org/wiki/Inline_function" title="Inline function">inline functions</a> to tell the compiler to transform the code in this way. The next section lists ways to optimize this code.</p>
<h3> <span class="mw-headline" id="Inlining_by_Assembly_macro_expansion">Inlining by Assembly macro expansion</span>
</h3>
<p><a href="http://en.m.wikipedia.org/wiki/Macro_assembler#Macros" title="Macro assembler" class="mw-redirect">Assembler macros</a>
 provide an alternative approach to inlining whereby a sequence of 
instructions can normally be generated inline by macro expansion from a 
single macro source statement (with zero or more parameters).<sup id="cite_ref-0" class="reference"><a href="#cite_note-0"><span>[</span>1<span>]</span></a></sup> One of the parameters might be an option to alternatively generate a one-time separate <a href="http://en.m.wikipedia.org/wiki/Subroutine" title="Subroutine">subroutine</a> containing the sequence and processed instead by an inlined call to the function. Example:</p>
<pre>MOVE FROM=array1,TO=array2,INLINE=NO
</pre>
</div><a id="anchor_1" href="#section_1" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_2"><button>Show</button><span id="Benefits">Benefits</span></h2><div class="content_block" id="content_2">
<p>Inline expansion itself is an optimization, since it eliminates overhead from calls, but it is much more important as an <a href="http://en.m.wikipedia.org/wiki/Enabling_transformation" title="Enabling transformation">enabling transformation</a>. That is, once the compiler expands a function body in the context of its call site—often with arguments that may be fixed <a href="http://en.m.wikipedia.org/wiki/Constant_%28mathematics%29" title="Constant (mathematics)">constants</a> -- it may be able to do a variety of transformations that were not possible before. For example, a <a href="http://en.m.wikipedia.org/wiki/Conditional_branch" title="Conditional branch" class="mw-redirect">conditional branch</a> may turn out to be always true or always false at this particular call site. This in turn may enable <a href="http://en.m.wikipedia.org/wiki/Dead_code_elimination" title="Dead code elimination">dead code elimination</a>, <a href="http://en.m.wikipedia.org/wiki/Loop-invariant_code_motion" title="Loop-invariant code motion">loop-invariant code motion</a>, or <a href="http://en.m.wikipedia.org/wiki/Induction_variable_elimination" title="Induction variable elimination" class="mw-redirect">induction variable elimination</a>.</p>
<p>In the C example in the previous section, optimization opportunities abound. The compiler may follow this sequence of steps:</p>
<ul>
<li>The <code>temp += 0</code> statements in the lines marked (1), (2) and (3) do nothing. The compiler can remove them.</li>
<li>The condition <code>0 == 0</code> is always true, so the compiler can replace the line marked (2) with the consequent, <code>temp += 0</code> (which does nothing).</li>
<li>The compiler can rewrite the condition <code>y+1 == 0</code> to <code>y == -1</code>.</li>
<li>The compiler can reduce the expression <code>(y + 1) - 1</code> to <code>y</code> (assuming wraparound overflow semantics)</li>
<li>The expressions <code>y</code> and <code>y+1</code> cannot both equal zero. This lets the compiler eliminate one test.</li>
</ul>
<p>The new function looks like:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1"><span class="kw4">int</span> f<span class="br0">(</span><span class="kw4">int</span> y<span class="br0">)</span> <span class="br0">{</span>
    <span class="kw1">if</span> <span class="br0">(</span>y <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span>
        <span class="kw1">return</span> y<span class="sy0">;</span>            <span class="coMULTI">/* or return 0 */</span>
    <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">(</span>y <span class="sy0">==</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span>
        <span class="kw1">return</span> y <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>        <span class="coMULTI">/* or return -2 */</span>
    <span class="kw1">else</span>
        <span class="kw1">return</span> y <span class="sy0">+</span> y <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre>
</div>
</div>
</div><a id="anchor_2" href="#section_2" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_3"><button>Show</button><span id="Problems">Problems</span></h2><div class="content_block" id="content_3">
<p>Replacing a call site with an expanded function body can worsen <a href="http://en.m.wikipedia.org/wiki/Algorithmic_efficiency" title="Algorithmic efficiency">performance</a> in several ways&nbsp;:</p>
<ul>
<li>In applications where <a href="http://en.m.wikipedia.org/wiki/Optimization_%28computer_science%29" title="Optimization (computer science)" class="mw-redirect">code size</a> is more important than speed, such as many <a href="http://en.m.wikipedia.org/wiki/Embedded_system" title="Embedded system">embedded systems</a>, inlining is usually disadvantageous except for very small functions, such as trivial <a href="http://en.m.wikipedia.org/wiki/Mutator_method" title="Mutator method">mutator methods</a>.</li>
<li>The increase in code size may cause a small, critical section of code to no longer fit in the <a href="http://en.m.wikipedia.org/wiki/CPU_cache" title="CPU cache">cache</a>, causing cache misses and slowdown.</li>
<li>The added variables from the inlined procedure may consume additional <a href="http://en.m.wikipedia.org/wiki/Processor_register" title="Processor register">registers</a>, and in an area where <a href="http://en.m.wikipedia.org/wiki/Register_pressure" title="Register pressure" class="mw-redirect">register pressure</a> is already high this may force spilling, which causes additional RAM accesses.</li>
<li>A language specification may allow a program to make additional 
assumptions about arguments to procedures that it can no longer make 
after the procedure is inlined.</li>
<li>If code size is increased too much, resource constraints such as RAM
 size may be exceeded, leading to programs that either cannot be run or 
that cause <a href="http://en.m.wikipedia.org/wiki/Thrashing_%28computer_science%29" title="Thrashing (computer science)">thrashing</a>.
 Today, this is unlikely to be an issue with desktop or server computers
 except with very aggressive inlining, but it can still be an issue for <a href="http://en.m.wikipedia.org/wiki/Embedded_system" title="Embedded system">embedded systems</a>.</li>
</ul>
<p>Typically, compiler developers keep these issues in mind, and incorporate <a href="http://en.m.wikipedia.org/wiki/Heuristics" title="Heuristics" class="mw-redirect">heuristics</a>
 into their compilers that choose which functions to inline so as to 
improve performance, rather than worsening it, in most cases.</p>
</div><a id="anchor_3" href="#section_3" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_4"><button>Show</button><span id="Limitations">Limitations</span></h2><div class="content_block" id="content_4">
<p>It is not always possible to inline a subroutine. Consider the case 
of a subroutine that calls itself recursively until it receives a 
particular piece of input data from a <a href="http://en.m.wikipedia.org/wiki/Computer_peripheral" title="Computer peripheral" class="mw-redirect">peripheral</a>.
 The compiler cannot generally determine when this process will end, so 
it would never finish inlining if it was designed to inline every single
 subroutine invocation. Thus, compilers for languages which support 
recursion must have restrictions on what they will automatically choose 
to inline.</p>
</div><a id="anchor_4" href="#section_4" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_5"><button>Show</button><span id="Selection_methods_and_language_support">Selection methods and language support</span></h2><div class="content_block" id="content_5">
<p>Many compilers aggressively inline functions wherever it is beneficial to do so. Although it can lead to larger <a href="http://en.m.wikipedia.org/wiki/Executable" title="Executable">executables</a>,
 aggressive inlining has nevertheless become more and more desirable as 
memory capacity has increased faster than CPU speed. Inlining is a 
critical optimization in <a href="http://en.m.wikipedia.org/wiki/Functional_programming" title="Functional programming">functional languages</a> and <a href="http://en.m.wikipedia.org/wiki/Object-oriented_programming_language" title="Object-oriented programming language" class="mw-redirect">object-oriented programming languages</a>, which rely on it to provide enough context for their typically small functions to make classical optimizations effective.</p>
</div><a id="anchor_5" href="#section_5" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_6"><button>Show</button><span id="See_also">See also</span></h2><div class="content_block" id="content_6">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Algorithmic_efficiency" title="Algorithmic efficiency">Algorithmic efficiency</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Linker_%28computing%29" title="Linker (computing)">Linker (computing)</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Macro_%28computer_science%29" title="Macro (computer science)">Macro</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Partial_evaluation" title="Partial evaluation">Partial evaluation</a></li>
</ul>
</div><a id="anchor_6" href="#section_6" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_7"><button>Show</button><span id="External_links">External links</span></h2><div class="content_block" id="content_7">
<table class="metadata mbox-small plainlinks" style="border: 1px solid rgb(170, 170, 170); background-color: rgb(249, 249, 249);"><tbody><tr>
<td class="mbox-image"><img alt="" src="Inline_expansion_files/37px-Wiktionary-logo-en.png" width="37" height="40"></td>
<td class="mbox-text" style="">Look up <i><b><a class="external text" href="http://en.wiktionary.org/wiki/inlining">inlining</a></b></i> in Wiktionary, the free dictionary.</td>
</tr></tbody></table>
<ul>
<li>"<a rel="nofollow" class="external text" href="http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.114.1036">Eliminating Virtual Function Calls in C++ Programs</a>" by <span class="new" title="Gerald Aigner (page does not exist)">Gerald Aigner</span> and <a href="http://en.m.wikipedia.org/wiki/Urs_H%C3%B6lzle" title="Urs Hölzle">Urs Hölzle</a>
</li>
<li>"<a rel="nofollow" class="external text" href="http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.187.7208">Reducing Indirect Function Call Overhead In C++ Programs</a>" by <span class="new" title="Brad Calder (page does not exist)">Brad Calder</span> and <span class="new" title="Dirk Grumwald (page does not exist)">Dirk Grumwald</span>
</li>
<li>"<a rel="nofollow" class="external text" href="http://research.microsoft.com/%7Esimonpj/Papers/inlining/">Secrets of the Glasgow Haskell Compiler Inliner</a>" by <a href="http://en.m.wikipedia.org/wiki/Simon_Peyton_Jones" title="Simon Peyton Jones">Simon Peyton Jones</a> and <span class="new" title="Simon Marlow (page does not exist)">Simon Marlow</span>
</li>
<li><a rel="nofollow" class="external text" href="http://www.cs.arizona.edu/alto/Doc/alto.html">ALTO - A Link-Time Optimizer for the DEC Alpha</a></li>
<li>Article "<a rel="nofollow" class="external text" href="http://www.iecc.com/linker/linker11.html">Advanced techniques</a>" by <a href="http://en.m.wikipedia.org/wiki/John_R._Levine" title="John R. Levine">John R. Levine</a>
</li>
<li>Article "<a rel="nofollow" class="external text" href="http://home.pipeline.com/%7Ehbaker1/Inlines.html">Inlining Semantics for Subroutines which are Recursive</a>" by <span class="new" title="Henry G. Baker (page does not exist)">Henry G. Baker</span>
</li>
<li>Article "<a rel="nofollow" class="external text" href="http://codeproject.com/tips/gloption.asp">Whole Program Optimization with Visual C++ .NET</a>" by <span class="new" title="Brandon Bray (page does not exist)">Brandon Bray</span>
</li>
</ul>
</div><a id="anchor_7" href="#section_7" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_8"><button>Show</button><span id="References">References</span></h2><div class="content_block" id="content_8">
<div class="reflist" style="list-style-type: decimal;">
<ol class="references">
<li id="cite_note-0">
<span class="mw-cite-backlink"><b><a href="#cite_ref-0">^</a></b></span> <span class="reference-text"><a class="external free" href="http://en.wikipedia.org/wiki/Assembly_language#Macros">http://en.wikipedia.org/wiki/Assembly_language#Macros</a></span>
</li>
</ol>
</div>





</div>
</div>		</div>
	</div>
			<div id="footer">
			<h2 class="section_heading" id="section_footer"><button>Show</button>
		<div class="license">Wikipedia ™</div>		<span class="toggleCopyright">
			<span class="more">more</span><span class="less">less</span>
		</span>
	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Inline_expansion&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li>
				<span class="left"><a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span><span class="right">Images ON / <a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions/DisableImages&amp;returnto=Inline+expansion&amp;mobiletoken=dc83e2c6ae93b1fadc6882196f529c1b" title="Special:MobileOptions/DisableImages" id="imagetoggle">OFF</a></span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Inline_expansion&amp;action=history">contributors</a> like you<br>
				Content available under <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>			</li>
		</ul>
		<ul class="links">
			<li>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Inline+expansion&amp;feedbacksource=MobileFrontend">Contact</a>
			</li><li>
			<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div>
	</div>
				<!--[if gt IE 7]><!-->
		<script type="text/javascript">mw={loader:{state:function(){}}};</script>		<script src="Inline_expansion_files/load_002.php" type="text/javascript"></script>
<script src="Inline_expansion_files/load.php" type="text/javascript"></script>	<script type="text/javascript">
	window.onload = function() {
		mw.mobileFrontend.init();
	};
	</script>
	<!----><!--[endif]---->
	
	<div style="display: none;" id="mf-references"><div></div><button>close</button></div></body></html>