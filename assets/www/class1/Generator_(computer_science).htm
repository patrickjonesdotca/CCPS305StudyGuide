<!DOCTYPE html>
<html class="jsEnabled togglingEnabled" dir="ltr" lang="en"><head>
		<title>Generator (computer programming) - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<meta name="robots" content="noindex,nofollow">		<link rel="stylesheet" href="Generator_%28computer_science%29_files/load.css" type="text/css" media="all">		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png">		<script type="text/javascript">
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-header":"This article is available in 7 languages","mobile-frontend-language-footer":"<a href=\"\/wiki\/Special:Special:MobileOptions\/Language\">Wikipedia is available in other languages.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"scriptPath":"\/w","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			document.documentElement.className = 'jsEnabled page-loading';		</script>
		<link rel="canonical" href="http://en.wikipedia.org/wiki/Generator_%28computer_programming%29">
	</head>
	<body class="mobile mw-mf-checkboxes">
							<div id="mw-mf-header">
					<form id="mw-mf-searchForm" action="/w/index.php" class="search_bar" method="get">
							<img alt="Logo" id="mw-mf-logo" src="Generator_%28computer_science%29_files/W_logo_for_Mobile_Frontend.gif" width="35" height="22">
						<input value="Special:Search" name="title" type="hidden">
			<div id="mw-mf-sq" class="divclearable">
				<input name="search" id="mw-mf-search" size="22" autocomplete="off" maxlength="1024" class="search" placeholder="Type your search here..." type="search">
				<img src="Generator_%28computer_science%29_files/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear">
			</div>
						<button id="goButton" class="goButton" type="submit">
				<img src="Generator_%28computer_science%29_files/blank.gif" alt="Go" title="Go">
			</button>
					</form>
									<div class="nav" id="nav">
				<div id="mw-mf-language-selection">
		Language:<br>
		<select id="languageselection"><option value="http://en.wikipedia.org/wiki/Generator_(computer_science)" selected="selected">English</option><option value="//fr.m.wikipedia.org/wiki/G%C3%A9n%C3%A9rateur_(informatique)">français</option><option value="//it.m.wikipedia.org/wiki/Generatore_(informatica)">italiano</option><option value="//nl.m.wikipedia.org/wiki/Generator_(informatica)">Nederlands</option><option value="//ja.m.wikipedia.org/wiki/%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BF_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)">日本語</option><option value="//pl.m.wikipedia.org/wiki/Generator_(informatyka)">polski</option><option value="//pt.m.wikipedia.org/wiki/Gerador_(ci%C3%AAncia_da_computa%C3%A7%C3%A3o)">português</option></select>
	</div><br>
			<a href="http://en.m.wikipedia.org/wiki/Main_Page" id="homeButton" class="button">Home</a>
			<a href="http://en.m.wikipedia.org/wiki/Special:Random" id="randomButton" class="button">Random</a>
			</div>
		</div>
				<div id="results"><ul class="suggestions-results" title="No Results"><li class="suggestions-result">Type search term above and matching article titles will appear here.</li></ul></div>
		<div class="show" id="content_wrapper">
				<div id="content">
			<h1 id="firstHeading">Generator (computer programming)</h1>			
<div class="dablink">For other uses, see <a href="http://en.m.wikipedia.org/wiki/Generator_%28disambiguation%29" title="Generator (disambiguation)" class="mw-redirect">Generator (disambiguation)</a>.</div>
<table class="metadata plainlinks ambox ambox-content ambox-Refimprove" style=""><tbody><tr>
<td class="mbox-image">
<div style="width: 52px;"><img alt="" src="Generator_%28computer_science%29_files/50px-Question_book-new.png" width="50" height="39"></div>
</td>
<td class="mbox-text" style=""><span class="mbox-text-span">This article <b>needs additional <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citing_sources#Inline_citations" title="Wikipedia:Citing sources">citations</a> for <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">verification</a></b>. <span class="hide-when-compact">Please help <a class="external text" href="http://en.wikipedia.org/w/index.php?title=Generator_%28computer_programming%29&amp;action=edit">improve this article</a> by adding citations to <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Identifying_reliable_sources" title="Wikipedia:Identifying reliable sources">reliable sources</a>. Unsourced material may be <a href="http://en.m.wikipedia.org/wiki/Template:Citation_needed" title="Template:Citation needed">challenged</a> and <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Verifiability#Burden_of_evidence" title="Wikipedia:Verifiability">removed</a>.</span> <small><i>(July 2007)</i></small> </span></td>
</tr></tbody></table>
<p>In <a href="http://en.m.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a>, a <b>generator</b> is a special <a href="http://en.m.wikipedia.org/wiki/Subroutine" title="Subroutine">routine</a> that can be used to control the <a href="http://en.m.wikipedia.org/wiki/Iteration" title="Iteration">iteration</a> behaviour of a <a href="http://en.m.wikipedia.org/wiki/Control_flow#Loops" title="Control flow">loop</a>.
 A generator is very similar to a function that returns an array, in 
that a generator has parameters, can be called, and generates a sequence
 of values. However, instead of building an array containing all the 
values and returning them all at once, a generator yields the values one
 at a time, which requires less memory and allows the caller to get 
started processing the first few values immediately. In short, a 
generator <i>looks like</i> a function but <i>behaves like</i> an <a href="http://en.m.wikipedia.org/wiki/Iterator" title="Iterator">iterator</a>.</p>
<p>Generators can be implemented in terms of more expressive <a href="http://en.m.wikipedia.org/wiki/Control_flow" title="Control flow">control flow</a> constructs, such as <a href="http://en.m.wikipedia.org/wiki/Coroutine" title="Coroutine">coroutines</a> or first-class <a href="http://en.m.wikipedia.org/wiki/Continuation" title="Continuation">continuations</a>.<sup id="cite_ref-0" class="reference"><a href="#cite_note-0"><span>[</span>1<span>]</span></a></sup></p>
<div class="section"><h2 class="section_heading" id="section_1"><button>Show</button><span id="History">History</span></h2><div class="content_block" id="content_1">
<p>Generators first appeared in <a href="http://en.m.wikipedia.org/wiki/CLU_programming_language" title="CLU programming language" class="mw-redirect">CLU</a> (1975),<sup id="cite_ref-1" class="reference"><a href="#cite_note-1"><span>[</span>2<span>]</span></a></sup> were a prominent feature in the string manipulation language <a href="http://en.m.wikipedia.org/wiki/Icon_%28programming_language%29" title="Icon (programming language)">Icon</a> (1977) and are now available in <a href="http://en.m.wikipedia.org/wiki/Python_%28programming_language%29" title="Python (programming language)">Python</a>,<sup id="cite_ref-2" class="reference"><a href="#cite_note-2"><span>[</span>3<span>]</span></a></sup><a href="http://en.m.wikipedia.org/wiki/C_Sharp_%28programming_language%29" title="C Sharp (programming language)">C#</a>,<sup id="cite_ref-3" class="reference"><a href="#cite_note-3"><span>[</span>4<span>]</span></a></sup><a href="http://en.m.wikipedia.org/wiki/JavaScript" title="JavaScript">JavaScript</a>,<sup id="cite_ref-4" class="reference"><a href="#cite_note-4"><span>[</span>5<span>]</span></a></sup><a href="http://en.m.wikipedia.org/wiki/Ruby_%28programming_language%29" title="Ruby (programming language)">Ruby</a> and other languages. In CLU and C#, generators are called <i>iterators</i>, and in Ruby, <i>enumerators</i>.</p>
</div><a id="anchor_1" href="#section_1" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_2"><button>Show</button><span id="Uses">Uses</span></h2><div class="content_block" id="content_2">
<p>Generators are usually <a href="http://en.m.wikipedia.org/wiki/Execution_%28computers%29" title="Execution (computers)" class="mw-redirect">invoked</a> inside loops.<sup id="cite_ref-icon_5-0" class="reference"><a href="#cite_note-icon-5"><span>[</span>6<span>]</span></a></sup> The first time that a generator invocation is reached in a loop, an iterator <a href="http://en.m.wikipedia.org/wiki/Object_%28computer_science%29" title="Object (computer science)">object</a> is created that encapsulates the state of the generator routine at its beginning, with arguments bound to the corresponding <a href="http://en.m.wikipedia.org/wiki/Parameter_%28computer_science%29" title="Parameter (computer science)" class="mw-redirect">parameters</a>. The generator's body is then executed in the context of that iterator until a special <i>yield</i> action is encountered; at that time, the value provided with the <i>yield</i>
 action is used as the value of the invocation expression. The next time
 the same generator invocation is reached in a subsequent iteration, the
 execution of the generator's body is resumed after the <i>yield</i> action, until yet another <i>yield</i> action is encountered. In addition to the <i>yield</i> action, execution of the generator body can also be terminated by a <i>finish</i> action, at which time the innermost loop enclosing the generator invocation is terminated.</p>
<p>Because generators compute their yielded values only on demand, they 
are useful for representing sequences that would be expensive or 
impossible to compute at once. These include e.g. infinite sequences and
 live data streams.</p>
<p>In the presence of generators, loop constructs of a language can be 
reduced into a single loop ... end loop construct; all the usual loop 
constructs can then be comfortably simulated by using suitable 
generators in the right way.</p>
<h3> <span class="mw-headline" id="Python">Python</span>
</h3>
<p>An example Python generator:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="python source-python">
<pre class="de1"><span class="kw1">def</span> countfrom<span class="br0">(</span>n<span class="br0">)</span>:
    <span class="kw1">while</span> <span class="kw2">True</span>:
        <span class="kw1">yield</span> n
        n +<span class="sy0">=</span> <span class="nu0">1</span>
 
<span class="co1"># Example use: printing out the integers from 10 to 20.</span>
<span class="co1"># Note that this iteration terminates normally, despite </span>
<span class="co1"># countfrom() being written as an infinite loop.</span>
 
<span class="kw1">for</span> i <span class="kw1">in</span> countfrom<span class="br0">(</span><span class="nu0">10</span><span class="br0">)</span>:
    <span class="kw1">if</span> i <span class="sy0">&lt;=</span> <span class="nu0">20</span>:
        <span class="kw1">print</span><span class="br0">(</span>i<span class="br0">)</span>
    <span class="kw1">else</span>:
        <span class="kw1">break</span>
 
<span class="co1"># Another generator, which produces prime numbers indefinitely as needed.</span>
 
<span class="kw1">def</span> primes<span class="br0">(</span><span class="br0">)</span>:
    <span class="kw1">yield</span> <span class="nu0">2</span>
    n <span class="sy0">=</span> <span class="nu0">3</span>
    p <span class="sy0">=</span> <span class="br0">[</span><span class="br0">]</span>
    <span class="kw1">while</span> <span class="kw2">True</span>:
        <span class="co1">#This works in Python 2.5+ </span>
        <span class="kw1">if</span> <span class="kw1">not</span> <span class="kw2">any</span><span class="br0">(</span> n % f <span class="sy0">==</span> <span class="nu0">0</span> <span class="kw1">for</span> f <span class="kw1">in</span> 
                     <span class="kw3">itertools</span>.<span class="me1">takewhile</span><span class="br0">(</span><span class="kw1">lambda</span> f: f*f <span class="sy0">&lt;=</span> n<span class="sy0">,</span> p<span class="br0">)</span> <span class="br0">)</span>: 
            <span class="kw1">yield</span> n
            p.<span class="me1">append</span><span class="br0">(</span> n <span class="br0">)</span>
        n +<span class="sy0">=</span> <span class="nu0">2</span>
</pre>
</div>
</div>
<p>In Python, a generator can be thought of as an <a href="http://en.m.wikipedia.org/wiki/Iterator" title="Iterator">iterator</a> that contains a frozen <a href="http://en.m.wikipedia.org/wiki/Stack_frame" title="Stack frame" class="mw-redirect">stack frame</a>. Whenever the iterator's <code>next()</code> method is called, Python resumes the frozen frame, which executes normally until the next <code>yield</code> statement is reached. The generator's frame is then frozen again, and the yielded value is returned to the caller.</p>
<p>PEP 380 (implemented in Python 3.3) adds the <tt>yield from</tt> expression, allowing a generator to delegate part of its operations to another generator<sup id="cite_ref-pep380_6-0" class="reference"><a href="#cite_note-pep380-6"><span>[</span>7<span>]</span></a></sup>.</p>
<h4> <span class="mw-headline" id="Generator_Expressions">Generator Expressions</span>
</h4>
<p>Python has a syntax modeled on that of <a href="http://en.m.wikipedia.org/wiki/List_comprehension" title="List comprehension">list comprehensions</a>,
 called a generator expression that aids in the creation of generators. 
The following extends the example above by using a generator expression 
to compute squares from the countfrom generator function:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="python source-python">
<pre class="de1">squares <span class="sy0">=</span> <span class="br0">(</span> n*n  <span class="kw1">for</span> n <span class="kw1">in</span> countfrom<span class="br0">(</span><span class="nu0">2</span><span class="br0">)</span> <span class="br0">)</span>
 
<span class="kw1">for</span> j <span class="kw1">in</span> squares:
    <span class="kw1">if</span> j <span class="sy0">&lt;=</span> <span class="nu0">20</span>:
        <span class="kw1">print</span><span class="br0">(</span>j<span class="br0">)</span>
    <span class="kw1">else</span>:
        <span class="kw1">break</span>
</pre>
</div>
</div>
<h3> <span class="mw-headline" id="Icon">Icon</span>
</h3>
<p>Every expression (including loops) is a generator. Printing squares from 0 to 20 can be achieved by writing</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">   local squares<span class="sy0">,</span> j
   squares <span class="sy0">:=</span> create <span class="br0">(</span>seq<span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span> ^ <span class="nu0">2</span><span class="br0">)</span>
   every j <span class="sy0">:=</span> |@squares <span class="kw1">do</span>
      <span class="kw1">if</span> j &lt;<span class="sy0">=</span> <span class="nu0">20</span> <span class="kw1">then</span>
         <span class="kw3">write</span><span class="br0">(</span>j<span class="br0">)</span>
      <span class="kw1">else</span>
         <span class="kw1">break</span>
</pre>
</div>
</div>
<h3> <span class="mw-headline" id="C.23">C#</span>
</h3>
<p>An example C# 2.0 generator (the <code>yield</code> is available since C# version 2.0): Both of these examples utilise Generics, but this is not required.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="csharp source-csharp">
<pre class="de1"><span class="co1">// Method that takes an iterable input (possibly an array)</span>
<span class="co1">// and returns all even numbers.</span>
<span class="kw1">public</span> <span class="kw1">static</span> IEnumerable<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span> GetEven<span class="br0">(</span>IEnumerable<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span> numbers<span class="br0">)</span> <span class="br0">{</span>
    <span class="kw1">foreach</span> <span class="br0">(</span><span class="kw4">int</span> i <span class="kw1">in</span> numbers<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw1">if</span> <span class="br0">(</span><span class="br0">(</span>i <span class="sy0">%</span> <span class="nu0">2</span><span class="br0">)</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span> <span class="br0">{</span>
            <span class="kw1">yield</span> <span class="kw1">return</span> i<span class="sy0">;</span>
        <span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<p>It is possible to use multiple <code>yield return</code> statements and they are applied in sequence on each iteration:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="csharp source-csharp">
<pre class="de1"><span class="kw1">public</span> <span class="kw4">class</span> CityCollection <span class="sy0">:</span> IEnumerable<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span> <span class="br0">{</span>
   <span class="kw1">public</span> IEnumerator<span class="sy0">&lt;</span><span class="kw4">string</span><span class="sy0">&gt;</span> GetEnumerator<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
      <span class="kw1">yield</span> <span class="kw1">return</span> <span class="st0">"New York"</span><span class="sy0">;</span>
      <span class="kw1">yield</span> <span class="kw1">return</span> <span class="st0">"Paris"</span><span class="sy0">;</span>
      <span class="kw1">yield</span> <span class="kw1">return</span> <span class="st0">"London"</span><span class="sy0">;</span>
   <span class="br0">}</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<h3> <span class="mw-headline" id="XL">XL</span>
</h3>
<p>In <a href="http://en.m.wikipedia.org/wiki/XL_%28programming_language%29" title="XL (programming language)">XL</a>, iterators are the basis of 'for' loops:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">import IO <span class="sy0">=</span> XL.<span class="me1">UI</span>.<span class="me1">CONSOLE</span>
 
iterator IntegerIterator <span class="br0">(</span><span class="kw1">var</span> out Counter <span class="sy0">:</span> <span class="kw4">integer</span>; Low<span class="sy0">,</span> High <span class="sy0">:</span> <span class="kw4">integer</span><span class="br0">)</span> written Counter <span class="kw1">in</span> Low..<span class="me1">High</span> is
    Counter <span class="sy0">:=</span> Low
    <span class="kw1">while</span> Counter &lt;<span class="sy0">=</span> High loop
        yield
        Counter <span class="sy0">+=</span> <span class="nu0">1</span>
 
<span class="co1">// Note that I needs not be declared, because declared 'var out' in the iterator</span>
<span class="co1">// An implicit declaration of I as an integer is therefore made here</span>
<span class="kw1">for</span> I <span class="kw1">in</span> <span class="nu0">1</span>..<span class="nu0">5</span> loop
   IO.<span class="kw3">WriteLn</span> <span class="st0">"I="</span><span class="sy0">,</span> I
</pre>
</div>
</div>
<h3> <span class="mw-headline" id="Racket">Racket</span>
</h3>
<p><a href="http://en.m.wikipedia.org/wiki/Racket_%28programming_language%29" title="Racket (programming language)">Racket</a> provides several related facilities for generators. First, its for-loop forms work with <i>sequences</i>, which are a kind of a producer:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="scheme source-scheme">
<pre class="de1"><span class="br0">(</span>for <span class="br0">(</span><span class="br0">[</span>i <span class="br0">(</span>in<span class="sy0">-</span>range <span class="nu0">10</span> <span class="nu0">20</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span>
  <span class="br0">(</span>printf <span class="st0">"i = ~s<span class="es0">\n</span>"</span> i<span class="br0">)</span><span class="br0">)</span>
</pre>
</div>
</div>
<p>and these sequences are also first-class values:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="scheme source-scheme">
<pre class="de1"><span class="br0">(</span><span class="kw1">define</span> <span class="nu0">10</span><span class="sy0">-</span>to<span class="sy0">-</span><span class="nu0">20</span> <span class="br0">(</span>in<span class="sy0">-</span>range <span class="nu0">10</span> <span class="nu0">20</span><span class="br0">)</span><span class="br0">)</span>
<span class="br0">(</span>for <span class="br0">(</span><span class="br0">[</span>i <span class="nu0">10</span><span class="sy0">-</span>to<span class="sy0">-</span><span class="nu0">20</span><span class="br0">]</span><span class="br0">)</span>
  <span class="br0">(</span>printf <span class="st0">"i = ~s<span class="es0">\n</span>"</span> i<span class="br0">)</span><span class="br0">)</span>
</pre>
</div>
</div>
<p>Some sequences are implemented imperatively (with private state 
variables) and some are implemented as (possibly infinite) lazy lists. 
Also, new struct definitions can have a property that specifies how they
 can be used as sequences.</p>
<p>But more directly, Racket comes with a generator library for a more traditional generator specification. For example,</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="scheme source-scheme">
<pre class="de1">#lang racket
<span class="br0">(</span>require racket<span class="sy0">/</span>generator<span class="br0">)</span>
<span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span>ints<span class="sy0">-</span>from from<span class="br0">)</span>
  <span class="br0">(</span>generator <span class="br0">(</span><span class="br0">)</span>
    <span class="br0">(</span>for <span class="br0">(</span><span class="br0">[</span>i <span class="br0">(</span>in<span class="sy0">-</span>naturals from<span class="br0">)</span><span class="br0">]</span><span class="br0">)</span> <span class="co1">; infinite sequence of integers from 0</span>
      <span class="br0">(</span>yield i<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
<span class="br0">(</span><span class="kw1">define</span> g <span class="br0">(</span>ints<span class="sy0">-</span>from <span class="nu0">10</span><span class="br0">)</span><span class="br0">)</span>
<span class="br0">(</span><span class="kw1">list</span> <span class="br0">(</span>g<span class="br0">)</span> <span class="br0">(</span>g<span class="br0">)</span> <span class="br0">(</span>g<span class="br0">)</span><span class="br0">)</span> <span class="co1">; -&gt; '(10 11 12)</span>
</pre>
</div>
</div>
<p>Note that the Racket core implements powerful continuation features, 
providing general (re-entrant) continuations that are composable, and 
also delimited continuations. Using this, the generator library is 
implemented in Racket.</p>
<h3> <span class="mw-headline" id="Tcl">Tcl</span>
</h3>
<p>In <a href="http://en.m.wikipedia.org/wiki/Tcl" title="Tcl">Tcl</a> 8.6, the generator mechanism is founded on named <a href="http://en.m.wikipedia.org/wiki/Coroutine" title="Coroutine">coroutines</a>.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="tcl source-tcl">
<pre class="de1"><span class="kw1">proc</span> generator <span class="br0">{</span>body<span class="br0">}</span> <span class="br0">{</span>
    coroutine gen<span class="br0">[</span><span class="kw2">incr</span> ::<span class="me1">disambiguator</span><span class="br0">]</span> apply <span class="br0">{</span><span class="br0">{</span>script<span class="br0">}</span> <span class="br0">{</span>
        <span class="co1"># Produce the result of [generator], the name of the generator</span>
        yield <span class="br0">[</span><span class="kw2">info</span> coroutine<span class="br0">]</span>
        <span class="co1"># Do the generation</span>
        <span class="kw1">eval</span> <span class="re0">$script</span>
        <span class="co1"># Finish the loop of the caller using a 'break' exception</span>
        <span class="kw1">return</span> -code <span class="kw1">break</span>
    <span class="br0">}</span><span class="br0">}</span> <span class="re0">$body</span>
<span class="br0">}</span>
 
<span class="co1"># Use a simple 'for' loop to do the actual generation</span>
<span class="kw1">set</span> count <span class="br0">[</span>generator <span class="br0">{</span>
    <span class="kw1">for</span> <span class="br0">{</span><span class="kw1">set</span> i <span class="nu0">10</span><span class="br0">}</span> <span class="br0">{</span><span class="re0">$i</span> <span class="sy0">&lt;</span>= <span class="nu0">20</span><span class="br0">}</span> <span class="br0">{</span><span class="kw2">incr</span> i<span class="br0">}</span> <span class="br0">{</span>
        yield <span class="re0">$i</span>
    <span class="br0">}</span>
<span class="br0">}</span><span class="br0">]</span>
 
<span class="co1"># Pull values from the generator until it is exhausted</span>
<span class="kw1">while</span> <span class="nu0">1</span> <span class="br0">{</span>
    <span class="kw2">puts</span> <span class="br0">[</span><span class="re0">$count</span><span class="br0">]</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<h3> <span class="mw-headline" id="Ruby">Ruby</span>
</h3>
<p>Ruby supports generators (starting from version 1.9) in the form of the built-in Enumerator class.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="ruby source-ruby">
<pre class="de1"><span class="co1"># Generator from an Enumerable object</span>
chars = Enumerator.<span class="me1">new</span><span class="br0">(</span><span class="br0">[</span><span class="st0">'A'</span>, <span class="st0">'B'</span>, <span class="st0">'C'</span>, <span class="st0">'Z'</span><span class="br0">]</span><span class="br0">)</span>
 
<span class="nu0">4</span>.<span class="me1">times</span> <span class="br0">{</span> <span class="kw3">puts</span> chars.<span class="kw1">next</span> <span class="br0">}</span>
 
<span class="co1"># Generator from a block</span>
count = Enumerator.<span class="me1">new</span> <span class="kw1">do</span> <span class="sy0">|</span>yielder<span class="sy0">|</span>
  i = <span class="nu0">0</span>
  <span class="kw3">loop</span> <span class="br0">{</span> yielder.<span class="kw1">yield</span> i <span class="sy0">+</span>= <span class="nu0">1</span> <span class="br0">}</span>
<span class="kw1">end</span>
 
<span class="nu0">100</span>.<span class="me1">times</span> <span class="br0">{</span> <span class="kw3">puts</span> count.<span class="kw1">next</span> <span class="br0">}</span>
</pre>
</div>
</div>
<h3> <span class="mw-headline" id="Haskell">Haskell</span>
</h3>
<p>In <a href="http://en.m.wikipedia.org/wiki/Haskell_%28programming_language%29" title="Haskell (programming language)">Haskell</a>, with its <a href="http://en.m.wikipedia.org/wiki/Lazy_evaluation" title="Lazy evaluation">lazy evaluation</a> model, everything is a generator - every datum created with a <a href="http://en.m.wikipedia.org/wiki/Non-strict_evaluation" title="Non-strict evaluation" class="mw-redirect">non-strict</a> data constructor is generated on demand. For example,</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="haskell source-haskell">
<pre class="de1">countfrom n <span class="sy0">=</span> n : countfrom <span class="br0">(</span>n<span class="sy0">+</span><span class="nu0">1</span><span class="br0">)</span>
 
<span class="co1">-- Example use: printing out the integers from 10 to 20.</span>
test1 <span class="sy0">=</span> <span class="kw3">mapM_</span> <span class="kw3">print</span> <span class="sy0">$</span> takeWhile <span class="br0">(</span><span class="sy0">&lt;=</span> <span class="nu0">20</span><span class="br0">)</span> <span class="sy0">$</span> countfrom <span class="nu0">10</span>
 
primes <span class="sy0">=</span> <span class="nu0">2</span> : <span class="nu0">3</span> : nextprime <span class="nu0">5</span>  <span class="kw1">where</span>
  nextprime n <span class="sy0">|</span> b <span class="sy0">=</span> n : nextprime <span class="br0">(</span>n<span class="sy0">+</span><span class="nu0">2</span><span class="br0">)</span>
              <span class="sy0">|</span> <span class="kw3">otherwise</span> <span class="sy0">=</span> nextprime <span class="br0">(</span>n<span class="sy0">+</span><span class="nu0">2</span><span class="br0">)</span>
    <span class="kw1">where</span> b <span class="sy0">=</span> <span class="kw3">all</span> <span class="br0">(</span><span class="br0">(</span><span class="sy0">/=</span> <span class="nu0">0</span><span class="br0">)</span><span class="sy0">.</span><span class="br0">(</span><span class="kw3">rem</span> n<span class="br0">)</span><span class="br0">)</span> <span class="sy0">$</span> takeWhile <span class="br0">(</span><span class="br0">(</span><span class="sy0">&lt;=</span> n<span class="br0">)</span><span class="sy0">.</span><span class="br0">(</span><span class="sy0">^</span><span class="nu0">2</span><span class="br0">)</span><span class="br0">)</span> <span class="sy0">$</span> <span class="kw3">tail</span> primes
</pre>
</div>
</div>
<p>where <code>(:)</code> is a non-strict list constructor, <i>cons</i>, and <code>$</code> is just a <i>"called-with"</i> operator, used for parenthesization. This uses the standard adaptor function,</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="haskell source-haskell">
<pre class="de1">takeWhile p <span class="br0">[</span><span class="br0">]</span> <span class="sy0">=</span> <span class="br0">[</span><span class="br0">]</span>
takeWhile p <span class="br0">(</span>x:xs<span class="br0">)</span> <span class="sy0">|</span> p x <span class="sy0">=</span> x : takeWhile p xs
                   <span class="sy0">|</span> <span class="kw3">otherwise</span> <span class="sy0">=</span> <span class="br0">[</span><span class="br0">]</span>
</pre>
</div>
</div>
<p>which re-fetches values agreable with a predicate, and stops 
requesting new values as soon as a non-agreable one is encountered. The 
shared storage access is used as a universal mediator in Haskell. List 
comprehensions can be freely used:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="haskell source-haskell">
<pre class="de1">test2 <span class="sy0">=</span> <span class="kw3">mapM_</span> <span class="kw3">print</span> <span class="sy0">$</span> takeWhile <span class="br0">(</span><span class="sy0">&lt;=</span> <span class="nu0">20</span><span class="br0">)</span> <span class="br0">[</span>x<span class="sy0">*</span>x <span class="sy0">|</span> x <span class="sy0">&lt;-</span> countfrom <span class="nu0">10</span><span class="br0">]</span>
test3 <span class="sy0">=</span> <span class="kw3">mapM_</span> <span class="kw3">print</span> <span class="br0">[</span>x<span class="sy0">*</span>x <span class="sy0">|</span> x <span class="sy0">&lt;-</span> takeWhile <span class="br0">(</span><span class="sy0">&lt;=</span> <span class="nu0">20</span><span class="br0">)</span> <span class="sy0">$</span> countfrom <span class="nu0">10</span><span class="br0">]</span>
</pre>
</div>
</div>
</div><a id="anchor_2" href="#section_2" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_3"><button>Show</button><span id="Other_Implementations">Other Implementations</span></h2><div class="content_block" id="content_3">
<h3> <span class="mw-headline" id="Java">Java</span>
</h3>
<p>Java has had a standard interface for implementing iterators since 
its early days, and since Java 5, the "foreach" construction makes it 
easy to loop over iterators that provide the <tt>java.lang.Iterable</tt> interface. (The <a href="http://en.m.wikipedia.org/wiki/Java_collections_framework" title="Java collections framework">Java collections framework</a> and other collections frameworks, typically provide iterators for all collections.)</p>
<p>However, <a href="http://en.m.wikipedia.org/wiki/Java_%28programming_language%29" title="Java (programming language)">Java</a>
 does not have generators built into the language. This means that 
creating iterators is often much trickier than in languages with 
built-in generators, especially when the generation logic is complex. 
Because all state must be saved and restored every time an item is to be
 yielded from an iterator, it is not possible to store state in local 
variables or use built-in looping routines, as when generators are 
available; instead, all of this must be manually simulated, using object
 fields to hold local state and loop counters.</p>
<p>Even simple iterators built this way tend to be significantly bulkier than those using generators, with a lot of <a href="http://en.m.wikipedia.org/wiki/Boilerplate_code" title="Boilerplate code">boilerplate code</a>.</p>
<h3> <span class="mw-headline" id="C.2B.2B">C++</span>
</h3>
<p>It is possible to introduce generators into C++ using pre-processor 
macros. The resulting code might have aspects very different from native
 C++. but the generator syntax can be very uncluttered. A very good 
example can be found at <sup id="cite_ref-7" class="reference"><a href="#cite_note-7"><span>[</span>8<span>]</span></a></sup>. The set of pre-processor macros defined in this source allow generators defined with the syntax as in the following example:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">$generator<span class="br0">(</span>descent<span class="br0">)</span>
<span class="br0">{</span>
   <span class="co1">// place for all variables used in the generator</span>
   <span class="kw4">int</span> i<span class="sy4">;</span> <span class="co1">// our counter</span>
 
   <span class="co1">// place the constructor of our generator, e.g. </span>
   <span class="co1">// descent(int minv, int maxv) {...}</span>
 
   <span class="co1">// from $emit to $stop is a body of our generator:</span>
 
   $emit<span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span> <span class="co1">// will emit int values. Start of body of the generator.</span>
      <span class="kw1">for</span> <span class="br0">(</span>i <span class="sy1">=</span> <span class="nu0">10</span><span class="sy4">;</span> i <span class="sy1">&gt;</span> <span class="nu0">0</span><span class="sy4">;</span> <span class="sy2">--</span>i<span class="br0">)</span>
         $yield<span class="br0">(</span>i<span class="br0">)</span><span class="sy4">;</span> <span class="co1">// a.k.a. yield in Python,</span>
                    <span class="co1">// returns next number in [1..10], reversed.</span>
   $stop<span class="sy4">;</span> <span class="co1">// stop, end of sequence. End of body of the generator.</span>
<span class="br0">}</span><span class="sy4">;</span>
</pre>
</div>
</div>
<p>This can then be iterated using:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1"><span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">int</span> argc, <span class="kw4">char</span><span class="sy2">*</span> argv<span class="br0">[</span><span class="br0">]</span><span class="br0">)</span>
<span class="br0">{</span>
  descent gen<span class="sy4">;</span>
  <span class="kw1">for</span><span class="br0">(</span><span class="kw4">int</span> n<span class="sy4">;</span> gen<span class="br0">(</span>n<span class="br0">)</span><span class="sy4">;</span><span class="br0">)</span> <span class="co1">// "get next" generator invocation</span>
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"next number is %d<span class="es1">\n</span>"</span>, n<span class="br0">)</span><span class="sy4">;</span>
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<p>Moreover, <a href="http://en.m.wikipedia.org/wiki/C%2B%2B11" title="C++11">C++11</a> allows foreach loops to be applied to any class that provides the <code>begin</code> and <code>end</code> functions. It's then possible to write generator-like classes by defining both the iterable methods (<code>begin</code> and <code>end</code>) and the iterator methods (<code>operator!=</code>, <code>operator++</code> and <code>operator*</code>) in the same class. For example, it is possible to write the following program:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1"><span class="co2">#include &lt;iostream&gt;</span>
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i<span class="sy4">:</span> range<span class="br0">(</span><span class="nu0">10</span><span class="br0">)</span><span class="br0">)</span>
    <span class="br0">{</span>
        std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> i <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">endl</span><span class="sy4">;</span>
    <span class="br0">}</span>
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<p>A basic range implementation would look like that:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1"><span class="kw2">class</span> range
<span class="br0">{</span>
    <span class="kw2">private</span><span class="sy4">:</span>
    <span class="kw4">const</span> <span class="kw4">int</span><span class="sy3">&amp;</span> last<span class="sy4">;</span> <span class="co1">// Last element</span>
    <span class="kw4">int</span> iter<span class="sy4">;</span>        <span class="co1">// Iterator</span>
 
    <span class="kw2">public</span><span class="sy4">:</span>
    range<span class="br0">(</span><span class="kw4">int</span> end<span class="br0">)</span><span class="sy4">:</span>
        last<span class="br0">(</span>end<span class="br0">)</span>,
        iter<span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span>
    <span class="br0">{</span><span class="br0">}</span>
 
    <span class="co1">// Iterable functions</span>
    range<span class="sy3">&amp;</span> begin<span class="br0">(</span><span class="br0">)</span> <span class="kw4">const</span> <span class="br0">{</span> <span class="kw1">return</span> <span class="sy2">*</span><span class="kw3">this</span><span class="sy4">;</span> <span class="br0">}</span>
    range<span class="sy3">&amp;</span> end<span class="br0">(</span><span class="br0">)</span> <span class="kw4">const</span> <span class="br0">{</span> <span class="kw1">return</span> <span class="sy2">*</span><span class="kw3">this</span><span class="sy4">;</span> <span class="br0">}</span>
 
    <span class="co1">// Iterator functions</span>
    <span class="kw4">bool</span> operator<span class="sy3">!</span><span class="sy1">=</span><span class="br0">(</span><span class="kw4">const</span> range<span class="sy3">&amp;</span><span class="br0">)</span> <span class="kw4">const</span> <span class="br0">{</span> <span class="kw1">return</span> i <span class="sy1">&lt;</span> end<span class="sy4">;</span> <span class="br0">}</span>
    <span class="kw4">void</span> operator<span class="sy2">++</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="sy2">++</span>iter<span class="sy4">;</span> <span class="br0">}</span>
    <span class="kw4">int</span> operator<span class="sy2">*</span><span class="br0">(</span><span class="br0">)</span> <span class="kw4">const</span> <span class="br0">{</span> <span class="kw1">return</span> iter<span class="sy4">;</span> <span class="br0">}</span>
<span class="br0">}</span><span class="sy4">;</span>
</pre>
</div>
</div>
<h3> <span class="mw-headline" id="Perl">Perl</span>
</h3>
<p>Perl does not natively provide generators, but support is provided by the <a rel="nofollow" class="external text" href="http://search.cpan.org/dist/Coro-Generator">Coro::Generator</a> module which uses the <a rel="nofollow" class="external text" href="http://search.cpan.org/dist/Coro">Coro</a> co-routine framework. Example usage:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="perl source-perl">
<pre class="de1"><span class="kw2">use</span> strict<span class="sy0">;</span>
<span class="kw2">use</span> warnings<span class="sy0">;</span>
<span class="co1"># enable generator { BLOCK } and yield</span>
<span class="kw2">use</span> Coro<span class="sy0">::</span><span class="me2">Generator</span><span class="sy0">;</span>
<span class="co1"># array reference to iterate over</span>
<span class="kw1">my</span> <span class="re0">$chars</span> <span class="sy0">=</span> <span class="br0">[</span><span class="st_h">'A'</span><span class="sy0">...</span><span class="st_h">'Z'</span><span class="br0">]</span><span class="sy0">;</span>
 
<span class="co1"># new generator which can be called like a</span>
<span class="co1"># coderef.</span>
<span class="kw1">my</span> <span class="re0">$letters</span> <span class="sy0">=</span> generator <span class="br0">{</span>
        <span class="kw1">my</span> <span class="re0">$i</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
        <span class="kw1">for</span> <span class="kw1">my</span> <span class="re0">$letter</span> <span class="br0">(</span><span class="re0">@$chars</span><span class="br0">)</span> <span class="br0">{</span>
                <span class="co1"># get next letter from $chars</span>
                yield <span class="re0">$letter</span><span class="sy0">;</span>
        <span class="br0">}</span>
<span class="br0">}</span><span class="sy0">;</span>
 
<span class="co1"># call the generator 15 times</span>
<span class="kw3">print</span> <span class="re0">$letters</span><span class="sy0">-&gt;</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">,</span> <span class="st0">"<span class="es0">\n</span>"</span> <span class="kw1">for</span> <span class="br0">(</span><span class="nu0">0</span><span class="sy0">..</span><span class="nu0">15</span><span class="br0">)</span><span class="sy0">;</span>
</pre>
</div>
</div>
<h3> <span class="mw-headline" id="Lisp">Lisp</span>
</h3>
<p><a href="http://en.m.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> also does not natively provide generators, yet various library implementations exist, such as <a rel="nofollow" class="external text" href="http://cliki.net/pygen">pygen</a>.</p>
</div><a id="anchor_3" href="#section_3" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_4"><button>Show</button><span id="See_also">See also</span></h2><div class="content_block" id="content_4">
<ul>
<li>
<a href="http://en.m.wikipedia.org/wiki/List_comprehension" title="List comprehension">List comprehension</a> for another construct that generates a sequence of values</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Iterator" title="Iterator">Iterator</a> for the concept of producing a list one element at a time</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Lazy_evaluation" title="Lazy evaluation">Lazy evaluation</a> for producing values when needed</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Corecursion" title="Corecursion">Corecursion</a> for potentially infinite data by recursion instead of <i>yield</i>
</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Coroutine" title="Coroutine">Coroutine</a> for even more generalization from subroutine</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Continuation" title="Continuation">Continuation</a> for generalization of control flow</li>
</ul>
</div><a id="anchor_4" href="#section_4" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_5"><button>Show</button><span id="Notes">Notes</span></h2><div class="content_block" id="content_5">
<ol class="references">
<li id="cite_note-0">
<span class="mw-cite-backlink"><b><a href="#cite_ref-0">^</a></b></span> <span class="reference-text"><span class="citation web">Kiselyov, Oleg (January 2004). <a rel="nofollow" class="external text" href="http://okmij.org/ftp/Scheme/enumerators-callcc.html">"General ways to traverse collections in Scheme"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://okmij.org/ftp/Scheme/enumerators-callcc.html">http://okmij.org/ftp/Scheme/enumerators-callcc.html</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=General+ways+to+traverse+collections+in+Scheme&amp;rft.atitle=&amp;rft.aulast=Kiselyov&amp;rft.aufirst=Oleg&amp;rft.au=Kiselyov%2C%26%2332%3BOleg&amp;rft.date=January+2004&amp;rft_id=http%3A%2F%2Fokmij.org%2Fftp%2FScheme%2Fenumerators-callcc.html&amp;rfr_id=info:sid/en.wikipedia.org:Generator_(computer_programming)"><span style="display: none;">&nbsp;</span></span></span>
</li>
<li id="cite_note-1">
<span class="mw-cite-backlink"><b><a href="#cite_ref-1">^</a></b></span> <span class="reference-text"><span class="citation web"><a href="http://en.m.wikipedia.org/wiki/Barbara_Liskov" title="Barbara Liskov" class="mw-redirect">Liskov, Barbara</a> (April 1992). <a rel="nofollow" class="external text" href="http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-561.pdf">"A History of CLU"</a> (pdf)<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-561.pdf">http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-561.pdf</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=A+History+of+CLU&amp;rft.atitle=&amp;rft.aulast=Liskov&amp;rft.aufirst=Barbara&amp;rft.au=Liskov%2C%26%2332%3BBarbara&amp;rft.date=April+1992&amp;rft_id=http%3A%2F%2Fwww.lcs.mit.edu%2Fpublications%2Fpubs%2Fpdf%2FMIT-LCS-TR-561.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Generator_(computer_programming)"><span style="display: none;">&nbsp;</span></span></span>
</li>
<li id="cite_note-2">
<span class="mw-cite-backlink"><b><a href="#cite_ref-2">^</a></b></span> <span class="reference-text">Python Enhancement Proposals: <a rel="nofollow" class="external text" href="http://www.python.org/dev/peps/pep-0255/">PEP 255: Simple Generators</a>, <a rel="nofollow" class="external text" href="http://www.python.org/dev/peps/pep-0289/">PEP 289: Generator Expressions</a>, <a rel="nofollow" class="external text" href="http://www.python.org/dev/peps/pep-0342/">PEP 342: Coroutines via Enhanced Generators</a></span>
</li>
<li id="cite_note-3">
<span class="mw-cite-backlink"><b><a href="#cite_ref-3">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-us/library/9k7k7cf0.aspx">yield (C# Reference)</a></span>
</li>
<li id="cite_note-4">
<span class="mw-cite-backlink"><b><a href="#cite_ref-4">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://developer.mozilla.org/en/docs/New_in_JavaScript_1.7#Generators">"New In JavaScript 1.7"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://developer.mozilla.org/en/docs/New_in_JavaScript_1.7#Generators">http://developer.mozilla.org/en/docs/New_in_JavaScript_1.7#Generators</a></span><span class="reference-accessdate">. Retrieved 2006-10-10</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=New+In+JavaScript+1.7&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fdeveloper.mozilla.org%2Fen%2Fdocs%2FNew_in_JavaScript_1.7%23Generators&amp;rfr_id=info:sid/en.wikipedia.org:Generator_(computer_programming)"><span style="display: none;">&nbsp;</span></span></span>
</li>
<li id="cite_note-icon-5">
<span class="mw-cite-backlink"><b><a href="#cite_ref-icon_5-0">^</a></b></span> <span class="reference-text">The <a href="http://en.m.wikipedia.org/wiki/Icon_%28programming_language%29" title="Icon (programming language)">Icon Programming Language</a>
 utilizes generators to implement its goal directed evaluation. In Icon,
 generators can be invoked in contexts outside of the normal looping 
control structures.</span>
</li>
<li id="cite_note-pep380-6">
<span class="mw-cite-backlink"><b><a href="#cite_ref-pep380_6-0">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.python.org/dev/peps/pep-0380/">PEP 380 -- Syntax for Delegating to a Subgenerator</a></span>
</li>
<li id="cite_note-7">
<span class="mw-cite-backlink"><b><a href="#cite_ref-7">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://www.codeproject.com/KB/cpp/cpp_generators.aspx">http://www.codeproject.com/KB/cpp/cpp_generators.aspx</a></span>
</li>
</ol>
</div><a id="anchor_5" href="#section_5" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_6"><button>Show</button><span id="References">References</span></h2><div class="content_block" id="content_6">
<ul>
<li>Stephan Murer, <a href="http://en.m.wikipedia.org/wiki/Steve_Omohundro" title="Steve Omohundro">Stephen Omohundro</a>, David Stoutamire and Clemens Szyperski: Iteration abstraction in <a href="http://en.m.wikipedia.org/wiki/Sather" title="Sather">Sather</a>. <i>ACM Transactions on Programming Languages and Systems</i>, 18(1):1-15 (1996) <a rel="nofollow" class="external autonumber" href="http://portal.acm.org/citation.cfm?doid=225540.225541">[1]</a>
</li>
</ul>

</div>
</div>		</div>
	</div>
			<div id="footer">
			<h2 class="section_heading" id="section_footer"><button>Show</button>
		<div class="license">Wikipedia ™</div>		<span class="toggleCopyright">
			<span class="more">more</span><span class="less">less</span>
		</span>
	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Generator_%28computer_science%29&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li>
				<span class="left"><a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span><span class="right">Images ON / <a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions/DisableImages&amp;returnto=Generator+%28computer+programming%29&amp;mobiletoken=dc83e2c6ae93b1fadc6882196f529c1b" title="Special:MobileOptions/DisableImages" id="imagetoggle">OFF</a></span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Generator_%28computer_science%29&amp;action=history">contributors</a> like you<br>
				Content available under <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>			</li>
		</ul>
		<ul class="links">
			<li>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Generator+%28computer+programming%29&amp;feedbacksource=MobileFrontend">Contact</a>
			</li><li>
			<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div>
	</div>
				<!--[if gt IE 7]><!-->
		<script type="text/javascript">mw={loader:{state:function(){}}};</script>		<script src="Generator_%28computer_science%29_files/load_002.php" type="text/javascript"></script>
<script src="Generator_%28computer_science%29_files/load.php" type="text/javascript"></script>	<script type="text/javascript">
	window.onload = function() {
		mw.mobileFrontend.init();
	};
	</script>
	<!----><!--[endif]---->
	
	<div style="display: none;" id="mf-references"><div></div><button>close</button></div></body></html>