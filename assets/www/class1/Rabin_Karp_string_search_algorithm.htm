<!DOCTYPE html>
<html class="jsEnabled togglingEnabled" dir="ltr" lang="en"><head>
		<title>Rabin–Karp algorithm - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<meta name="robots" content="noindex,nofollow">		<link rel="stylesheet" href="Rabin%E2%80%93Karp_string_search_algorithm_files/load.css" type="text/css" media="all">		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png">		<script type="text/javascript">
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-header":"This article is available in 11 languages","mobile-frontend-language-footer":"<a href=\"\/wiki\/Special:Special:MobileOptions\/Language\">Wikipedia is available in other languages.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"scriptPath":"\/w","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			document.documentElement.className = 'jsEnabled page-loading';		</script>
		<link rel="canonical" href="http://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm">
	</head>
	<body class="mobile mw-mf-checkboxes">
							<div id="mw-mf-header">
					<form id="mw-mf-searchForm" action="/w/index.php" class="search_bar" method="get">
							<img alt="Logo" id="mw-mf-logo" src="Rabin%E2%80%93Karp_string_search_algorithm_files/W_logo_for_Mobile_Frontend.gif" width="35" height="22">
						<input value="Special:Search" name="title" type="hidden">
			<div id="mw-mf-sq" class="divclearable">
				<input name="search" id="mw-mf-search" size="22" autocomplete="off" maxlength="1024" class="search" placeholder="Type your search here..." type="search">
				<img src="Rabin%E2%80%93Karp_string_search_algorithm_files/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear">
			</div>
						<button id="goButton" class="goButton" type="submit">
				<img src="Rabin%E2%80%93Karp_string_search_algorithm_files/blank.gif" alt="Go" title="Go">
			</button>
					</form>
									<div class="nav" id="nav">
				<div id="mw-mf-language-selection">
		Language:<br>
		<select id="languageselection"><option value="http://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_string_search_algorithm" selected="selected">English</option><option value="//de.m.wikipedia.org/wiki/Rabin-Karp-Algorithmus">Deutsch</option><option value="//es.m.wikipedia.org/wiki/Algoritmo_Karp-Rabin">español</option><option value="//fa.m.wikipedia.org/wiki/%D8%A7%D9%84%DA%AF%D9%88%D8%B1%DB%8C%D8%AA%D9%85_%D8%AC%D8%B3%D8%AA%D8%AC%D9%88%DB%8C_%D8%B1%D8%B4%D8%AA%D9%87%D9%94_%D8%B1%D8%A7%D8%A8%DB%8C%D9%86-%DA%A9%D8%A7%D8%B1%D9%BE">فارسی</option><option value="//fr.m.wikipedia.org/wiki/Algorithme_de_Rabin-Karp">français</option><option value="//ja.m.wikipedia.org/wiki/%E3%83%A9%E3%83%93%E3%83%B3-%E3%82%AB%E3%83%BC%E3%83%97%E6%96%87%E5%AD%97%E5%88%97%E6%A4%9C%E7%B4%A2%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0">日本語</option><option value="//pl.m.wikipedia.org/wiki/Algorytm_Karpa-Rabina">polski</option><option value="//ro.m.wikipedia.org/wiki/Algoritmul_Rabin-Karp">română</option><option value="//ru.m.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%A0%D0%B0%D0%B1%D0%B8%D0%BD%D0%B0_%E2%80%94_%D0%9A%D0%B0%D1%80%D0%BF%D0%B0">русский</option><option value="//sv.m.wikipedia.org/wiki/Rabin-Karps_algoritm">svenska</option><option value="//uk.m.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%A0%D0%B0%D0%B1%D1%96%D0%BD%D0%B0-%D0%9A%D0%B0%D1%80%D0%BF%D0%B0">українська</option></select>
	</div><br>
			<a href="http://en.m.wikipedia.org/wiki/Main_Page" id="homeButton" class="button">Home</a>
			<a href="http://en.m.wikipedia.org/wiki/Special:Random" id="randomButton" class="button">Random</a>
			</div>
		</div>
				<div id="results"><ul class="suggestions-results" title="No Results"><li class="suggestions-result">Type search term above and matching article titles will appear here.</li></ul></div>
		<div class="show" id="content_wrapper">
				<div id="content">
			<h1 id="firstHeading">Rabin–Karp algorithm</h1>			
<p>In <a href="http://en.m.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a>, the <b>Rabin–Karp algorithm</b> is a <a href="http://en.m.wikipedia.org/wiki/String_searching_algorithm" title="String searching algorithm">string searching algorithm</a> created by <a href="http://en.m.wikipedia.org/wiki/Michael_O._Rabin" title="Michael O. Rabin">Michael O. Rabin</a> and <a href="http://en.m.wikipedia.org/wiki/Richard_M._Karp" title="Richard M. Karp">Richard M. Karp</a> in 1987 that uses <a href="http://en.m.wikipedia.org/wiki/Hash_function" title="Hash function">hashing</a> to find any one of a set of pattern strings in a text. For text of length <i>n</i> and <i>p</i> patterns of combined length <i>m</i>, its average and best case running time is <a href="http://en.m.wikipedia.org/wiki/Big-O_notation" title="Big-O notation" class="mw-redirect">O</a>(<i>n</i>+<i>m</i>) in space O(<i>p</i>), but its worst-case time is O(<i>nm</i>). In contrast, the <a href="http://en.m.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm" title="Aho–Corasick string matching algorithm">Aho–Corasick string matching algorithm</a> has asymptotic worst-time complexity O(<i>n</i>+<i>m</i>) in space O(<i>m</i>).</p>
<p>A practical application of Rabin–Karp is detecting <a href="http://en.m.wikipedia.org/wiki/Plagiarism" title="Plagiarism">plagiarism</a>.
 Given source material, Rabin–Karp can rapidly search through a paper 
for instances of sentences from the source material, ignoring details 
such as case and punctuation. Because of the abundance of the sought 
strings, single-string searching algorithms are impractical.</p>
<div class="section"><h2 class="section_heading" id="section_1"><button>Show</button><span id="Shifting_substrings_search_and_competing_algorithms">Shifting substrings search and competing algorithms</span></h2><div class="content_block" id="content_1">
<p>A brute-force substring search algorithm checks all possible positions:</p>
<pre><b>1</b> <b>function</b> NaiveSearch(<i>string</i> s[1..n], <i>string</i> sub[1..m])
<b>2</b>    <b>for</b> i <b>from</b> 1 <b>to</b> n-m+1
<b>3</b>       <b>for</b> j <b>from</b> 1 <b>to</b> m
<b>4</b>          <b>if</b> s[i+j-1] ≠ sub[j]
<b>5</b>             jump to next iteration of outer loop
<b>6</b>       <b>return</b> i
<b>7</b>    <b>return</b> not found
</pre>
<p>This algorithm works well in many practical cases, but can exhibit 
relatively long running times on certain examples, such as searching for
 a string of 10,000 "a"s followed by a "b" in a string of 10 million 
"a"s, in which case it exhibits its worst-case <a href="http://en.m.wikipedia.org/wiki/Big-O_notation" title="Big-O notation" class="mw-redirect">Θ</a>(<i>mn</i>) time.</p>
<p>The <a href="http://en.m.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm" title="Knuth–Morris–Pratt algorithm">Knuth–Morris–Pratt algorithm</a> reduces this to Θ(<i>n</i>) time using precomputation to examine each text character only once; the <a href="http://en.m.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm" title="Boyer–Moore string search algorithm">Boyer–Moore algorithm</a>
 skips forward not by 1 character, but by as many as possible for the 
search to succeed, effectively decreasing the number of times we iterate
 through the outer loop, so that the number of characters examined can 
be as small as <i>n/m</i> in the best case. The Rabin–Karp algorithm focuses instead on speeding up lines 3-6.</p>
</div><a id="anchor_1" href="#section_1" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_2"><button>Show</button><span id="Use_of_hashing_for_shifting_substring_search">Use of hashing for shifting substring search</span></h2><div class="content_block" id="content_2">
<p>Rather than pursuing more sophisticated skipping, the Rabin–Karp 
algorithm seeks to speed up the testing of equality of the pattern to 
the substrings in the text by using a <a href="http://en.m.wikipedia.org/wiki/Hash_function" title="Hash function">hash function</a>. A hash function is a function which converts every string into a numeric value, called its <i>hash value</i>;
 for example, we might have hash("hello")=5. Rabin–Karp exploits the 
fact that if two strings are equal, their hash values are also equal. 
Thus, it would seem all we have to do is compute the hash value of the 
substring we're searching for, and then look for a substring with the 
same hash value.</p>
<p>However, there are two problems with this. First, because there are 
so many different strings, to keep the hash values small we have to 
assign some strings the same number. This means that if the hash values 
match, the strings might not match; we have to verify that they do, 
which can take a long time for long substrings. Luckily, a good hash 
function promises us that on most reasonable inputs, this won't happen 
too often, which keeps the average search time good.</p>
<p>The algorithm is as shown:</p>
<pre> <b>1</b> <b>function</b> RabinKarp(<i>string</i> s[1..n], <i>string</i> sub[1..m])
 <b>2</b>     hsub := hash(sub[1..m]);  hs := hash(s[1..m])
 <b>3</b>     <b>for</b> i <b>from</b> 1 <b>to</b> n-m+1
 <b>4</b>         <b>if</b> hs = hsub
 <b>5</b>             <b>if</b> s[i..i+m-1] = sub
 <b>6</b>                 <b>return</b> i
 <b>7</b>         hs := hash(s[i+1..i+m])
 <b>8</b>     <b>return</b> not found
</pre>
<p>Lines 2, 5, and 7 each require <a href="http://en.m.wikipedia.org/wiki/Big-O_notation" title="Big-O notation" class="mw-redirect">Θ</a>(m)
 time. However, line 2 is only executed once, and line 5 is only 
executed if the hash values match, which is unlikely to happen more than
 a few times. Line 4 is executed <i>n</i> times, but only requires constant time. So the only problem is line 7.</p>
<p>If we naively recompute the hash value for the substring <code>s[i+1..i+m]</code>, this would require <a href="http://en.m.wikipedia.org/wiki/Big-O_notation" title="Big-O notation" class="mw-redirect">Θ</a>(<i>m</i>)
 time, and since this is done on each loop, the algorithm would require 
Ω(mn) time, the same as the most naive algorithms. The trick to solving 
this is to note that the variable <code>hs</code> already contains the hash value of <code>s[i..i+m-1]</code>. If we can use this to compute the next hash value in constant time, then our problem will be solved.</p>
<p>We do this using what is called a <a href="http://en.m.wikipedia.org/wiki/Rolling_hash" title="Rolling hash">rolling hash</a>.
 A rolling hash is a hash function specially designed to enable this 
operation. One simple example is adding up the values of each character 
in the substring. Then, we can use this formula to compute the next hash
 value in constant time:</p>
<pre> s[i+1..i+m] = s[i..i+m-1] - s[i] + s[i+m]
</pre>
<p>This simple function works, but will result in statement 5 being 
executed more often than other more sophisticated rolling hash functions
 such as those discussed in the next section.</p>
<p>Notice that if we're very unlucky, or have a very bad hash function 
such as a constant function, line 5 might very well be executed <i>n</i> times, on every iteration of the loop. Because it requires Θ(m) time, the whole algorithm then takes a worst-case Θ(mn) time.</p>
</div><a id="anchor_2" href="#section_2" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_3"><button>Show</button><span id="Hash_function_used">Hash function used</span></h2><div class="content_block" id="content_3">
<p>The key to Rabin–Karp performance is the efficient computation of <a href="http://en.m.wikipedia.org/wiki/Hash_value" title="Hash value" class="mw-redirect">hash values</a>
 of the successive substrings of the text. One popular and effective 
rolling hash function treats every substring as a number in some base, 
the base being usually a large <a href="http://en.m.wikipedia.org/wiki/Prime_number" title="Prime number">prime</a>. For example, if the substring is "hi" and the base is 101, the hash value would be 104 × 101<sup>1</sup> + 105 × 101<sup>0</sup> = 10609 (<a href="http://en.m.wikipedia.org/wiki/ASCII" title="ASCII">ASCII</a> of 'h' is 104 and of 'i' is 105).</p>
<p>Technically, this algorithm is only similar to the true number in a 
non-decimal system representation, since for example we could have the 
"base" less than one of the "digits". See <a href="http://en.m.wikipedia.org/wiki/Hash_function" title="Hash function">hash function</a>
 for a much more detailed discussion. The essential benefit achieved by 
such representation is that it is possible to compute the hash value of 
the next substring from the previous one by doing only a constant number
 of operations, independent of the substrings' lengths.</p>
<p>For example, if we have text "abracadabra" and we are searching for a
 pattern of length 3, we can compute the hash of "bra" from the hash for
 "abr" (the previous substring) by subtracting the number added for the 
first 'a' of "abr", i.e. 97 × 101<sup>2</sup> (97 is ASCII for 'a' and 
101 is the base we are using), multiplying by the base and adding for 
the last a of "bra", i.e. 97 × 101<sup>0</sup> = 97. If the substrings in question are long, this algorithm achieves great savings compared with many other hashing schemes.</p>
<p>Theoretically, there exist other algorithms that could provide 
convenient recomputation, e.g. multiplying together ASCII values of all 
characters so that shifting substring would only entail dividing by the 
first character and multiplying by the last. The limitation, however, is
 the limited size of the integer <a href="http://en.m.wikipedia.org/wiki/Data_type" title="Data type">data type</a> and the necessity of using <a href="http://en.m.wikipedia.org/wiki/Modular_arithmetic" title="Modular arithmetic">modular arithmetic</a> to scale down the hash results, for which see <a href="http://en.m.wikipedia.org/wiki/Hash_function" title="Hash function">hash function</a>
 article; meanwhile, those naive hash functions that would not produce 
large numbers quickly, like just adding ASCII values, are likely to 
cause many <a href="http://en.m.wikipedia.org/wiki/Hash_collision" title="Hash collision" class="mw-redirect">hash collisions</a> and hence slow down the algorithm. Hence the described hash function is typically the preferred one in Rabin–Karp.</p>
</div><a id="anchor_3" href="#section_3" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_4"><button>Show</button><span id="Rabin.E2.80.93Karp_and_multiple_pattern_search">Rabin–Karp and multiple pattern search</span></h2><div class="content_block" id="content_4">
<p>Rabin–Karp is inferior for single pattern searching to <a href="http://en.m.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm" title="Knuth–Morris–Pratt algorithm">Knuth–Morris–Pratt algorithm</a>, <a href="http://en.m.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm" title="Boyer–Moore string search algorithm">Boyer–Moore string search algorithm</a> and other faster single pattern <a href="http://en.m.wikipedia.org/wiki/String_searching_algorithm" title="String searching algorithm">string searching algorithms</a> because of its slow worst case behavior. However, Rabin–Karp is an algorithm of choice for <a href="http://en.m.wikipedia.org/wiki/String_searching_algorithm#Algorithms_using_finite_set_of_patterns" title="String searching algorithm">multiple pattern search</a>.</p>
<p>That is, if we want to find any of a large number, say <i>k</i>, fixed length patterns in a text, we can create a simple variant of Rabin–Karp that uses a <a href="http://en.m.wikipedia.org/wiki/Bloom_filter" title="Bloom filter">Bloom filter</a> or a <a href="http://en.m.wikipedia.org/wiki/Set_data_structure" title="Set data structure" class="mw-redirect">set data structure</a> to check whether the hash of a given string belongs to a set of hash values of patterns we are looking for:</p>
<pre> <b>function</b> RabinKarpSet(<i>string</i> s[1..n], <i>set</i> of <i>string</i> subs, m):
     <i>set</i> hsubs := emptySet
     <b>for each</b> sub <b>in</b> subs
         insert hash(sub[1..m]) into hsubs
     hs := hash(s[1..m])
     <b>for</b> i <b>from</b> 1 <b>to</b> n-m+1
         <b>if</b> hs ∈ hsubs <b>and</b> s[i..i+m-1] ∈ subs
             <b>return</b> i
         hs := hash(s[i+1..i+m])
     <b>return</b> not found
</pre>
<p>We assume all the substrings have a fixed length <i>m</i>.</p>
<p>A naïve way to search for <i>k</i> patterns is to repeat a single-pattern search taking O(<i>n</i>) time, totalling in O(<i>n</i> <i>k</i>) time. In contrast, the variant Rabin–Karp above can find all <i>k</i> patterns in O(<i>n</i>+<i>k</i>) time in expectation, because a hash table checks whether a substring hash equals any of the pattern hashes in O(1) time.</p>
</div><a id="anchor_4" href="#section_4" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_5"><button>Show</button><span id="References">References</span></h2><div class="content_block" id="content_5">
<ul>
<li>
<span class="citation Journal"><a href="http://en.m.wikipedia.org/wiki/Richard_Karp" title="Richard Karp" class="mw-redirect">Karp, Richard M.</a>; <a href="http://en.m.wikipedia.org/wiki/Michael_O._Rabin" title="Michael O. Rabin">Rabin, Michael O.</a> (March 1987). <a rel="nofollow" class="external text" href="http://www.research.ibm.com/journal/rd/312/ibmrd3102P.pdf"><i>Efficient randomized pattern-matching algorithms</i></a>. <b>31</b><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.research.ibm.com/journal/rd/312/ibmrd3102P.pdf">http://www.research.ibm.com/journal/rd/312/ibmrd3102P.pdf</a></span><span class="reference-accessdate">. Retrieved 2008-10-14</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Efficient+randomized+pattern-matching+algorithms&amp;rft.aulast=Karp%2C+Richard+M.&amp;rft.au=Karp%2C+Richard+M.&amp;rft.date=March+1987&amp;rft.volume=31&amp;rft.issue=2&amp;rft_id=http%3A%2F%2Fwww.research.ibm.com%2Fjournal%2Frd%2F312%2Fibmrd3102P.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Rabin%E2%80%93Karp_algorithm"><span style="display: none;">&nbsp;</span></span>
</li>
<li>
<span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Thomas_H._Cormen" title="Thomas H. Cormen">Cormen, Thomas H.</a>; <a href="http://en.m.wikipedia.org/wiki/Charles_E._Leiserson" title="Charles E. Leiserson">Leiserson, Charles E.</a>; <a href="http://en.m.wikipedia.org/wiki/Ronald_L._Rivest" title="Ronald L. Rivest" class="mw-redirect">Rivest, Ronald L.</a>; <a href="http://en.m.wikipedia.org/wiki/Clifford_Stein" title="Clifford Stein">Stein, Clifford</a> (2001-09-01). "The Rabin–Karp algorithm". <i><a href="http://en.m.wikipedia.org/wiki/Introduction_to_Algorithms" title="Introduction to Algorithms">Introduction to Algorithms</a></i> (2nd ed.). <a href="http://en.m.wikipedia.org/wiki/Cambridge,_Massachusetts" title="Cambridge, Massachusetts">Cambridge, Massachusetts</a>: MIT Press. pp.&nbsp;911–916. <a href="http://en.m.wikipedia.org/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&nbsp;<a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-0-262-03293-3" title="Special:BookSources/978-0-262-03293-3">978-0-262-03293-3</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+Rabin%E2%80%93Karp+algorithm&amp;rft.atitle=%5B%5BIntroduction+to+Algorithms%5D%5D&amp;rft.aulast=Cormen%2C+Thomas+H.&amp;rft.au=Cormen%2C+Thomas+H.&amp;rft.date=2001-09-01&amp;rft.pages=pp.%26nbsp%3B911%E2%80%93916&amp;rft.edition=2nd&amp;rft.place=%5B%5BCambridge%2C+Massachusetts%5D%5D&amp;rft.pub=MIT+Press&amp;rft.isbn=978-0-262-03293-3&amp;rfr_id=info:sid/en.wikipedia.org:Rabin%E2%80%93Karp_algorithm"><span style="display: none;">&nbsp;</span></span>
</li>
<li>
<span class="citation book">K. Selçuk Candan; Maria Luisa Sapino (2010). <a rel="nofollow" class="external text" href="http://books.google.com/books?id=Uk9tyXgQME8C&amp;pg=PA205"><i>Data Management for Multimedia Retrieval</i></a>. Cambridge University Press. pp.&nbsp;205–206. <a href="http://en.m.wikipedia.org/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&nbsp;<a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-0-521-88739-7" title="Special:BookSources/978-0-521-88739-7">978-0-521-88739-7</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://books.google.com/books?id=Uk9tyXgQME8C&amp;pg=PA205">http://books.google.com/books?id=Uk9tyXgQME8C&amp;pg=PA205</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Data+Management+for+Multimedia+Retrieval&amp;rft.aulast=K.+Sel%C3%A7uk+Candan&amp;rft.au=K.+Sel%C3%A7uk+Candan&amp;rft.au=Maria+Luisa+Sapino&amp;rft.date=2010&amp;rft.pages=pp.%26nbsp%3B205%E2%80%93206&amp;rft.pub=Cambridge+University+Press&amp;rft.isbn=978-0-521-88739-7&amp;rft_id=http%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DUk9tyXgQME8C%26pg%3DPA205&amp;rfr_id=info:sid/en.wikipedia.org:Rabin%E2%80%93Karp_algorithm"><span style="display: none;">&nbsp;</span></span> (for the Bloom filter extension)</li>
</ul>

</div>
</div>		</div>
	</div>
			<div id="footer">
			<h2 class="section_heading" id="section_footer"><button>Show</button>
		<div class="license">Wikipedia ™</div>		<span class="toggleCopyright">
			<span class="more">more</span><span class="less">less</span>
		</span>
	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Rabin%E2%80%93Karp_string_search_algorithm&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li>
				<span class="left"><a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span><span class="right">Images ON / <a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions/DisableImages&amp;returnto=Rabin%E2%80%93Karp+algorithm&amp;mobiletoken=dc83e2c6ae93b1fadc6882196f529c1b" title="Special:MobileOptions/DisableImages" id="imagetoggle">OFF</a></span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Rabin%E2%80%93Karp_string_search_algorithm&amp;action=history">contributors</a> like you<br>
				Content available under <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>			</li>
		</ul>
		<ul class="links">
			<li>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Rabin%E2%80%93Karp+algorithm&amp;feedbacksource=MobileFrontend">Contact</a>
			</li><li>
			<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div>
	</div>
				<!--[if gt IE 7]><!-->
		<script type="text/javascript">mw={loader:{state:function(){}}};</script>		<script src="Rabin%E2%80%93Karp_string_search_algorithm_files/load_002.php" type="text/javascript"></script>
<script src="Rabin%E2%80%93Karp_string_search_algorithm_files/load.php" type="text/javascript"></script>	<script type="text/javascript">
	window.onload = function() {
		mw.mobileFrontend.init();
	};
	</script>
	<!----><!--[endif]---->
	
	<div style="display: none;" id="mf-references"><div></div><button>close</button></div></body></html>