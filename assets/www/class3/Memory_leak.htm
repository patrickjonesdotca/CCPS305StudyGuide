<!DOCTYPE html>
<html class="jsEnabled togglingEnabled" dir="ltr" lang="en"><head>
		<title>Memory leak - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<meta name="robots" content="noindex,nofollow">		<link rel="stylesheet" href="Memory_leak_files/load.css" type="text/css" media="all">		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png">		<script type="text/javascript">
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-header":"This article is available in 24 languages","mobile-frontend-language-footer":"<a href=\"\/wiki\/Special:Special:MobileOptions\/Language\">Wikipedia is available in other languages.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"scriptPath":"\/w","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			document.documentElement.className = 'jsEnabled page-loading';		</script>
		<link rel="canonical" href="http://en.wikipedia.org/wiki/Memory_leak">
	</head>
	<body class="mobile mw-mf-checkboxes">
							<div id="mw-mf-header">
					<form id="mw-mf-searchForm" action="/w/index.php" class="search_bar" method="get">
							<img alt="Logo" id="mw-mf-logo" src="Memory_leak_files/W_logo_for_Mobile_Frontend.gif" width="35" height="22">
						<input value="Special:Search" name="title" type="hidden">
			<div id="mw-mf-sq" class="divclearable">
				<input name="search" id="mw-mf-search" size="22" autocomplete="off" maxlength="1024" class="search" placeholder="Type your search here..." type="search">
				<img src="Memory_leak_files/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear">
			</div>
						<button id="goButton" class="goButton" type="submit">
				<img src="Memory_leak_files/blank.gif" alt="Go" title="Go">
			</button>
					</form>
									<div class="nav" id="nav">
				<div id="mw-mf-language-selection">
		Language:<br>
		<select id="languageselection"><option value="http://en.wikipedia.org/wiki/Memory_leak" selected="selected">English</option><option value="//ar.m.wikipedia.org/wiki/%D8%AA%D8%B3%D8%B1%D8%A8_%D8%A7%D9%84%D8%B0%D8%A7%D9%83%D8%B1%D8%A9">العربية</option><option value="//cs.m.wikipedia.org/wiki/%C3%9Anik_pam%C4%9Bti">česky</option><option value="//de.m.wikipedia.org/wiki/Speicherleck">Deutsch</option><option value="//es.m.wikipedia.org/wiki/Fuga_de_memoria">español</option><option value="//fa.m.wikipedia.org/wiki/%DA%A9%D9%85%D8%A8%D9%88%D8%AF_%D8%AD%D8%A7%D9%81%D8%B8%D9%87">فارسی</option><option value="//fr.m.wikipedia.org/wiki/Fuite_de_m%C3%A9moire">français</option><option value="//ko.m.wikipedia.org/wiki/%EB%A9%94%EB%AA%A8%EB%A6%AC_%EB%88%84%EC%88%98">한국어</option><option value="//id.m.wikipedia.org/wiki/Kebocoran_Memori">Bahasa Indonesia</option><option value="//it.m.wikipedia.org/wiki/Memory_leak">italiano</option><option value="//he.m.wikipedia.org/wiki/%D7%93%D7%9C%D7%99%D7%A4%D7%AA_%D7%96%D7%99%D7%9B%D7%A8%D7%95%D7%9F">עברית</option><option value="//lt.m.wikipedia.org/wiki/Atminties_nutek%C4%97jimas">lietuvių</option><option value="//ms.m.wikipedia.org/wiki/Bocor_ingatan">Bahasa Melayu</option><option value="//nl.m.wikipedia.org/wiki/Geheugenlek">Nederlands</option><option value="//ja.m.wikipedia.org/wiki/%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%AF">日本語</option><option value="//pl.m.wikipedia.org/wiki/Wyciek_pami%C4%99ci">polski</option><option value="//pt.m.wikipedia.org/wiki/Vazamento_de_mem%C3%B3ria">português</option><option value="//ru.m.wikipedia.org/wiki/%D0%A3%D1%82%D0%B5%D1%87%D0%BA%D0%B0_%D0%BF%D0%B0%D0%BC%D1%8F%D1%82%D0%B8">русский</option><option value="//sk.m.wikipedia.org/wiki/Memory_leak">slovenčina</option><option value="//fi.m.wikipedia.org/wiki/Muistivuoto">suomi</option><option value="//tr.m.wikipedia.org/wiki/Bellek_s%C4%B1z%C4%B1nt%C4%B1s%C4%B1">Türkçe</option><option value="//uk.m.wikipedia.org/wiki/%D0%92%D0%B8%D1%82%D1%96%D0%BA_%D0%BF%D0%B0%D0%BC%27%D1%8F%D1%82%D1%96">українська</option><option value="//zh-yue.m.wikipedia.org/wiki/%E6%BC%8F%E8%A8%98%E6%86%B6">粵語</option><option value="//zh.m.wikipedia.org/wiki/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F">中文</option></select>
	</div><br>
			<a href="http://en.m.wikipedia.org/wiki/Main_Page" id="homeButton" class="button">Home</a>
			<a href="http://en.m.wikipedia.org/wiki/Special:Random" id="randomButton" class="button">Random</a>
			</div>
		</div>
				<div id="results"><ul class="suggestions-results" title="No Results"><li class="suggestions-result">Type search term above and matching article titles will appear here.</li></ul></div>
		<div class="show" id="content_wrapper">
				<div id="content">
			<h1 id="firstHeading">Memory leak</h1>			
<p>A <b>memory leak</b>, in <a href="http://en.m.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a> (or <b>leakage</b>, in this context), occurs when a <a href="http://en.m.wikipedia.org/wiki/Computer_program" title="Computer program">computer program</a> consumes <a href="http://en.m.wikipedia.org/wiki/Computer_memory" title="Computer memory">memory</a> but is unable to release it back to the <a href="http://en.m.wikipedia.org/wiki/Operating_system" title="Operating system">operating system</a>. In <a href="http://en.m.wikipedia.org/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a>, a memory leak happens when an <a href="http://en.m.wikipedia.org/wiki/Object_%28computer_science%29" title="Object (computer science)">object</a> is stored in memory but cannot be accessed by the running code.<sup id="cite_ref-0" class="reference"><a href="#cite_note-0"><span>[</span>1<span>]</span></a></sup>
 A memory leak has symptoms similar to a number of other problems (see 
below) and generally can only be diagnosed by a programmer with access 
to the program <a href="http://en.m.wikipedia.org/wiki/Source_code" title="Source code">source code</a>; however, many people refer to <i>any</i> unwanted increase in memory usage as a memory leak, though this is not strictly accurate from a technical perspective.</p>
<p>Because they can exhaust available system memory as an application 
runs, memory leaks are often the cause or a contributing factor of <a href="http://en.m.wikipedia.org/wiki/Software_aging" title="Software aging">software aging</a>.</p>
<div class="section"><h2 class="section_heading" id="section_1"><button>Show</button><span id="Consequences">Consequences</span></h2><div class="content_block" id="content_1">
<p>A memory leak can diminish the performance of the computer by 
reducing the amount of available memory. Eventually, in the worst case, 
too much of the available memory may become allocated and all or part of
 the system or device stops working correctly, the application fails, or
 the system slows down unacceptably due to <a href="http://en.m.wikipedia.org/wiki/Thrashing_%28computer_science%29" title="Thrashing (computer science)">thrashing</a>.</p>
<p>Memory leaks may not be serious or even detectable by normal means. 
In modern operating systems, normal memory used by an application is 
released when the application terminates. This means that a memory leak 
in a program that only runs for a short time may not be noticed and is 
rarely serious.</p>
<p>Leaks that are much more serious include:</p>
<ul>
<li>Where the program runs for an extended time and consumes additional 
memory over time, such as background tasks on servers, but especially in
 <a href="http://en.m.wikipedia.org/wiki/Embedded_system" title="Embedded system">embedded devices</a> which may be left running for many years.</li>
<li>Where new memory is allocated frequently for one-time tasks, such as
 when rendering the frames of a computer game or animated video.</li>
<li>Where the program is able to request memory — such as <a href="http://en.m.wikipedia.org/wiki/Shared_memory" title="Shared memory">shared memory</a> — that is not released, even when the program terminates.</li>
<li>Where memory is very limited, such as in an <a href="http://en.m.wikipedia.org/wiki/Embedded_system" title="Embedded system">embedded system</a> or portable device.</li>
<li>Where the leak occurs within the operating system or <a href="http://en.m.wikipedia.org/wiki/Memory_manager" title="Memory manager">memory manager</a>.</li>
<li>Where the leak is the responsibility of a system <a href="http://en.m.wikipedia.org/wiki/Device_driver" title="Device driver">device driver</a>.</li>
<li>Where running on an operating systems that does not automatically 
release memory on program termination. Often on such machines if memory 
is lost, it can only be reclaimed by a <a href="http://en.m.wikipedia.org/wiki/Reboot" title="Reboot">reboot</a>, an example of such a system being <a href="http://en.m.wikipedia.org/wiki/AmigaOS" title="AmigaOS">AmigaOS</a>.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from July 2011">citation needed</span></a></i>]</sup>
</li>
</ul>
<h3> <span class="mw-headline" id="An_example_of_memory_leak">An example of memory leak</span>
</h3>
<p>The following example, written in <a href="http://en.m.wikipedia.org/wiki/Pseudocode" title="Pseudocode">pseudocode</a>,
 is intended to show how a memory leak can come about, and its effects, 
without needing any programming knowledge. The program in this case is 
part of some very simple software designed to control an <a href="http://en.m.wikipedia.org/wiki/Elevator" title="Elevator">elevator</a>. This part of the program is run whenever anyone inside the elevator presses the button for a floor.</p>
<pre>When a button is pressed:
  Get some memory, which will be used to remember the floor number
  Put the floor number into the memory
  Are we already on the target floor?
    If so, we have nothing to do: finished
    Otherwise:
      Wait until the lift is idle
      Go to the required floor
      Release the memory we used to remember the floor number
</pre>
<p>The memory leak would occur if the floor number requested is the same
 floor that the lift is on; the condition for releasing the memory would
 be skipped. Each time this case occurs, more memory is leaked.</p>
<p>Cases like this wouldn't usually have any immediate effects. People 
do not often press the button for the floor they are already on, and in 
any case, the lift might have enough spare memory that this could happen
 hundreds or thousands of times. However, the lift will eventually run 
out of memory. This could take months or years, so it might not be 
discovered despite thorough testing.</p>
<p>The consequences would be unpleasant; at the very least, the lift 
would stop responding to requests to move to another floor. If other 
parts of the program need memory (a part assigned to open and close the 
door, for example), then someone may be trapped inside, since the 
software cannot open the door.</p>
<p>The memory leak lasts until the system is reset. For example: if the 
lift's power were turned off the program would stop running. When power 
was turned on again, the program would restart and all the memory would 
be available again, but the slow process of memory leak would restart 
together with the program, eventually prejudicing the correct running of
 the system.</p>
</div><a id="anchor_1" href="#section_1" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_2"><button>Show</button><span id="Programming_issues">Programming issues</span></h2><div class="content_block" id="content_2">
<p>Memory leaks are a common error in <a href="http://en.m.wikipedia.org/wiki/Programming" title="Programming" class="mw-redirect">programming</a>, especially when using <a href="http://en.m.wikipedia.org/wiki/Programming_language" title="Programming language">languages</a> that have no built-in automatic <a href="http://en.m.wikipedia.org/wiki/Garbage_collection_%28computer_science%29" title="Garbage collection (computer science)">garbage collection</a>, such as <a href="http://en.m.wikipedia.org/wiki/C_%28programming_language%29" title="C (programming language)">C</a> and <a href="http://en.m.wikipedia.org/wiki/C%2B%2B" title="C++">C++</a>. Typically, a memory leak occurs because <a href="http://en.m.wikipedia.org/wiki/Dynamic_memory_allocation" title="Dynamic memory allocation" class="mw-redirect">dynamically allocated</a> memory has become <a href="http://en.m.wikipedia.org/wiki/Unreachable_memory" title="Unreachable memory">unreachable</a>. The prevalence of memory leak <a href="http://en.m.wikipedia.org/wiki/Software_bug" title="Software bug">bugs</a> has led to the development of a number of <a href="http://en.m.wikipedia.org/wiki/Debugging" title="Debugging">debugging</a> <a href="http://en.m.wikipedia.org/wiki/Programming_tool" title="Programming tool">tools</a> to detect unreachable memory. <i><a href="http://en.m.wikipedia.org/wiki/IBM_Rational_Purify" title="IBM Rational Purify">IBM Rational Purify</a></i>, <i><a href="http://en.m.wikipedia.org/wiki/BoundsChecker" title="BoundsChecker">BoundsChecker</a></i>, <i><a href="http://en.m.wikipedia.org/wiki/Valgrind" title="Valgrind">Valgrind</a></i>, <i><a href="http://en.m.wikipedia.org/wiki/Insure%2B%2B" title="Insure++">Insure++</a></i> and <i><a href="http://en.m.wikipedia.org/wiki/Memwatch" title="Memwatch">memwatch</a></i> are some of the more popular <a href="http://en.m.wikipedia.org/wiki/Memory_debugger" title="Memory debugger">memory debuggers</a>
 for C and C++ programs. "Conservative" garbage collection capabilities 
can be added to any programming language that lacks it as a built-in 
feature, and libraries for doing this are available for C and C++ 
programs. A conservative collector finds and reclaims most, but not all,
 unreachable memory.</p>
<p>Although the <a href="http://en.m.wikipedia.org/wiki/Memory_manager" title="Memory manager">memory manager</a>
 can recover unreachable memory, it cannot free memory that is still 
reachable and therefore potentially still useful. Modern memory managers
 therefore provide techniques for programmers to semantically mark 
memory with varying levels of usefulness, which correspond to varying 
levels of <i>reachability</i>. The memory manager does not free an 
object that is strongly reachable. An object is strongly reachable if it
 is reachable either directly by a <a href="http://en.m.wikipedia.org/wiki/Strong_reference" title="Strong reference">strong reference</a> or indirectly by a chain of strong references. (A <i>strong reference</i> is a reference that, unlike a <a href="http://en.m.wikipedia.org/wiki/Weak_reference" title="Weak reference">weak reference</a>,
 prevents an object from being garbage collected.) To prevent this, the 
developer is responsible for cleaning up references after use, typically
 by setting the reference to <a href="http://en.m.wikipedia.org/wiki/Null_pointer" title="Null pointer" class="mw-redirect">null</a> once it is no longer needed and, if necessary, by deregistering any <a href="http://en.m.wikipedia.org/wiki/Event_listener" title="Event listener" class="mw-redirect">event listeners</a> that maintain strong references to the object.</p>
<p>In general, automatic memory management is more robust and convenient
 for developers, as they don't need to implement freeing routines or 
worry about the sequence in which cleanup is performed or be concerned 
about whether or not an object is still referenced. It is easier for a 
programmer to know when a reference is no longer needed than to know 
when an object is no longer referenced. However, automatic memory 
management can impose a performance overhead, and it does not eliminate 
all of the programming errors that cause memory leaks.</p>
</div><a id="anchor_2" href="#section_2" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_3"><button>Show</button><span id="RAII">RAII</span></h2><div class="content_block" id="content_3">
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization" title="Resource Acquisition Is Initialization">Resource Acquisition Is Initialization</a>
</div>
<p><b>RAII</b>, short for <a href="http://en.m.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization" title="Resource Acquisition Is Initialization">Resource Acquisition Is Initialization</a>, is an approach to the problem commonly taken in <a href="http://en.m.wikipedia.org/wiki/C%2B%2B" title="C++">C++</a>, <a href="http://en.m.wikipedia.org/wiki/D_programming_language" title="D programming language" class="mw-redirect">D</a>, and <a href="http://en.m.wikipedia.org/wiki/Ada_%28programming_language%29" title="Ada (programming language)">Ada</a>.
 It involves associating scoped objects with the acquired resources, and
 automatically releasing the resources once the objects are out of 
scope. Unlike garbage collection, RAII has the advantage of knowing when
 objects exist and when they do not. Compare the following C and C++ 
examples:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1"><span class="coMULTI">/* C version */</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
 
<span class="kw4">void</span> f<span class="br0">(</span><span class="kw4">int</span> n<span class="br0">)</span>
<span class="br0">{</span>
  <span class="kw4">int</span><span class="sy0">*</span> array <span class="sy0">=</span> <span class="kw3">calloc</span><span class="br0">(</span>n<span class="sy0">,</span> <span class="kw4">sizeof</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
  do_some_work<span class="br0">(</span>array<span class="br0">)</span><span class="sy0">;</span>
  <span class="kw3">free</span><span class="br0">(</span>array<span class="br0">)</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1"><span class="co1">// C++ version</span>
<span class="co2">#include &lt;vector&gt;</span>
 
<span class="kw4">void</span> f<span class="br0">(</span><span class="kw4">int</span> n<span class="br0">)</span>
<span class="br0">{</span>
  std<span class="sy4">::</span><span class="me2">vector</span><span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> array <span class="br0">(</span>n<span class="br0">)</span><span class="sy4">;</span>
  do_some_work<span class="br0">(</span>array<span class="br0">)</span><span class="sy4">;</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<p>The C version, as implemented in the example, requires explicit deallocation; the array is <a href="http://en.m.wikipedia.org/wiki/Dynamic_memory_allocation" title="Dynamic memory allocation" class="mw-redirect">dynamically allocated</a> (from the heap in most C implementations), and continues to exist until explicitly freed.</p>
<p>The C++ version requires no explicit deallocation; it will always occur automatically as soon as the object <code>array</code> goes out of scope, including if an exception is thrown. This avoids some of the overhead of <a href="http://en.m.wikipedia.org/wiki/Garbage_collection_%28computer_science%29" title="Garbage collection (computer science)">garbage collection</a> schemes. And because object destructors can free resources other than memory, RAII helps to prevent the <a href="http://en.m.wikipedia.org/wiki/Handle_leak" title="Handle leak">leaking of input and output resources accessed through a handle</a>,
 which mark-and-sweep garbage collection does not handle gracefully. 
These include open files, open windows, user notifications, objects in a
 graphics drawing library, thread synchronisation primitives such as 
critical sections, network connections, and connections to the <a href="http://en.m.wikipedia.org/wiki/Windows_Registry" title="Windows Registry">Windows Registry</a> or another database.</p>
<p>However, using RAII correctly is not always easy and has its own 
pitfalls. For instance, if one is not careful, it is possible to create <a href="http://en.m.wikipedia.org/wiki/Dangling_pointer" title="Dangling pointer">dangling pointers</a> (or references) by returning data by reference, only to have that data be deleted when its containing object goes out of scope.</p>
<p><a href="http://en.m.wikipedia.org/wiki/D_%28programming_language%29" title="D (programming language)">D</a>
 uses a combination of RAII and garbage collection, employing automatic 
destruction when it is clear that an object cannot be accessed outside 
its original scope, and garbage collection otherwise.</p>
</div><a id="anchor_3" href="#section_3" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_4"><button>Show</button><span id="Reference_counting_and_cyclic_references">Reference counting and cyclic references</span></h2><div class="content_block" id="content_4">
<p>More modern <a href="http://en.m.wikipedia.org/wiki/Garbage_collection_%28computer_science%29" title="Garbage collection (computer science)">garbage collection</a>
 schemes are often based on a notion of reachability - if you don't have
 a usable reference to the memory in question, it can be collected. 
Other garbage collection schemes can be based on <a href="http://en.m.wikipedia.org/wiki/Reference_counting" title="Reference counting">reference counting</a>,
 where an object is responsible for keeping track of how many references
 are pointing to it. If the number goes down to zero, the object is 
expected to release itself and allow its memory to be reclaimed. The 
flaw with this model is that it doesn't cope with cyclic references, and
 this is why nowadays most programmers are prepared to accept the burden
 of the more costly mark and sweep type of systems.</p>
<p>The following <a href="http://en.m.wikipedia.org/wiki/Visual_Basic" title="Visual Basic">Visual Basic</a> code illustrates the canonical reference-counting memory leak:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="vb source-vb">
<pre class="de1"><span class="kw4">Dim</span> A, B
<span class="kw4">Set</span> A = <span class="kw2">CreateObject</span>(<span class="st0">"Some.Thing"</span>)
<span class="kw4">Set</span> B = <span class="kw2">CreateObject</span>(<span class="st0">"Some.Thing"</span>)
<span class="co1">' At this point, the two objects each have one reference,
</span>
<span class="kw4">Set</span> A.member = B
<span class="kw4">Set</span> B.member = A
<span class="co1">' Now they each have two references.
</span>
<span class="kw4">Set</span> A = <span class="kw5">Nothing</span>   <span class="co1">' You could still get out of it...
</span>
<span class="kw4">Set</span> B = <span class="kw5">Nothing</span>   <span class="co1">' And now you've got a memory leak!
</span>
<span class="kw3">End</span>
</pre>
</div>
</div>
<p>In practice, this trivial example would be spotted straight away and 
fixed. In most real examples, the cycle of references spans more than 
two objects, and is more difficult to detect.</p>
<p>A well-known example of this kind of leak came to prominence with the rise of <a href="http://en.m.wikipedia.org/wiki/AJAX" title="AJAX" class="mw-redirect">AJAX</a> programming techniques in <a href="http://en.m.wikipedia.org/wiki/Web_browser" title="Web browser">web browsers</a>. <a href="http://en.m.wikipedia.org/wiki/Javascript" title="Javascript" class="mw-redirect">Javascript</a> code which associated a <a href="http://en.m.wikipedia.org/wiki/Document_Object_Model" title="Document Object Model">DOM</a>
 element with an event handler and failed to remove the reference before
 exiting, would leak memory (AJAX web pages keep a given DOM alive for a
 lot longer than traditional web pages, so this leak was much more 
apparent).</p>
</div><a id="anchor_4" href="#section_4" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_5"><button>Show</button><span id="Effects">Effects</span></h2><div class="content_block" id="content_5">
<p>If a program has a memory leak and its memory usage is steadily 
increasing, there will not usually be an immediate symptom. Every 
physical system has a finite amount of memory, and if the memory leak is
 not contained (for example, by restarting the leaking program) it will 
sooner or later start to cause problems.</p>
<p>Most modern consumer desktop <a href="http://en.m.wikipedia.org/wiki/Operating_systems" title="Operating systems" class="mw-redirect">operating systems</a> have both <a href="http://en.m.wikipedia.org/wiki/Main_memory" title="Main memory" class="mw-redirect">main memory</a> which is physically housed in RAM microchips, and <a href="http://en.m.wikipedia.org/wiki/Secondary_storage" title="Secondary storage" class="mw-redirect">secondary storage</a> such as a <a href="http://en.m.wikipedia.org/wiki/Hard_drive" title="Hard drive" class="mw-redirect">hard drive</a>. Memory allocation is dynamic - each process gets as much memory as it requests. Active <a href="http://en.m.wikipedia.org/wiki/Paging" title="Paging">pages</a>
 are transferred into main memory for fast access; inactive pages are 
pushed out to secondary storage to make room, as needed. When a single 
process starts consuming a large amount of memory, it usually occupies 
more and more of main memory, pushing other programs out to secondary 
storage - usually significantly slowing performance of the system. Even 
if the leaking program is terminated, it may take some time for other 
programs to swap back into main memory, and for performance to return to
 normal.</p>
<p>When all the memory on a system is exhausted (whether there is 
virtual memory or only main memory, such as on an embedded system) any 
attempt to allocate more memory will fail. This usually causes the 
program attempting to allocate the memory to terminate itself, or to 
generate a <a href="http://en.m.wikipedia.org/wiki/Segmentation_fault" title="Segmentation fault">segmentation fault</a>.
 Some programs are designed to recover from this situation (possibly by 
falling back on pre-reserved memory). The first program to experience 
the out-of-memory may or may not be the program that has the memory 
leak.</p>
<p>Some <a href="http://en.m.wikipedia.org/wiki/Computer_multitasking" title="Computer multitasking">multi-tasking</a>
 operating systems have special mechanisms to deal with an out-of-memory
 condition, such as killing processes at random (which may affect 
"innocent" processes), or killing the largest process in memory (which 
presumably is the one causing the problem). Some operating systems have a
 per-process memory limit, to prevent any one program from hogging all 
of the memory on the system. The disadvantage to this arrangement is 
that the operating system sometimes must be re-configured to allow 
proper operation of programs that legitimately require large amounts of 
memory, such as those dealing with graphics, video, or scientific 
calculations.</p>
<div class="thumb tright">
<div class="thumbinner" style="width:222px;">
<a href="http://en.m.wikipedia.org/wiki/File:Sample_sawtooth.jpg" class="image"><img alt="" src="Memory_leak_files/220px-Sample_sawtooth.jpg" class="thumbimage" width="220" height="147"></a>
<div class="thumbcaption">

The "sawtooth" pattern of memory utilization: the sudden drop in used memory is a candidate symptom for a memory leak.</div>
</div>
</div>
<p>If the memory leak is in the <a href="http://en.m.wikipedia.org/wiki/Kernel_%28computer_science%29" title="Kernel (computer science)" class="mw-redirect">kernel</a>,
 the operating system itself will likely fail. Computers without 
sophisticated memory management, such as embedded systems, may also 
completely fail from a persistent memory leak.</p>
<p>Publicly accessible systems such as <a href="http://en.m.wikipedia.org/wiki/Web_server" title="Web server">web servers</a> or <a href="http://en.m.wikipedia.org/wiki/Router_%28computing%29" title="Router (computing)">routers</a> are prone to <a href="http://en.m.wikipedia.org/wiki/Dos_attack" title="Dos attack" class="mw-redirect">denial-of-service attacks</a> if an attacker discovers a sequence of operations which can trigger a leak. Such a sequence is known as an <a href="http://en.m.wikipedia.org/wiki/Exploit_%28computer_security%29" title="Exploit (computer security)">exploit</a>.</p>
<p>A "sawtooth" pattern of memory utilization may be an indicator of a 
memory leak if the vertical drops coincide with reboots or application 
restarts. Care should be taken though because <a href="http://en.m.wikipedia.org/wiki/Garbage_collection_%28computer_science%29" title="Garbage collection (computer science)">garbage collection</a> points could also cause such a pattern.</p>
</div><a id="anchor_5" href="#section_5" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_6"><button>Show</button><span id="Other_memory_consumers">Other memory consumers</span></h2><div class="content_block" id="content_6">
<p>Note that constantly increasing memory usage is not necessarily 
evidence of a memory leak. Some applications will store ever increasing 
amounts of information in memory (e.g. as a <a href="http://en.m.wikipedia.org/wiki/Cache_%28computing%29" title="Cache (computing)">cache</a>).
 If the cache can grow so large as to cause problems, this may be a 
programming or design error, but is not a memory leak as the information
 remains nominally in use. In other cases, programs may require an 
unreasonably large amount of memory because the programmer has assumed 
memory is always sufficient for a particular task; for example, a 
graphics file processor might start by reading the entire contents of an
 image file and storing it all into memory, something that is not viable
 where a very large image exceeds available memory.</p>
<p>To put it another way, a memory leak arises from a particular kind of
 programming error, and without access to the program code, someone 
seeing symptoms can only guess that there <i>might</i> be a memory leak.
 It would be better to use terms such as "constantly increasing memory 
use" where no such inside knowledge exists.</p>
</div><a id="anchor_6" href="#section_6" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_7"><button>Show</button><span id="A_simple_example_in_C">A simple example in C</span></h2><div class="content_block" id="content_7">
<p>The following <a href="http://en.m.wikipedia.org/wiki/C_%28programming_language%29" title="C (programming language)">C</a>
 function deliberately leaks memory by losing the pointer to the 
allocated memory. Since the program loops forever calling the memory 
allocation function, <code>malloc()</code>, but without saving the address, it will eventually fail (returning <code>NULL</code>)
 when no more memory is available to the program. Because the address of
 each allocation is not stored, it is impossible to free any of the 
previously allocated blocks. It should be noted that, generally, the 
operating system delays real memory allocation until something is 
written into it. So the program ends when virtual addresses run out of 
bounds (per process limits or 2 to 4&nbsp;GiB on <a href="http://en.m.wikipedia.org/wiki/IA-32" title="IA-32">IA-32</a> or a lot more on <a href="http://en.m.wikipedia.org/wiki/X86-64" title="X86-64">x86-64</a> systems) and there may be no real impact on the rest of the system.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1"><span class="co2">#include &lt;stdlib.h&gt;</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
     <span class="coMULTI">/* this is an infinite loop calling the malloc function which
      * allocates the memory but without saving the address of the
      * allocated place */</span>
     <span class="kw1">while</span> <span class="br0">(</span><span class="kw3">malloc</span><span class="br0">(</span><span class="nu0">50</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span> <span class="coMULTI">/* malloc will return NULL sooner or later, due to lack of memory */</span>
     <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* free the allocated memory by operating system itself after program exits */</span>
<span class="br0">}</span>
</pre>
</div>
</div>
</div><a id="anchor_7" href="#section_7" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_8"><button>Show</button><span id="See_also">See also</span></h2><div class="content_block" id="content_8">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Buffer_overflow" title="Buffer overflow">Buffer overflow</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Memory_management" title="Memory management">Memory management</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Memory_debugger" title="Memory debugger">Memory debugger</a></li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Nmon" title="Nmon">nmon</a> (short for Nigel's Monitor) is a popular system monitor tool for the AIX and Linux operating systems.</li>
</ul>
</div><a id="anchor_8" href="#section_8" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_9"><button>Show</button><span id="References">References</span></h2><div class="content_block" id="content_9">
<ol class="references">
<li id="cite_note-0">
<span class="mw-cite-backlink"><b><a href="#cite_ref-0">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://stackoverflow.com/questions/6470651/creating-a-memory-leak-with-java">http://stackoverflow.com/questions/6470651/creating-a-memory-leak-with-java</a></span>
</li>
</ol>
<h3> <span class="mw-headline" id="Articles">Articles</span>
</h3>
<table class="metadata plainlinks ambox ambox-style ambox-No_footnotes" style=""><tbody><tr>
<td class="mbox-image">
<div style="width: 52px;"><img alt="" src="Memory_leak_files/40px-Text_document_with_red_question_mark.png" width="40" height="40"></div>
</td>
<td class="mbox-text" style=""><span class="mbox-text-span">This article includes a <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">list of references</a>, related reading or <a href="http://en.m.wikipedia.org/wiki/Wikipedia:External_links" title="Wikipedia:External links">external links</a>, but <b>its sources remain unclear because it lacks <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citing_sources#Inline_citations" title="Wikipedia:Citing sources">inline citations</a></b>. <span class="hide-when-compact">Please <a href="http://en.m.wikipedia.org/wiki/Wikipedia:WikiProject_Fact_and_Reference_Check" title="Wikipedia:WikiProject Fact and Reference Check">improve</a> this article by introducing more precise citations.</span> <small><i>(September 2007)</i></small> </span></td>
</tr></tbody></table>
<div class="refbegin" style="">
<ul>
<li>
<a rel="nofollow" class="external text" href="http://msdn2.microsoft.com/en-us/library/Aa293901%28VS.60%29.aspx">Detecting a Memory Leak</a> (Using MFC Debugging Support)</li>
<li>Article "<a rel="nofollow" class="external text" href="http://linuxjournal.com/article.php?sid=6556">Memory Leak Detection in C++</a>" by Cal Erickson</li>
<li>Article "<a rel="nofollow" class="external text" href="http://linuxjournal.com/article.php?sid=6059">Memory Leak Detection in Embedded Systems</a>" by Cal Erickson</li>
<li>
<a rel="nofollow" class="external text" href="http://jb2works.com/memoryleak/index.html">Why doesn't my application release the memory?</a> (Java FAQ)</li>
<li>Article "<a rel="nofollow" class="external text" href="http://developer.kde.org/documentation/other/memoryleaks.html">Fixing Memory Leaks in KDE</a>" by <a href="http://en.m.wikipedia.org/wiki/Harri_Porten" title="Harri Porten">Harri Porten</a>
</li>
<li>
<a rel="nofollow" class="external text" href="http://www.rt-embedded.com/blog/archives/memory-leaks/">Resolving memory leaks</a>, an article from the Real-Time embedded blog.</li>
</ul>
</div>
<ul>
<li>Article "<a rel="nofollow" class="external text" href="http://olex.openlogic.com/wazi/2009/how-to-fix-memory-leaks-in-java/">how to fix memory leaks in java</a>" How to Fix Memory Leaks in Java by Veljko Krunic</li>
</ul>
<table class="navbox" style="border-spacing: 0pt;" cellspacing="0"><tbody><tr>
<td style="padding: 2px;">
<table class="nowraplinks hlist collapsible autocollapse navbox-inner" style="border-spacing: 0pt; background: none repeat scroll 0% 0% transparent; color: inherit;" cellspacing="0">
<tbody><tr>
<th scope="col" style="" class="navbox-title" colspan="2">
<div class="noprint plainlinks hlist navbar mini" style="">
<ul>
<li class="nv-view"><a href="http://en.m.wikipedia.org/wiki/Template:Memory_management_navbox" title="Template:Memory management navbox"><span title="View this template" style=";;background:none transparent;border:none;">v</span></a></li>
<li class="nv-talk"><a href="http://en.m.wikipedia.org/wiki/Template_talk:Memory_management_navbox" title="Template talk:Memory management navbox"><span title="Discuss this template" style=";;background:none transparent;border:none;">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Memory_management_navbox&amp;action=edit"><span title="Edit this template" style=";;background:none transparent;border:none;">e</span></a></li>
</ul>
</div>
<div class="" style="font-size:110%;"><a href="http://en.m.wikipedia.org/wiki/Memory_management" title="Memory management">Memory management</a></div>
</th>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style=""><a href="http://en.m.wikipedia.org/wiki/Manual_memory_management" title="Manual memory management">Manual memory management</a></th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Delete_%28C%2B%2B%29" title="Delete (C++)">delete (C++)</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/C_dynamic_memory_allocation" title="C dynamic memory allocation">C dynamic memory allocation</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/New_%28C%2B%2B%29" title="New (C++)">new (C++)</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Static_memory_allocation" title="Static memory allocation">Static memory allocation</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style=""><a href="http://en.m.wikipedia.org/wiki/Virtual_memory" title="Virtual memory">Virtual memory</a></th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Demand_paging" title="Demand paging">Demand paging</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Page_table" title="Page table">Page table</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Paging" title="Paging">Paging</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Hardware</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Memory_management_unit" title="Memory management unit">Memory management unit</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Translation_lookaside_buffer" title="Translation lookaside buffer">Translation lookaside buffer</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style=""><a href="http://en.m.wikipedia.org/wiki/Garbage_collection_%28computer_science%29" title="Garbage collection (computer science)">Garbage collection</a></th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Boehm_garbage_collector" title="Boehm garbage collector">Boehm garbage collector</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Finalizer" title="Finalizer">Finalizer</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Garbage_%28computer_science%29" title="Garbage (computer science)">Garbage</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Reference_counting" title="Reference counting">Reference counting</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Strong_reference" title="Strong reference">Strong reference</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Weak_reference" title="Weak reference">Weak reference</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style=""><a href="http://en.m.wikipedia.org/wiki/Memory_segmentation" title="Memory segmentation">Memory segmentation</a></th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Protected_mode" title="Protected mode">Protected mode</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Real_mode" title="Real mode">Real mode</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Virtual_8086_mode" title="Virtual 8086 mode">Virtual 8086 mode</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/X86_memory_segmentation" title="X86 memory segmentation">x86 memory segmentation</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style=""><a href="http://en.m.wikipedia.org/wiki/Memory_safety" title="Memory safety">Memory safety</a></th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Buffer_overflow" title="Buffer overflow">Buffer overflow</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Dangling_pointer" title="Dangling pointer">Dangling pointer</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Stack_overflow" title="Stack overflow">Stack overflow</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Issues</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Fragmentation_%28computer%29" title="Fragmentation (computer)" class="mw-redirect">Fragmentation</a></li>
<li><strong class="selflink">Memory leak</strong></li>
<li><a href="http://en.m.wikipedia.org/wiki/Unreachable_memory" title="Unreachable memory">Unreachable memory</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height: 2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="">Other</th>
<td style="text-align: left; border-left-width: 2px; border-left-style: solid; width: 100%; padding: 0px;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Automatic_variable" title="Automatic variable">Automatic variable</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/International_Symposium_on_Memory_Management" title="International Symposium on Memory Management">International Symposium on Memory Management</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Region-based_memory_management" title="Region-based memory management">Region-based memory management</a></li>
</ul>
</div>
</td>
</tr>
</tbody></table>
</td>
</tr></tbody></table>

</div>
</div>		</div>
	</div>
			<div id="footer">
			<h2 class="section_heading" id="section_footer"><button>Show</button>
		<div class="license">Wikipedia ™</div>		<span class="toggleCopyright">
			<span class="more">more</span><span class="less">less</span>
		</span>
	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Memory_leak&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li>
				<span class="left"><a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span><span class="right">Images ON / <a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions/DisableImages&amp;returnto=Memory+leak&amp;mobiletoken=dc83e2c6ae93b1fadc6882196f529c1b" title="Special:MobileOptions/DisableImages" id="imagetoggle">OFF</a></span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Memory_leak&amp;action=history">contributors</a> like you<br>
				Content available under <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>			</li>
		</ul>
		<ul class="links">
			<li>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Memory+leak&amp;feedbacksource=MobileFrontend">Contact</a>
			</li><li>
			<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div>
	</div>
				<!--[if gt IE 7]><!-->
		<script type="text/javascript">mw={loader:{state:function(){}}};</script>		<script src="Memory_leak_files/load_002.php" type="text/javascript"></script>
<script src="Memory_leak_files/load.php" type="text/javascript"></script>	<script type="text/javascript">
	window.onload = function() {
		mw.mobileFrontend.init();
	};
	</script>
	<!----><!--[endif]---->
	
	<div style="display: none;" id="mf-references"><div></div><button>close</button></div></body></html>