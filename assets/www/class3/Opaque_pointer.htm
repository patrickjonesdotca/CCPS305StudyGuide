<!DOCTYPE html>
<html class="jsEnabled togglingEnabled" dir="ltr" lang="en"><head>
		<title>Opaque pointer - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<meta name="robots" content="noindex,nofollow">		<link rel="stylesheet" href="Opaque_pointer_files/load.css" type="text/css" media="all">		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png">		<script type="text/javascript">
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-header":"This article is available in 1 language","mobile-frontend-language-footer":"<a href=\"\/wiki\/Special:Special:MobileOptions\/Language\">Wikipedia is available in other languages.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"scriptPath":"\/w","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			document.documentElement.className = 'jsEnabled page-loading';		</script>
		<link rel="canonical" href="http://en.wikipedia.org/wiki/Opaque_pointer">
	</head>
	<body class="mobile mw-mf-checkboxes">
							<div id="mw-mf-header">
					<form id="mw-mf-searchForm" action="/w/index.php" class="search_bar" method="get">
							<img alt="Logo" id="mw-mf-logo" src="Opaque_pointer_files/W_logo_for_Mobile_Frontend.gif" width="35" height="22">
						<input value="Special:Search" name="title" type="hidden">
			<div id="mw-mf-sq" class="divclearable">
				<input name="search" id="mw-mf-search" size="22" autocomplete="off" maxlength="1024" class="search" placeholder="Type your search here..." type="search">
				<img src="Opaque_pointer_files/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear">
			</div>
						<button id="goButton" class="goButton" type="submit">
				<img src="Opaque_pointer_files/blank.gif" alt="Go" title="Go">
			</button>
					</form>
									<div class="nav" id="nav">
			<br>
			<a href="http://en.m.wikipedia.org/wiki/Main_Page" id="homeButton" class="button">Home</a>
			<a href="http://en.m.wikipedia.org/wiki/Special:Random" id="randomButton" class="button">Random</a>
			</div>
		</div>
				<div id="results"><ul class="suggestions-results" title="No Results"><li class="suggestions-result">Type search term above and matching article titles will appear here.</li></ul></div>
		<div class="show" id="content_wrapper">
				<div id="content">
			<h1 id="firstHeading">Opaque pointer</h1>			
<p>In <a href="http://en.m.wikipedia.org/wiki/Computer_programming" title="Computer programming">computer programming</a>, an <b>opaque pointer</b> is a special case of an <a href="http://en.m.wikipedia.org/wiki/Opaque_data_type" title="Opaque data type">opaque data type</a>, a <a href="http://en.m.wikipedia.org/wiki/Datatype" title="Datatype" class="mw-redirect">datatype</a> declared to be a <a href="http://en.m.wikipedia.org/wiki/Pointer_%28computer_science%29" title="Pointer (computer science)" class="mw-redirect">pointer</a> to a <a href="http://en.m.wikipedia.org/wiki/Record_%28computer_science%29" title="Record (computer science)">record</a> or <a href="http://en.m.wikipedia.org/wiki/Data_structure" title="Data structure">data structure</a> of some unspecified type.</p>
<p>Opaque pointers are present in several <a href="http://en.m.wikipedia.org/wiki/Programming_language" title="Programming language">programming languages</a> including <a href="http://en.m.wikipedia.org/wiki/Ada_%28programming_language%29" title="Ada (programming language)">Ada</a>, <a href="http://en.m.wikipedia.org/wiki/C_%28programming_language%29" title="C (programming language)">C</a>, <a href="http://en.m.wikipedia.org/wiki/C%2B%2B" title="C++">C++</a> and <a href="http://en.m.wikipedia.org/wiki/Modula-2" title="Modula-2">Modula-2</a>.</p>
<p>If the language is <a href="http://en.m.wikipedia.org/wiki/Strong_typing" title="Strong typing">strongly typed</a>, <a href="http://en.m.wikipedia.org/wiki/Computer_program" title="Computer program">programs</a> and <a href="http://en.m.wikipedia.org/wiki/Subroutine" title="Subroutine">procedures</a> that have no other information about an opaque pointer type <i>T</i> can still declare <a href="http://en.m.wikipedia.org/wiki/Variable_%28programming%29" title="Variable (programming)" class="mw-redirect">variables</a>, <a href="http://en.m.wikipedia.org/wiki/Array_data_structure" title="Array data structure">arrays</a>, and record fields of type <i>T</i>, assign values of that type, and compare those values for equality. However, they will not be able to <a href="http://en.m.wikipedia.org/wiki/Reference_%28computer_science%29" title="Reference (computer science)">de-reference</a> such a pointer, and can only change the object's content by calling some procedure that has the missing information.</p>
<p>Opaque pointers are a way to hide the <a href="http://en.m.wikipedia.org/wiki/Implementation_%28computing%29" title="Implementation (computing)" class="mw-redirect">implementation</a> details of an <a href="http://en.m.wikipedia.org/wiki/Interface_%28computer_science%29" title="Interface (computer science)" class="mw-redirect">interface</a> from ordinary clients, so that the <a href="http://en.m.wikipedia.org/wiki/Implementation_%28computing%29" title="Implementation (computing)" class="mw-redirect">implementation</a> may be changed without the need to recompile the <a href="http://en.m.wikipedia.org/wiki/Module_%28programming%29" title="Module (programming)" class="mw-redirect">modules</a>
 using it. This benefits the programmer as well since a simple interface
 can be created, and most details can be hidden in another file.<sup id="cite_ref-0" class="reference"><a href="#cite_note-0"><span>[</span>1<span>]</span></a></sup> This is important for providing <a href="http://en.m.wikipedia.org/wiki/Binary_code_compatibility" title="Binary code compatibility">binary code compatibility</a> through different versions of a <a href="http://en.m.wikipedia.org/wiki/Shared_library" title="Shared library" class="mw-redirect">shared library</a>, for example.</p>
<p>This technique is described in <a href="http://en.m.wikipedia.org/wiki/Design_Patterns" title="Design Patterns">Design Patterns</a> as the <a href="http://en.m.wikipedia.org/wiki/Bridge_pattern" title="Bridge pattern">Bridge pattern</a>. It is sometimes referred to as "<b>handle classes</b>",<sup id="cite_ref-eckel20000_1-0" class="reference"><a href="#cite_note-eckel20000-1"><span>[</span>2<span>]</span></a></sup> the "<b>Pimpl idiom</b>" (for "pointer to implementation idiom"),<sup id="cite_ref-2" class="reference"><a href="#cite_note-2"><span>[</span>3<span>]</span></a></sup> "<b>Compiler firewall idiom</b>"<sup id="cite_ref-3" class="reference"><a href="#cite_note-3"><span>[</span>4<span>]</span></a></sup> or "<b>Cheshire Cat</b>", especially among the C++ community.<sup id="cite_ref-eckel20000_1-1" class="reference"><a href="#cite_note-eckel20000-1"><span>[</span>2<span>]</span></a></sup></p>
<div class="section"><h2 class="section_heading" id="section_1"><button>Show</button><span id="Examples">Examples</span></h2><div class="content_block" id="content_1">
<h3> <span class="mw-headline" id="Ada">Ada</span>
</h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="ada source-ada">
<pre class="de1"><span class="kw3">package</span> Library_Interface <span class="kw1">is</span>
 
   <span class="kw3">type</span> Handle <span class="kw1">is</span> <span class="kw3">limited</span> <span class="kw3">private</span>;
 
   <span class="co1">-- Operations...</span>
 
<span class="kw3">private</span>
   <span class="kw3">type</span> Hidden_Implementation;    <span class="co1">-- Defined in the package body</span>
   <span class="kw3">type</span> Handle <span class="kw1">is</span> <span class="kw3">access</span> Hidden_Implementation;
<span class="kw1">end</span> Library_Interface;
</pre>
</div>
</div>
<p>The type <code>Handle</code> is an opaque pointer to the real 
implementation, that is not defined in the specification. Note that the 
type is not only private (to forbid the clients from accessing the type 
directly, and only through the operations), but also limited (to avoid 
the copy of the data structure, and thus preventing dangling 
references).</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="ada source-ada">
<pre class="de1"><span class="kw3">package</span> <span class="kw3">body</span> Library_Interface <span class="kw1">is</span>
 
   <span class="kw3">type</span> Hidden_Implementation <span class="kw1">is</span> <span class="kw3">record</span>
      ...    <span class="co1">-- The actual implementation can be anything</span>
   <span class="kw1">end</span> <span class="kw3">record</span>;
 
   <span class="co1">-- Definition of the operations...</span>
 
<span class="kw1">end</span> Library_Interface;
</pre>
</div>
</div>
<p>These types are sometimes called "<b>Taft types</b>"—named after <span class="new" title="Tucker Taft (page does not exist)">Tucker Taft</span>, the main designer of Ada 95—because they were introduced in the so-called Taft Amendment to Ada 83.<sup id="cite_ref-4" class="reference"><a href="#cite_note-4"><span>[</span>5<span>]</span></a></sup></p>
<h3> <span class="mw-headline" id="C">C</span>
</h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1"><span class="coMULTI">/* obj.h */</span>
 
<span class="kw4">struct</span> obj<span class="sy0">;</span>
 
<span class="coMULTI">/*
 * The compiler considers struct obj an incomplete type. Incomplete types
 * can be used in declarations.
 */</span>
 
<span class="kw4">size_t</span> obj_size<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="sy0">;</span>
 
<span class="kw4">int</span> obj_setid<span class="br0">(</span><span class="kw4">struct</span> obj <span class="sy0">*,</span> <span class="kw4">int</span><span class="br0">)</span><span class="sy0">;</span>
 
<span class="kw4">int</span> obj_getid<span class="br0">(</span><span class="kw4">struct</span> obj <span class="sy0">*,</span> <span class="kw4">int</span> <span class="sy0">*</span><span class="br0">)</span><span class="sy0">;</span>
</pre>
</div>
</div>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1"><span class="coMULTI">/* obj.c */</span>
 
<span class="co2">#include "obj.h"</span>
 
<span class="kw4">struct</span> obj <span class="br0">{</span>
    <span class="kw4">int</span> id<span class="sy0">;</span>
<span class="br0">}</span><span class="sy0">;</span>
 
<span class="coMULTI">/*
 * The caller will handle allocation.
 * Provide the required information only
 */</span>
 
<span class="kw4">size_t</span>
obj_size<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw1">return</span> <span class="kw4">sizeof</span><span class="br0">(</span><span class="kw4">struct</span> obj<span class="br0">)</span><span class="sy0">;</span>
<span class="br0">}</span>
 
<span class="kw4">int</span>
obj_setid<span class="br0">(</span><span class="kw4">struct</span> obj <span class="sy0">*</span>o<span class="sy0">,</span> <span class="kw4">int</span> i<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw1">if</span> <span class="br0">(</span>o <span class="sy0">==</span> NULL<span class="br0">)</span> <span class="kw1">return</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
    o<span class="sy0">-&gt;</span>id <span class="sy0">=</span> i<span class="sy0">;</span>
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">}</span>
 
<span class="kw4">int</span>
obj_getid<span class="br0">(</span><span class="kw4">struct</span> obj <span class="sy0">*</span>o<span class="sy0">,</span> <span class="kw4">int</span> <span class="sy0">*</span>i<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw1">if</span> <span class="br0">(</span>o <span class="sy0">==</span> NULL<span class="br0">)</span> <span class="kw1">return</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
    <span class="sy0">*</span>i <span class="sy0">=</span> o<span class="sy0">-&gt;</span>id<span class="sy0">;</span>
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<p>This example demonstrates a way to achieve the <a href="http://en.m.wikipedia.org/wiki/Information_hiding" title="Information hiding">information hiding</a> (<a href="http://en.m.wikipedia.org/wiki/Encapsulation_%28computer_science%29" title="Encapsulation (computer science)" class="mw-redirect">encapsulation</a>) aspect of <a href="http://en.m.wikipedia.org/wiki/Object-Oriented_Programming" title="Object-Oriented Programming" class="mw-redirect">Object-Oriented Programming</a>
 using the C language. If someone wanted to change the declaration of 
struct obj, it would be unnecessary to recompile any other modules in 
the program that use the obj.h header file unless the <a href="http://en.m.wikipedia.org/wiki/API" title="API" class="mw-redirect">API</a> was also changed.</p>
<h3> <span class="mw-headline" id="C.2B.2B">C++</span>
</h3>
<dl>
<dd><i>In the example below, the <a href="http://en.m.wikipedia.org/wiki/Assignment_operator_in_C%2B%2B" title="Assignment operator in C++" class="mw-redirect">copy assignment operator</a> takes its argument <a href="http://en.m.wikipedia.org/wiki/Evaluation_strategy#Call_by_value" title="Evaluation strategy">by value</a>, eliminating the need to explicitly create a copy of the <code>other</code> object.</i></dd>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1"><span class="co1">//header file:</span>
<span class="kw2">class</span> Handle <span class="br0">{</span>
<span class="kw2">private</span><span class="sy4">:</span>
    <span class="kw4">struct</span> CheshireCat<span class="sy4">;</span>            <span class="co1">// Not defined here</span>
    CheshireCat<span class="sy2">*</span> smile<span class="sy4">;</span>            <span class="co1">// Handle</span>
 
<span class="kw2">public</span><span class="sy4">:</span>
    Handle<span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span>                      <span class="co1">// Constructor</span>
    Handle<span class="br0">(</span><span class="kw4">const</span> Handle<span class="sy3">&amp;</span><span class="br0">)</span><span class="sy4">;</span>         <span class="co1">// Copy constructor</span>
    <span class="kw4">const</span> Handle<span class="sy3">&amp;</span> operator<span class="sy1">=</span><span class="br0">(</span>Handle<span class="br0">)</span><span class="sy4">;</span>     <span class="co1">// Copy assignment operator</span>
    ~Handle<span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span>                     <span class="co1">// Destructor</span>
    <span class="co1">// Other operations...</span>
<span class="br0">}</span><span class="sy4">;</span>
</pre>
</div>
</div>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1"><span class="co1">//CPP file:</span>
<span class="co2">#include "handle.h"</span>
 
<span class="kw4">struct</span> Handle<span class="sy4">::</span><span class="me2">CheshireCat</span> <span class="br0">{</span>
    <span class="kw4">int</span> a<span class="sy4">;</span>
    <span class="kw4">int</span> b<span class="sy4">;</span>
<span class="br0">}</span><span class="sy4">;</span>
 
Handle<span class="sy4">::</span><span class="me2">Handle</span><span class="br0">(</span><span class="br0">)</span>
    <span class="sy4">:</span> smile<span class="br0">(</span><span class="kw3">new</span> CheshireCat<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="co1">// do nothing</span>
<span class="br0">}</span>
 
Handle<span class="sy4">::</span><span class="me2">Handle</span><span class="br0">(</span><span class="kw4">const</span> Handle<span class="sy3">&amp;</span> other<span class="br0">)</span>
    <span class="sy4">:</span> smile<span class="br0">(</span><span class="kw3">new</span> CheshireCat<span class="br0">(</span><span class="sy2">*</span><span class="br0">(</span>other.<span class="me1">smile</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="co1">// do nothing</span>
<span class="br0">}</span>
 
<span class="kw4">const</span> Handle<span class="sy3">&amp;</span> Handle<span class="sy4">::</span><span class="me2">operator</span><span class="sy1">=</span><span class="br0">(</span>Handle other<span class="br0">)</span> <span class="br0">{</span>
    std<span class="sy4">::</span><span class="me2">swap</span><span class="br0">(</span>this<span class="sy2">-</span><span class="sy1">&gt;</span>smile, other.<span class="me1">smile</span><span class="br0">)</span><span class="sy4">;</span>
    <span class="kw1">return</span><span class="sy2">*</span> <span class="kw3">this</span><span class="sy4">;</span>
<span class="br0">}</span>
 
Handle<span class="sy4">::</span>~Handle<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw3">delete</span> smile<span class="sy4">;</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<p>One type of opaque pointer commonly used in C++ class declarations is
 the d-pointer. The d-pointer is the only private data member of the 
class and points to an instance of a struct. Named by <span class="new" title="Arnt Gulbrandsen (page does not exist)">Arnt Gulbrandsen</span> of <a href="http://en.m.wikipedia.org/wiki/Trolltech" title="Trolltech" class="mw-redirect">Trolltech</a>, this method allows class declarations to omit private data members, except for the d-pointer itself.<sup id="cite_ref-5" class="reference"><a href="#cite_note-5"><span>[</span>6<span>]</span></a></sup>
 This result with: (a) more of the class' implementation is hidden from 
view; (b) adding new data members to the private struct does not affect 
binary compatibility; (c) the header file containing the class 
declaration only needs to #include those other files needed for the 
class interface, rather than for its implementation. One side benefit is
 that compilations are faster because the header file changes less 
often. The d-pointer is heavily used in the <a href="http://en.m.wikipedia.org/wiki/Qt_%28toolkit%29" title="Qt (toolkit)" class="mw-redirect">Qt</a> and <a href="http://en.m.wikipedia.org/wiki/KDE" title="KDE">KDE</a> libraries.</p>
<h3> <span class="mw-headline" id="C.23">C#</span>
</h3>
<p>See <a href="http://en.m.wikipedia.org/wiki/Private_class_data_pattern" title="Private class data pattern">Private class data pattern</a></p>
</div><a id="anchor_1" href="#section_1" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_2"><button>Show</button><span id="See_also">See also</span></h2><div class="content_block" id="content_2">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Application_binary_interface" title="Application binary interface">Application binary interface</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Handle_%28computer_science%29" title="Handle (computer science)" class="mw-redirect">Handle (computer science)</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Programming_idiom" title="Programming idiom">Programming idiom</a></li>
</ul>
</div><a id="anchor_2" href="#section_2" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_3"><button>Show</button><span id="References">References</span></h2><div class="content_block" id="content_3">
<div class="reflist" style="list-style-type: decimal;">
<ol class="references">
<li id="cite_note-0">
<span class="mw-cite-backlink"><b><a href="#cite_ref-0">^</a></b></span> <span class="reference-text"><span class="citation web">Chris McKillop. <a rel="nofollow" class="external text" href="http://www.qnx.com/developers/articles/article_302_2.html">"Programming Tools — Opaque Pointers"</a>. QNX Software Systems<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.qnx.com/developers/articles/article_302_2.html">http://www.qnx.com/developers/articles/article_302_2.html</a></span><span class="reference-accessdate">. Retrieved 2005-08-29</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Programming+Tools+%26mdash%3B+Opaque+Pointers&amp;rft.atitle=&amp;rft.aulast=Chris+McKillop&amp;rft.au=Chris+McKillop&amp;rft.pub=QNX+Software+Systems&amp;rft_id=http%3A%2F%2Fwww.qnx.com%2Fdevelopers%2Farticles%2Farticle_302_2.html&amp;rfr_id=info:sid/en.wikipedia.org:Opaque_pointer"><span style="display: none;">&nbsp;</span></span></span>
</li>
<li id="cite_note-eckel20000-1">
<span class="mw-cite-backlink">^ <a href="#cite_ref-eckel20000_1-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-eckel20000_1-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Bruce_Eckel" title="Bruce Eckel">Bruce Eckel</a> (2000). <a rel="nofollow" class="external text" href="http://www.codeguru.com/cpp/tic/tic0067.shtml">"Chapter 5: Hiding the Implementation"</a>. <a rel="nofollow" class="external text" href="http://www.mindview.net/Books/TICPP/ThinkingInCPP2e.html"><i>Thinking in C++, Volume 1: Introduction to Standard C++</i></a> (2nd Edition ed.). Prentice Hall. <a href="http://en.m.wikipedia.org/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&nbsp;<a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0-13-979809-9" title="Special:BookSources/0-13-979809-9">0-13-979809-9</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.codeguru.com/cpp/tic/tic0067.shtml">http://www.codeguru.com/cpp/tic/tic0067.shtml</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Chapter+5%3A+Hiding+the+Implementation&amp;rft.atitle=Thinking+in+C%2B%2B%2C+Volume+1%3A+Introduction+to+Standard+C%2B%2B&amp;rft.aulast=%5B%5BBruce+Eckel%5D%5D&amp;rft.au=%5B%5BBruce+Eckel%5D%5D&amp;rft.date=2000&amp;rft.edition=2nd+Edition&amp;rft.pub=Prentice+Hall&amp;rft.isbn=0-13-979809-9&amp;rft_id=http%3A%2F%2Fwww.mindview.net%2FBooks%2FTICPP%2FThinkingInCPP2e.html&amp;rfr_id=info:sid/en.wikipedia.org:Opaque_pointer"><span style="display: none;">&nbsp;</span></span></span>
</li>
<li id="cite_note-2">
<span class="mw-cite-backlink"><b><a href="#cite_ref-2">^</a></b></span> <span class="reference-text"><span class="citation Journal">Vladimir Batov (2008-01-25). <a rel="nofollow" class="external text" href="http://ddj.com/cpp/205918714">"Making Pimpl Easy"</a>. <i><a href="http://en.m.wikipedia.org/wiki/Dr._Dobb%27s_Journal" title="Dr. Dobb's Journal">Dr. Dobb's Journal</a></i><span class="printonly">. <a rel="nofollow" class="external free" href="http://ddj.com/cpp/205918714">http://ddj.com/cpp/205918714</a></span><span class="reference-accessdate">. Retrieved 2008-05-07</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Making+Pimpl+Easy&amp;rft.jtitle=%5B%5BDr.+Dobb%27s+Journal%5D%5D&amp;rft.aulast=Vladimir+Batov&amp;rft.au=Vladimir+Batov&amp;rft.date=2008-01-25&amp;rft_id=http%3A%2F%2Fddj.com%2Fcpp%2F205918714&amp;rfr_id=info:sid/en.wikipedia.org:Opaque_pointer"><span style="display: none;">&nbsp;</span></span></span>
</li>
<li id="cite_note-3">
<span class="mw-cite-backlink"><b><a href="#cite_ref-3">^</a></b></span> <span class="reference-text">Herb Sutter. <i><a rel="nofollow" class="external text" href="http://www.gotw.ca/publications/mill05.htm">The Joy of Pimpls (or, More About the Compiler-Firewall Idiom)</a></i></span>
</li>
<li id="cite_note-4">
<span class="mw-cite-backlink"><b><a href="#cite_ref-4">^</a></b></span> <span class="reference-text"><span class="citation newsgroup">Robert A. Duff (2002-07-29). "Re: What's its name again?". <a rel="nofollow" class="external text" href="news:comp.lang.ada">comp.lang.ada</a>. <a rel="nofollow" class="external text" href="http://groups.google.es/group/comp.lang.ada/msg/a886bf7922727acf">(Web link)</a><span class="reference-accessdate">. Retrieved 2007-10-11</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Re%3A+What%27s+its+name+again%3F&amp;rft.atitle=&amp;rft.aulast=Robert+A.+Duff&amp;rft.au=Robert+A.+Duff&amp;rft.date=2002-07-29&amp;rft.pub=%5Bnews%3Acomp.lang.ada+comp.lang.ada%5D&amp;rfr_id=info:sid/en.wikipedia.org:Opaque_pointer"><span style="display: none;">&nbsp;</span></span></span>
</li>
<li id="cite_note-5">
<span class="mw-cite-backlink"><b><a href="#cite_ref-5">^</a></b></span> <span class="reference-text"><i><a rel="nofollow" class="external text" href="http://techbase.kde.org/Policies/Binary_Compatibility_Issues_With_C++#Using_a_d-Pointer">Using a d-Pointer</a></i> — Why and how KDE implements opaque pointers</span>
</li>
</ol>
</div>
</div><a id="anchor_3" href="#section_3" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_4"><button>Show</button><span id="External_links">External links</span></h2><div class="content_block" id="content_4">
<table class="metadata mbox-small plainlinks" style="border: 1px solid rgb(170, 170, 170); background-color: rgb(249, 249, 249);"><tbody><tr>
<td class="mbox-image"><img alt="" src="Opaque_pointer_files/40px-Wikibooks-logo-en-noslogan.png" width="40" height="40"></td>
<td class="mbox-text" style="">The Wikibook <i><a class="external text" href="http://en.wikibooks.org/wiki/Ada_Programming">Ada Programming</a></i> has a page on the topic of
<div style="margin-left:10px;"><i><b><a class="external text" href="http://en.wikibooks.org/wiki/Ada_Programming/Tips">Taft types</a></b></i></div>
</td>
</tr></tbody></table>
<ul>
<li><a rel="nofollow" class="external text" href="http://c2.com/cgi/wiki?PimplIdiom">The Pimpl idiom</a></li>
<li><a rel="nofollow" class="external text" href="http://www.gotw.ca/gotw/024.htm">Compilation Firewalls</a></li>
<li><a rel="nofollow" class="external text" href="http://www.gotw.ca/gotw/028.htm">The Fast Pimpl Idiom</a></li>
<li>
<a rel="nofollow" class="external text" href="http://techbase.kde.org/Policies/Library_Code_Policy#D-Pointers">D-Pointers</a> — KDE TechBase</li>
<li>When you "XOR the pointer with a random number"<a rel="nofollow" class="external autonumber" href="http://blogs.msdn.com/michael_howard/archive/2006/01/30/520200.aspx">[1]</a><a rel="nofollow" class="external autonumber" href="http://udrepper.livejournal.com/13393.html">[2]</a>, the result is a "really opaque" pointer <a rel="nofollow" class="external autonumber" href="http://www.iecc.com/gclist/GC-faq.html#GC,%20C,%20and%20C++">[3]</a>.</li>
<li>
<a rel="nofollow" class="external text" href="http://www.ddj.com/cpp/205918714">Making Pimpl Easy</a>, Vladimir Batov</li>
</ul>

</div>
</div>		</div>
	</div>
			<div id="footer">
			<h2 class="section_heading" id="section_footer"><button>Show</button>
		<div class="license">Wikipedia ™</div>		<span class="toggleCopyright">
			<span class="more">more</span><span class="less">less</span>
		</span>
	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Opaque_pointer&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li>
				<span class="left"><a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span><span class="right">Images ON / <a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions/DisableImages&amp;returnto=Opaque+pointer&amp;mobiletoken=dc83e2c6ae93b1fadc6882196f529c1b" title="Special:MobileOptions/DisableImages" id="imagetoggle">OFF</a></span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Opaque_pointer&amp;action=history">contributors</a> like you<br>
				Content available under <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>			</li>
		</ul>
		<ul class="links">
			<li>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Opaque+pointer&amp;feedbacksource=MobileFrontend">Contact</a>
			</li><li>
			<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div>
	</div>
				<!--[if gt IE 7]><!-->
		<script type="text/javascript">mw={loader:{state:function(){}}};</script>		<script src="Opaque_pointer_files/load_002.php" type="text/javascript"></script>
<script src="Opaque_pointer_files/load.php" type="text/javascript"></script>	<script type="text/javascript">
	window.onload = function() {
		mw.mobileFrontend.init();
	};
	</script>
	<!----><!--[endif]---->
	
	<div style="display: none;" id="mf-references"><div></div><button>close</button></div></body></html>