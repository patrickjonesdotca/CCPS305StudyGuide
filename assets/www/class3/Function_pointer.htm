<!DOCTYPE html>
<html class="jsEnabled togglingEnabled" dir="ltr" lang="en"><head>
		<title>Function pointer - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<meta name="robots" content="noindex,nofollow">		<link rel="stylesheet" href="Function_pointer_files/load.css" type="text/css" media="all">		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png">		<script type="text/javascript">
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-header":"This article is available in 5 languages","mobile-frontend-language-footer":"<a href=\"\/wiki\/Special:Special:MobileOptions\/Language\">Wikipedia is available in other languages.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"scriptPath":"\/w","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			document.documentElement.className = 'jsEnabled page-loading';		</script>
		<link rel="canonical" href="http://en.wikipedia.org/wiki/Function_pointer">
	</head>
	<body class="mobile mw-mf-checkboxes">
							<div id="mw-mf-header">
					<form id="mw-mf-searchForm" action="/w/index.php" class="search_bar" method="get">
							<img alt="Logo" id="mw-mf-logo" src="Function_pointer_files/W_logo_for_Mobile_Frontend.gif" width="35" height="22">
						<input value="Special:Search" name="title" type="hidden">
			<div id="mw-mf-sq" class="divclearable">
				<input name="search" id="mw-mf-search" size="22" autocomplete="off" maxlength="1024" class="search" placeholder="Type your search here..." type="search">
				<img src="Function_pointer_files/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear">
			</div>
						<button id="goButton" class="goButton" type="submit">
				<img src="Function_pointer_files/blank.gif" alt="Go" title="Go">
			</button>
					</form>
									<div class="nav" id="nav">
				<div id="mw-mf-language-selection">
		Language:<br>
		<select id="languageselection"><option value="http://en.wikipedia.org/wiki/Function_pointer" selected="selected">English</option><option value="//it.m.wikipedia.org/wiki/Puntatori_a_funzione">italiano</option><option value="//ja.m.wikipedia.org/wiki/%E9%96%A2%E6%95%B0%E3%81%B8%E3%81%AE%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF">日本語</option><option value="//pl.m.wikipedia.org/wiki/Typ_funkcyjny">polski</option><option value="//zh.m.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88">中文</option></select>
	</div><br>
			<a href="http://en.m.wikipedia.org/wiki/Main_Page" id="homeButton" class="button">Home</a>
			<a href="http://en.m.wikipedia.org/wiki/Special:Random" id="randomButton" class="button">Random</a>
			</div>
		</div>
				<div id="results"><ul class="suggestions-results" title="No Results"><li class="suggestions-result">Type search term above and matching article titles will appear here.</li></ul></div>
		<div class="show" id="content_wrapper">
				<div id="content">
			<h1 id="firstHeading">Function pointer</h1>			
<p>A <b>function pointer</b> (or <b>subroutine pointer</b>) is a type of <a href="http://en.m.wikipedia.org/wiki/Pointer_%28computer_programming%29" title="Pointer (computer programming)">pointer</a> supported by <a href="http://en.m.wikipedia.org/wiki/Third-generation_programming_language" title="Third-generation programming language">third-generation</a> <a href="http://en.m.wikipedia.org/wiki/Programming_language" title="Programming language">programming languages</a> (such as <a href="http://en.m.wikipedia.org/wiki/PL/I" title="PL/I">PL/I</a>, <a href="http://en.m.wikipedia.org/wiki/COBOL" title="COBOL">COBOL</a>, <a href="http://en.m.wikipedia.org/wiki/Fortran" title="Fortran">Fortran</a> 2003, and <a href="http://en.m.wikipedia.org/wiki/C_%28programming_language%29" title="C (programming language)">C</a>) and <a href="http://en.m.wikipedia.org/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a> languages (such as <a href="http://en.m.wikipedia.org/wiki/C%2B%2B" title="C++">C++</a> and <a href="http://en.m.wikipedia.org/wiki/D_%28programming_language%29" title="D (programming language)">D</a>).<sup id="cite_ref-0" class="reference"><a href="#cite_note-0"><span>[</span>1<span>]</span></a></sup> Instead of referring to data values, a function pointer points to executable code within memory. When <a href="http://en.m.wikipedia.org/wiki/Dereference_operator" title="Dereference operator">dereferenced</a>, a function pointer can be used to invoke the <a href="http://en.m.wikipedia.org/wiki/Subroutine" title="Subroutine">function</a>
 it points to and pass it arguments just like a normal function call. 
Such an invocation is also known as an "indirect" call, because the 
function is being invoked <i>indirectly</i> through a variable instead of <i>directly</i>
 through a fixed name or address. Function pointers can be used to 
simplify code by providing a simple way to select a function to execute 
based on run-time values.</p>
<div class="section"><h2 class="section_heading" id="section_1"><button>Show</button><span id="Simple_function_pointers">Simple function pointers</span></h2><div class="content_block" id="content_1">
<p>The simplest implementation of a function (or subroutine) pointer is as a <a href="http://en.m.wikipedia.org/wiki/Variable_%28computer_science%29" title="Variable (computer science)">variable</a> containing the <a href="http://en.m.wikipedia.org/wiki/Memory_address" title="Memory address">address</a> of the function within executable memory. Older <a href="http://en.m.wikipedia.org/wiki/Third-generation_programming_language" title="Third-generation programming language">third-generation languages</a> such as <a href="http://en.m.wikipedia.org/wiki/PL/I" title="PL/I">PL/I</a> and <a href="http://en.m.wikipedia.org/wiki/COBOL" title="COBOL">COBOL</a>, as well as more modern languages such as <a href="http://en.m.wikipedia.org/wiki/Pascal_%28programming_language%29" title="Pascal (programming language)">Pascal</a> and <a href="http://en.m.wikipedia.org/wiki/C_%28programming_language%29" title="C (programming language)">C</a> generally implement function pointers in this manner. Such pointers in older languages are generally less <a href="http://en.m.wikipedia.org/wiki/Type_safety" title="Type safety">type-safe</a> than in more modern languages, though, since the latter associate more <a href="http://en.m.wikipedia.org/wiki/Data_type" title="Data type">typing</a> information with a function pointer variable, such as the data type of the <a href="http://en.m.wikipedia.org/wiki/Return_value" title="Return value" class="mw-redirect">return value</a> of the function and the data type information of the <a href="http://en.m.wikipedia.org/wiki/Parameter_%28computer_programming%29" title="Parameter (computer programming)">parameters</a> to the function.<sup id="cite_ref-1" class="reference"><a href="#cite_note-1"><span>[</span>2<span>]</span></a></sup></p>
<h3> <span class="mw-headline" id="Example_in_C">Example in C</span>
</h3>
<p>The following C program uses a function pointer to invoke one of two functions (<code>sin</code> or <code>cos</code>) indirectly from another function (<code>compute_sum</code>). The program operates by having function <code>main</code> call function <code>compute_sum</code> twice, passing it a pointer to the library function <code>sin</code> the first time, and a pointer to function <code>cos</code> the second time. Function <code>compute_sum</code> in turn invokes one of the two functions indirectly by deferencing its function pointer argument <code>funcp</code>
 multiple times, adding together the values that the invoked function 
returns and returning the resulting sum. The two sums are written to the
 standard output by <code>main</code>.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1"><span class="co2">#include &lt;math.h&gt;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
 
<span class="co1">// Function taking a function pointer as an argument</span>
<span class="kw4">double</span> compute_sum<span class="br0">(</span><span class="kw4">double</span> <span class="br0">(</span><span class="sy0">*</span>funcp<span class="br0">)</span><span class="br0">(</span><span class="kw4">double</span><span class="br0">)</span><span class="sy0">,</span> <span class="kw4">double</span> lo<span class="sy0">,</span> <span class="kw4">double</span> hi<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">double</span>  sum <span class="sy0">=</span> <span class="nu16">0.0</span><span class="sy0">;</span>
 
    <span class="co1">// Add values returned by the pointed-to function '*funcp'</span>
    <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>  i <span class="sy0">&lt;=</span> <span class="nu0">100</span><span class="sy0">;</span>  i<span class="sy0">++</span><span class="br0">)</span>
    <span class="br0">{</span>
        <span class="kw4">double</span>  x<span class="sy0">,</span> y<span class="sy0">;</span>
 
        <span class="co1">// Use the function pointer 'funcp' to invoke the function</span>
        x <span class="sy0">=</span> i<span class="sy0">/</span><span class="nu16">100.0</span> <span class="sy0">*</span> <span class="br0">(</span>hi <span class="sy0">-</span> lo<span class="br0">)</span> <span class="sy0">+</span> lo<span class="sy0">;</span>
        y <span class="sy0">=</span> <span class="br0">(</span><span class="sy0">*</span>funcp<span class="br0">)</span><span class="br0">(</span>x<span class="br0">)</span><span class="sy0">;</span>
        sum <span class="sy0">+=</span> y<span class="sy0">;</span>
    <span class="br0">}</span>
    <span class="kw1">return</span> sum<span class="sy0">;</span>
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">double</span>  <span class="br0">(</span><span class="sy0">*</span>fp<span class="br0">)</span><span class="br0">(</span><span class="kw4">double</span><span class="br0">)</span><span class="sy0">;</span>      <span class="co1">// Function pointer</span>
    <span class="kw4">double</span>  sum<span class="sy0">;</span>
 
    <span class="co1">// Use 'sin()' as the pointed-to function</span>
    fp <span class="sy0">=</span> <span class="sy0">&amp;</span><span class="kw3">sin</span><span class="sy0">;</span>
    sum <span class="sy0">=</span> compute_sum<span class="br0">(</span>fp<span class="sy0">,</span> <span class="nu16">0.0</span><span class="sy0">,</span> <span class="nu16">1.0</span><span class="br0">)</span><span class="sy0">;</span>
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"sum(sin): %f<span class="es1">\n</span>"</span><span class="sy0">,</span> sum<span class="br0">)</span><span class="sy0">;</span>
 
    <span class="co1">// Use 'cos()' as the pointed-to function</span>
    sum <span class="sy0">=</span> compute_sum<span class="br0">(</span><span class="sy0">&amp;</span><span class="kw3">cos</span><span class="sy0">,</span> <span class="nu16">0.0</span><span class="sy0">,</span> <span class="nu16">1.0</span><span class="br0">)</span><span class="sy0">;</span>
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"sum(cos): %f<span class="es1">\n</span>"</span><span class="sy0">,</span> sum<span class="br0">)</span><span class="sy0">;</span>
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre>
</div>
</div>
</div><a id="anchor_1" href="#section_1" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_2"><button>Show</button><span id="Functors">Functors</span></h2><div class="content_block" id="content_2">
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Function_objects" title="Function objects" class="mw-redirect">Function objects</a>
</div>
<p><b>Functors</b>, or <b>function objects</b>, are similar to function pointers, and can be used in similar ways. A functor is an object of a class type that implements the <a href="http://en.m.wikipedia.org/wiki/Function-call_operator" title="Function-call operator" class="mw-redirect">function-call operator</a>,
 allowing the object to be used within expressions using the same syntax
 as a function call. Functors are more powerful than simple function 
pointers, being able to contain their own data values, and allowing the 
programmer to emulate <a href="http://en.m.wikipedia.org/wiki/Closure_%28computer_science%29" title="Closure (computer science)">closures</a>. They are also used as callback functions if it is necessary to use a member function as a callback function.<sup id="cite_ref-2" class="reference"><a href="#cite_note-2"><span>[</span>3<span>]</span></a></sup></p>
<p>Many "pure" object-oriented languages do not support function 
pointers. Something similar can be implemented in these kinds of 
languages, though, using <a href="http://en.m.wikipedia.org/wiki/Reference_%28computer_science%29" title="Reference (computer science)">references</a> to <a href="http://en.m.wikipedia.org/wiki/Protocol_%28object-oriented_programming%29" title="Protocol (object-oriented programming)">interfaces</a> that define a single <a href="http://en.m.wikipedia.org/wiki/Member_function" title="Member function" class="mw-redirect">member function</a>. <a href="http://en.m.wikipedia.org/wiki/List_of_CLI_languages" title="List of CLI languages">CLI languages</a> such as <a href="http://en.m.wikipedia.org/wiki/C_Sharp_%28programming_language%29" title="C Sharp (programming language)">C#</a> and <a href="http://en.m.wikipedia.org/wiki/Visual_Basic_.NET" title="Visual Basic .NET">Visual Basic .NET</a> implement <a href="http://en.m.wikipedia.org/wiki/Type_safety" title="Type safety">type-safe</a> function pointers with <a href="http://en.m.wikipedia.org/wiki/Delegate_%28CLI%29" title="Delegate (CLI)">delegates</a>.</p>
<p>In other languages that support <a href="http://en.m.wikipedia.org/wiki/First-class_function" title="First-class function">first-class functions</a>,
 functions are regarded as data, and can be passed, returned, and 
created dynamically directly by other functions, eliminating the need 
for function pointers.</p>
<p>Extensively using function pointers to call functions may produce a slow-down for the code on modern processors, because <a href="http://en.m.wikipedia.org/wiki/Branch_prediction" title="Branch prediction" class="mw-redirect">branch prediction</a>
 may not be able to figure out where to branch to (it depends on the 
value of the function pointer at run time) although this effect can be 
overstated as it is often amply compensated for by significantly reduced
 non indexed table lookups. This makes the memory allocation independent
 from execution. The concept later was used by the multithreading 
processing ability.</p>
</div><a id="anchor_2" href="#section_2" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_3"><button>Show</button><span id="Method_pointers">Method pointers</span></h2><div class="content_block" id="content_3">
<p>C++ is <a href="http://en.m.wikipedia.org/wiki/Object-oriented" title="Object-oriented" class="mw-redirect">object-oriented</a>, so classes can have <a href="http://en.m.wikipedia.org/wiki/Method_%28computer_science%29" title="Method (computer science)" class="mw-redirect">methods</a>. Non-static member functions (instance methods) have an implicit parameter (the <i><a href="http://en.m.wikipedia.org/wiki/This_%28computer_science%29" title="This (computer science)" class="mw-redirect">this</a></i>
 pointer) which is the pointer to the object it is operating on, so the 
type of the object must be included as part of the type of the function 
pointer. The method is then used on an object of that class by using one
 of the "pointer-to-member" operators: <code>.*</code> or <code>-&gt;*</code> (for an object or a pointer to object, respectively).</p>
<p>Although function pointers in C and C++ can be implemented as simple addresses, so that typically <code>sizeof(Fx)==sizeof(void *)</code>,
 member pointers in C++ are often implemented as "fat pointers", 
typically two or three times the size of a simple function pointer, in 
order to deal with <a href="http://en.m.wikipedia.org/wiki/Virtual_inheritance" title="Virtual inheritance">virtual inheritance</a><sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from August 2011">citation needed</span></a></i>]</sup>.</p>
</div><a id="anchor_3" href="#section_3" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_4"><button>Show</button><span id="In_C.2B.2B">In C++</span></h2><div class="content_block" id="content_4">
<p>A C++ typical use of "pointers to functions" is for passing a 
function as an argument to another function, since these cannot be 
passed dereferenced:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1"><span class="co1">// Pointer to functions</span>
<span class="co1">// compile: g++ -g functPointCpp.cc -o functPointCpp</span>
 
<span class="co2">#include &lt;iostream&gt;</span>
 
<span class="kw2">using</span> <span class="kw2">namespace</span> std<span class="sy4">;</span>
 
<span class="kw4">int</span> add<span class="br0">(</span><span class="kw4">int</span> first, <span class="kw4">int</span> second<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw1">return</span> first <span class="sy2">+</span> second<span class="sy4">;</span>
<span class="br0">}</span>
 
<span class="kw4">int</span> subtract<span class="br0">(</span><span class="kw4">int</span> first, <span class="kw4">int</span> second<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw1">return</span> first <span class="sy2">-</span> second<span class="sy4">;</span>
<span class="br0">}</span>
 
<span class="kw4">int</span> operation<span class="br0">(</span><span class="kw4">int</span> first, <span class="kw4">int</span> second, <span class="kw4">int</span> <span class="br0">(</span><span class="sy2">*</span>functocall<span class="br0">)</span><span class="br0">(</span><span class="kw4">int</span>, <span class="kw4">int</span><span class="br0">)</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw1">return</span> <span class="br0">(</span><span class="sy2">*</span>functocall<span class="br0">)</span><span class="br0">(</span>first, second<span class="br0">)</span><span class="sy4">;</span>
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span>  a, b<span class="sy4">;</span>
    <span class="kw4">int</span>  <span class="br0">(</span><span class="sy2">*</span>plus<span class="br0">)</span><span class="br0">(</span><span class="kw4">int</span>, <span class="kw4">int</span><span class="br0">)</span> <span class="sy1">=</span> add<span class="sy4">;</span>
    a <span class="sy1">=</span> operation<span class="br0">(</span><span class="nu0">7</span>, <span class="nu0">5</span>, plus<span class="br0">)</span><span class="sy4">;</span>
    b <span class="sy1">=</span> operation<span class="br0">(</span><span class="nu0">20</span>, a, subtract<span class="br0">)</span><span class="sy4">;</span>
    <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">"a = "</span> <span class="sy1">&lt;&lt;</span> a <span class="sy1">&lt;&lt;</span> <span class="st0">" and b = "</span> <span class="sy1">&lt;&lt;</span> b <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span>
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>
<span class="br0">}</span>
</pre>
</div>
</div>
</div><a id="anchor_4" href="#section_4" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_5"><button>Show</button><span id="See_also">See also</span></h2><div class="content_block" id="content_5">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Delegation_%28programming%29" title="Delegation (programming)">Delegation (programming)</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Function_object" title="Function object">Function object</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Higher-order_function" title="Higher-order function">Higher-order function</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Procedural_parameter" title="Procedural parameter">Procedural parameter</a></li>
</ul>
</div><a id="anchor_5" href="#section_5" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_6"><button>Show</button><span id="References">References</span></h2><div class="content_block" id="content_6">
<div class="reflist references-column-count references-column-count-2" style="-moz-column-count: 2; -webkit-column-count: 2; column-count: 2; list-style-type: decimal;">
<ol class="references">
<li id="cite_note-0">
<span class="mw-cite-backlink"><b><a href="#cite_ref-0">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.newty.de/fpt/intro.html#what">"The Function Pointer Tutorials"</a>. <a rel="nofollow" class="external free" href="http://www.newty.de/">http://www.newty.de/</a>: logo<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.newty.de/fpt/intro.html#what">http://www.newty.de/fpt/intro.html#what</a></span><span class="reference-accessdate">. Retrieved 2011-04-13</span>. "Function Pointers are pointers, i.e. variables, which point to the address of a function"</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+Function+Pointer+Tutorials&amp;rft.atitle=&amp;rft.place=http%3A%2F%2Fwww.newty.de%2F&amp;rft.pub=logo&amp;rft_id=http%3A%2F%2Fwww.newty.de%2Ffpt%2Fintro.html%23what&amp;rfr_id=info:sid/en.wikipedia.org:Function_pointer"><span style="display: none;">&nbsp;</span></span></span>
</li>
<li id="cite_note-1">
<span class="mw-cite-backlink"><b><a href="#cite_ref-1">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.newty.de/fpt/intro.html#top">"The Function Pointer Tutorials"</a>. <a rel="nofollow" class="external free" href="http://www.newty.de/">http://www.newty.de/</a>: logo<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.newty.de/fpt/intro.html#top">http://www.newty.de/fpt/intro.html#top</a></span><span class="reference-accessdate">. Retrieved 2011-04-13</span>.
 "Important note: A function pointer always points to a function with a 
specific signature! Thus all functions, you want to use with the same 
function pointer, must have the same parameters and return-type!"</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+Function+Pointer+Tutorials&amp;rft.atitle=&amp;rft.place=http%3A%2F%2Fwww.newty.de%2F&amp;rft.pub=logo&amp;rft_id=http%3A%2F%2Fwww.newty.de%2Ffpt%2Fintro.html%23top&amp;rfr_id=info:sid/en.wikipedia.org:Function_pointer"><span style="display: none;">&nbsp;</span></span></span>
</li>
<li id="cite_note-2">
<span class="mw-cite-backlink"><b><a href="#cite_ref-2">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.devx.com/tips/Tip/27126">"Expertise: Intermediate Language: C++: Use Functor for Callbacks in C++"</a>. <a rel="nofollow" class="external free" href="http://www.devx.com/">http://www.devx.com/</a>: DevX.com. 2005-01-31<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.devx.com/tips/Tip/27126">http://www.devx.com/tips/Tip/27126</a></span><span class="reference-accessdate">. Retrieved 2011-04-13</span>.
 "If you want to use a member function as a callback function, then the 
member function needs to be associated with an object of the class 
before it can be called. In this case, you can use functor [with an 
example on this page]."</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Expertise%3A+Intermediate+Language%3A+C%2B%2B%3A+Use+Functor+for+Callbacks+in+C%2B%2B&amp;rft.atitle=&amp;rft.date=2005-01-31&amp;rft.place=http%3A%2F%2Fwww.devx.com%2F&amp;rft.pub=DevX.com&amp;rft_id=http%3A%2F%2Fwww.devx.com%2Ftips%2FTip%2F27126&amp;rfr_id=info:sid/en.wikipedia.org:Function_pointer"><span style="display: none;">&nbsp;</span></span></span>
</li>
</ol>
</div>
</div><a id="anchor_6" href="#section_6" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_7"><button>Show</button><span id="External_links">External links</span></h2><div class="content_block" id="content_7">
<ul>
<li>
<a rel="nofollow" class="external text" href="http://www.parashift.com/c++-faq-lite/pointers-to-members.html#faq-33.12">FAQ on Function Pointers</a>, things to avoid with function pointers, some information on using <a href="http://en.m.wikipedia.org/wiki/Function_object" title="Function object">function objects</a>
</li>
<li>
<a rel="nofollow" class="external text" href="http://www.newty.de/fpt/">Function Pointer Tutorials</a>, a guide to C/C++ function pointers, <a href="http://en.m.wikipedia.org/wiki/Callback_%28computer_programming%29" title="Callback (computer programming)">callbacks</a>, and <a href="http://en.m.wikipedia.org/wiki/Function_object" title="Function object">function objects</a> (functors)</li>
<li>
<a rel="nofollow" class="external text" href="http://www.codeproject.com/KB/cpp/FastDelegate.aspx">Member Function Pointers and the Fastest Possible C++ Delegates</a>, CodeProject article by Don Clugston</li>
<li>
<a rel="nofollow" class="external text" href="http://www.cplusplus.com/doc/tutorial/pointers.html">Pointer Tutorials</a>, C++ documentation and tutorials</li>
<li>
<a rel="nofollow" class="external text" href="http://www.codeproject.com/KB/security/Securefunctionpointer.aspx">Secure Function Pointer and Callbacks in Windows Programming</a>, CodeProject article by R. Selvam</li>
<li>
<a rel="nofollow" class="external text" href="http://publications.gbdirect.co.uk/c_book/chapter5/function_pointers.html">The C Book</a>, Function Pointers in C by "The C Book"</li>
</ul>

</div>
</div>		</div>
	</div>
			<div id="footer">
			<h2 class="section_heading" id="section_footer"><button>Show</button>
		<div class="license">Wikipedia ™</div>		<span class="toggleCopyright">
			<span class="more">more</span><span class="less">less</span>
		</span>
	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Function_pointer&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li>
				<span class="left"><a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span><span class="right">Images ON / <a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions/DisableImages&amp;returnto=Function+pointer&amp;mobiletoken=dc83e2c6ae93b1fadc6882196f529c1b" title="Special:MobileOptions/DisableImages" id="imagetoggle">OFF</a></span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Function_pointer&amp;action=history">contributors</a> like you<br>
				Content available under <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>			</li>
		</ul>
		<ul class="links">
			<li>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Function+pointer&amp;feedbacksource=MobileFrontend">Contact</a>
			</li><li>
			<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div>
	</div>
				<!--[if gt IE 7]><!-->
		<script type="text/javascript">mw={loader:{state:function(){}}};</script>		<script src="Function_pointer_files/load_002.php" type="text/javascript"></script>
<script src="Function_pointer_files/load.php" type="text/javascript"></script>	<script type="text/javascript">
	window.onload = function() {
		mw.mobileFrontend.init();
	};
	</script>
	<!----><!--[endif]---->
	
	<div style="display: none;" id="mf-references"><div></div><button>close</button></div></body></html>