<!DOCTYPE html>
<html class="jsEnabled togglingEnabled" dir="ltr" lang="en"><head>
		<title>Binomial heap - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<meta name="robots" content="noindex,nofollow">		<link rel="stylesheet" href="Binomial_heap_files/load.css" type="text/css" media="all">		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png">		<script type="text/javascript">
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-header":"This article is available in 12 languages","mobile-frontend-language-footer":"<a href=\"\/wiki\/Special:Special:MobileOptions\/Language\">Wikipedia is available in other languages.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"scriptPath":"\/w","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			document.documentElement.className = 'jsEnabled page-loading';		</script>
		<link rel="canonical" href="http://en.wikipedia.org/wiki/Binomial_heap">
	</head>
	<body class="mobile mw-mf-checkboxes">
							<div id="mw-mf-header">
					<form id="mw-mf-searchForm" action="/w/index.php" class="search_bar" method="get">
							<img alt="Logo" id="mw-mf-logo" src="Binomial_heap_files/W_logo_for_Mobile_Frontend.gif" width="35" height="22">
						<input value="Special:Search" name="title" type="hidden">
			<div id="mw-mf-sq" class="divclearable">
				<input name="search" id="mw-mf-search" size="22" autocomplete="off" maxlength="1024" class="search" placeholder="Type your search here..." type="search">
				<img src="Binomial_heap_files/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear">
			</div>
						<button id="goButton" class="goButton" type="submit">
				<img src="Binomial_heap_files/blank.gif" alt="Go" title="Go">
			</button>
					</form>
									<div class="nav" id="nav">
				<div id="mw-mf-language-selection">
		Language:<br>
		<select id="languageselection"><option value="http://en.wikipedia.org/wiki/Binomial_heap" selected="selected">English</option><option value="//cs.m.wikipedia.org/wiki/Binomi%C3%A1ln%C3%AD_halda">česky</option><option value="//de.m.wikipedia.org/wiki/Binomial-Heap">Deutsch</option><option value="//fa.m.wikipedia.org/wiki/%D9%BE%D8%B4%D8%AA%D9%87%E2%80%8C%D9%87%D8%A7%DB%8C_%D8%AF%D9%88%D8%AC%D9%85%D9%84%D9%87%E2%80%8C%D8%A7%DB%8C">فارسی</option><option value="//fr.m.wikipedia.org/wiki/Tas_binomial">français</option><option value="//it.m.wikipedia.org/wiki/Heap_binomiale">italiano</option><option value="//he.m.wikipedia.org/wiki/%D7%A2%D7%A5_%D7%91%D7%99%D7%A0%D7%95%D7%9E%D7%99">עברית</option><option value="//ja.m.wikipedia.org/wiki/%E4%BA%8C%E9%A0%85%E3%83%92%E3%83%BC%E3%83%97">日本語</option><option value="//pl.m.wikipedia.org/wiki/Kopiec_dwumianowy">polski</option><option value="//ru.m.wikipedia.org/wiki/%D0%91%D0%B8%D0%BD%D0%BE%D0%BC%D0%B8%D0%B0%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F_%D0%BA%D1%83%D1%87%D0%B0">русский</option><option value="//uk.m.wikipedia.org/wiki/%D0%91%D1%96%D0%BD%D0%BE%D0%BC%D1%96%D0%B0%D0%BB%D1%8C%D0%BD%D0%B0_%D0%BA%D1%83%D0%BF%D0%B0">українська</option><option value="//zh.m.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86">中文</option></select>
	</div><br>
			<a href="http://en.m.wikipedia.org/wiki/Main_Page" id="homeButton" class="button">Home</a>
			<a href="http://en.m.wikipedia.org/wiki/Special:Random" id="randomButton" class="button">Random</a>
			</div>
		</div>
				<div id="results"><ul class="suggestions-results" title="No Results"><li class="suggestions-result">Type search term above and matching article titles will appear here.</li></ul></div>
		<div class="show" id="content_wrapper">
				<div id="content">
			<h1 id="firstHeading">Binomial heap</h1>			
<p>In <a href="http://en.m.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a>, a <b>binomial heap</b> is a <a href="http://en.m.wikipedia.org/wiki/Heap_%28data_structure%29" title="Heap (data structure)">heap</a> similar to a <a href="http://en.m.wikipedia.org/wiki/Binary_heap" title="Binary heap">binary heap</a>
 but also supports quickly merging two heaps. This is achieved by using a
 special tree structure. It is important as an implementation of the <b>mergeable heap</b> <a href="http://en.m.wikipedia.org/wiki/Abstract_data_type" title="Abstract data type">abstract data type</a> (also called meldable heap), which is a <a href="http://en.m.wikipedia.org/wiki/Priority_queue" title="Priority queue">priority queue</a> supporting merge operation.</p>
<div class="section"><h2 class="section_heading" id="section_1"><button>Show</button><span id="Binomial_tree">Binomial tree</span></h2><div class="content_block" id="content_1">
<p>A binomial heap is implemented as a collection of <a href="http://en.m.wikipedia.org/wiki/Binomial" title="Binomial">binomial</a> <a href="http://en.m.wikipedia.org/wiki/Tree_data_structure" title="Tree data structure" class="mw-redirect">trees</a> (compare with a <a href="http://en.m.wikipedia.org/wiki/Binary_heap" title="Binary heap">binary heap</a>, which has a shape of a single <a href="http://en.m.wikipedia.org/wiki/Binary_tree" title="Binary tree">binary tree</a>). A <b>binomial tree</b> is defined recursively:</p>
<ul>
<li>A binomial tree of order 0 is a single node</li>
<li>A binomial tree of order <i>k</i> has a root node whose children are roots of binomial trees of orders <i>k</i>−1, <i>k</i>−2, ..., 2, 1, 0 (in this order).</li>
</ul>
<div class="center">
<div class="thumb tnone">
<div class="thumbinner" style="width:502px;">
<a href="http://en.m.wikipedia.org/wiki/File:Binomial_Trees.svg" class="image"><img alt="" src="Binomial_heap_files/500px-Binomial_Trees.png" class="thumbimage" width="500" height="286"></a>
<div class="thumbcaption">

Binomial trees of order 0 to 3: Each tree has a root node with subtrees 
of all lower ordered binomial trees, which have been highlighted. For 
example, the order 3 binomial tree is connected to an order 2, 1, and 0 
(highlighted as blue, green and red respectively) binomial tree.</div>
</div>
</div>
</div>
<p>A binomial tree of order <i>k</i> has 2<sup>k</sup> nodes, height <i>k</i>.</p>
<p>Because of its unique structure, a binomial tree of order <i>k</i> can be constructed from two trees of order <i>k</i>−1 trivially by attaching one of them as the leftmost child of root of the other one. This feature is central to the <i>merge</i> operation of a binomial heap, which is its major advantage over other conventional heaps.</p>
<p>The name comes from the shape: a binomial tree of order <img class="tex" alt="n" src="Binomial_heap_files/7b8b965ad4bca0e41ab51de7b31363a1.png"> has <img class="tex" alt="\tbinom n d" src="Binomial_heap_files/b6ea99a5a2f2e5ac8e231eb5d533e71c.png"> nodes at depth <img class="tex" alt="d" src="Binomial_heap_files/8277e0910d750195b448797616e091ad.png">. (See <a href="http://en.m.wikipedia.org/wiki/Binomial_coefficient" title="Binomial coefficient">Binomial coefficient</a>.)</p>
</div><a id="anchor_1" href="#section_1" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_2"><button>Show</button><span id="Structure_of_a_binomial_heap">Structure of a binomial heap</span></h2><div class="content_block" id="content_2">
<p>A binomial heap is implemented as a set of binomial trees that satisfy the <i>binomial heap properties</i>:</p>
<ul>
<li>Each binomial tree in a heap obeys the <i><a href="http://en.m.wikipedia.org/wiki/Minimum-heap_property" title="Minimum-heap property" class="mw-redirect">minimum-heap property</a></i>: the key of a node is greater than or equal to the key of its parent.</li>
</ul>
<ul>
<li>There can only be either <i>one</i> or <i>zero</i> binomial trees for each order, including zero order.</li>
</ul>
<p>The first property ensures that the root of each binomial tree 
contains the smallest key in the tree, which applies to the entire heap.</p>
<p>The second property implies that a binomial heap with <i>n</i> nodes consists of at most <a href="http://en.m.wikipedia.org/wiki/Binary_logarithm" title="Binary logarithm">log</a> <i>n</i> + 1 binomial trees. In fact, the number and orders of these trees are uniquely determined by the number of nodes <i>n</i>: each binomial tree corresponds to one digit in the <a href="http://en.m.wikipedia.org/wiki/Binary_numeral_system" title="Binary numeral system">binary</a> representation of number <i>n</i>. For example number 13 is 1101 in binary, <img class="tex" alt="2^3 + 2^2 + 2^0" src="Binomial_heap_files/9e3e923cd90b341fe8aed744267bd28f.png">, and thus a binomial heap with 13 nodes will consist of three binomial trees of orders 3, 2, and 0 (see figure below).</p>
<center>
<a href="http://en.m.wikipedia.org/wiki/File:Binomial-heap-13.svg" class="image" title="Example of a binomial heap"><img alt="Example of a binomial heap" src="Binomial_heap_files/325px-Binomial-heap-13.png" width="325" height="217"></a><br><i>Example of a binomial heap containing 13 nodes with distinct keys.<br>
The heap consists of three binomial trees with orders 0, 2, and 3.</i>
</center>
</div><a id="anchor_2" href="#section_2" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_3"><button>Show</button><span id="Implementation">Implementation</span></h2><div class="content_block" id="content_3">
<p>Because no operation requires random access to the root nodes of the 
binomial trees, the roots of the binomial trees can be stored in a <a href="http://en.m.wikipedia.org/wiki/Linked_list" title="Linked list">linked list</a>, ordered by increasing order of the tree.</p>
<h3> <span class="mw-headline" id="Merge">Merge</span>
</h3>
<p>As mentioned above, the simplest and most important operation is the 
merging of two binomial trees of the same order within two binomial 
heaps. Due to the structure of binomial trees, they can be merged 
trivially. As their root node is the smallest element within the tree, 
by comparing the two keys, the smaller of them is the minimum key, and 
becomes the new root node. Then the other tree become a subtree of the 
combined tree. This operation is basic to the complete merging of two 
binomial heaps.</p>
<pre><b>function</b> mergeTree(p, q)
    <b>if</b> p.root.key &lt;= q.root.key
        <b>return</b> p.addSubTree(q)
    <b>else</b>
        <b>return</b> q.addSubTree(p)
</pre>
<div class="thumb tleft">
<div class="thumbinner" style="width:202px;">
<a href="http://en.m.wikipedia.org/wiki/File:Binomial_heap_merge1.svg" class="image"><img alt="" src="Binomial_heap_files/200px-Binomial_heap_merge1.png" class="thumbimage" width="200" height="291"></a>
<div class="thumbcaption">

To merge two binomial trees of the same order, first compare the root 
key. Since 7&gt;3, the black tree on the left(with root node 7) is 
attached to the grey tree on the right(with root node 3) as a subtree. 
The result is a tree of order 3.</div>
</div>
</div>
<p>The operation of <b>merging</b> two heaps is perhaps the most 
interesting and can be used as a subroutine in most other operations. 
The lists of roots of both heaps are traversed simultaneously, similarly
 as in the <a href="http://en.m.wikipedia.org/wiki/Merge_algorithm" title="Merge algorithm">merge algorithm</a>.</p>
<p>If only one of the heaps contains a tree of order <i>j</i>, this tree is moved to the merged heap. If both heaps contain a tree of order <i>j</i>, the two trees are merged to one tree of order <i>j</i>+1
 so that the minimum-heap property is satisfied. Note that it may later 
be necessary to merge this tree with some other tree of order <i>j</i>+1
 present in one of the heaps. In the course of the algorithm, we need to
 examine at most three trees of any order (two from the two heaps we 
merge and one composed of two smaller trees).</p>
<p>Because each binomial tree in a binomial heap corresponds to a bit in
 the binary representation of its size, there is an analogy between the 
merging of two heaps and the binary addition of the <i>sizes</i> of the 
two heaps, from right-to-left. Whenever a carry occurs during addition, 
this corresponds to a merging of two binomial trees during the merge.</p>
<p>Each tree has order at most log <i>n</i> and therefore the running time is <i>O</i>(log <i>n</i>).</p>
<pre><b>function</b> merge(p, q)
    <b>while</b> <b>not</b>( p.end() <b>and</b> q.end() )
        tree = mergeTree(p.currentTree(), q.currentTree())
        <b>if</b> <b>not</b> heap.currentTree().empty()
            tree = mergeTree(tree, heap.currentTree())
            heap.addTree(tree)
        <b>else</b>
            heap.addTree(tree)
        heap.next() p.next() q.next()
</pre>
<div class="thumb tright">
<div class="thumbinner" style="width:302px;">
<a href="http://en.m.wikipedia.org/wiki/File:Binomial_heap_merge2.svg" class="image"><img alt="" src="Binomial_heap_files/300px-Binomial_heap_merge2.png" class="thumbimage" width="300" height="248"></a>
<div class="thumbcaption">

This shows the merger of two binomial heaps. This is accomplished by 
merging two binomial trees of the same order one by one. If the 
resulting merged tree has the same order as one binomial tree in one of 
the two heaps, then those two are merged again.</div>
</div>
</div>
<h3> <span class="mw-headline" id="Insert">Insert</span>
</h3>
<p><b>Inserting</b> a new element to a heap can be done by simply 
creating a new heap containing only this element and then merging it 
with the original heap. Due to the merge, insert takes O(log <i>n</i>) time,however it has an <i>amortized</i> time of O(1) (i.e. constant).</p>
<h3> <span class="mw-headline" id="Find_minimum">Find minimum</span>
</h3>
<p>To find the <b>minimum</b> element of the heap, find the minimum among the roots of the binomial trees. This can again be done easily in <i>O</i>(log <i>n</i>) time, as there are just <i>O</i>(log <i>n</i>) trees and hence roots to examine.</p>
<p>By using a pointer to the binomial tree that contains the minimum element, the time for this operation can be reduced to <i>O</i>(1). The pointer must be updated when performing any operation other than Find minimum. This can be done in <i>O</i>(log <i>n</i>) without raising the running time of any operation.</p>
<h3> <span class="mw-headline" id="Delete_minimum">Delete minimum</span>
</h3>
<p>To <b>delete the minimum element</b> from the heap, first find this 
element, remove it from its binomial tree, and obtain a list of its 
subtrees. Then transform this list of subtrees into a separate binomial 
heap by reordering them from smallest to largest order. Then merge this 
heap with the original heap. Since each tree has at most log <i>n</i> children, creating this new heap is <i>O</i>(log <i>n</i>). Merging heaps is <i>O</i>(log <i>n</i>), so the entire delete minimum operation is <i>O</i>(log <i>n</i>).</p>
<pre><b>function</b> deleteMin(heap)
    min = heap.trees().first()
    <b>for each</b> current <b>in</b> heap.trees()
        <b>if</b> current.root &lt; min <b>then</b> min = current
    <b>for each</b> tree <b>in</b> min.subTrees()
        tmp.addTree(tree)
    heap.removeTree(min)
    merge(heap, tmp)
</pre>
<h3> <span class="mw-headline" id="Decrease_key">Decrease key</span>
</h3>
<p>After <b>decreasing</b> the key of an element, it may become smaller 
than the key of its parent, violating the minimum-heap property. If this
 is the case, exchange the element with its parent, and possibly also 
with its grandparent, and so on, until the minimum-heap property is no 
longer violated. Each binomial tree has height at most log <i>n</i>, so this takes <i>O</i>(log <i>n</i>) time.</p>
<h3> <span class="mw-headline" id="Delete">Delete</span>
</h3>
<p>To <b>delete</b> an element from the heap, decrease its key to 
negative infinity (that is, some value lower than any element in the 
heap) and then delete the minimum in the heap.</p>
</div><a id="anchor_3" href="#section_3" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_4"><button>Show</button><span id="Performance">Performance</span></h2><div class="content_block" id="content_4">
<p>All of the following operations work in <a href="http://en.m.wikipedia.org/wiki/Big_O_notation" title="Big O notation">O</a>(log <i>n</i>) time on a binomial heap with <i>n</i> elements:</p>
<ul>
<li>Insert a new element to the heap</li>
<li>Find the element with minimum key</li>
<li>Delete the element with minimum key from the heap</li>
<li>Decrease key of a given element</li>
<li>Delete given element from the heap</li>
<li>Merge two given heaps to one heap</li>
</ul>
<p>Finding the element with minimum key can also be done in <i>O</i>(1) by using an additional pointer to the minimum.</p>
</div><a id="anchor_4" href="#section_4" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_5"><button>Show</button><span id="Applications">Applications</span></h2><div class="content_block" id="content_5">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Discrete_event_simulation" title="Discrete event simulation">Discrete event simulation</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Priority_queue" title="Priority queue">Priority queues</a></li>
</ul>
</div><a id="anchor_5" href="#section_5" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_6"><button>Show</button><span id="See_also">See also</span></h2><div class="content_block" id="content_6">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Fibonacci_heap" title="Fibonacci heap">Fibonacci heap</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Soft_heap" title="Soft heap">Soft heap</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Skew_binomial_heap" title="Skew binomial heap">Skew binomial heap</a></li>
</ul>
</div><a id="anchor_6" href="#section_6" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_7"><button>Show</button><span id="References">References</span></h2><div class="content_block" id="content_7">
<ul>
<li>
<a href="http://en.m.wikipedia.org/wiki/Thomas_H._Cormen" title="Thomas H. Cormen">Thomas H. Cormen</a>, <a href="http://en.m.wikipedia.org/wiki/Charles_E._Leiserson" title="Charles E. Leiserson">Charles E. Leiserson</a>, <a href="http://en.m.wikipedia.org/wiki/Ronald_L._Rivest" title="Ronald L. Rivest" class="mw-redirect">Ronald L. Rivest</a>, and <a href="http://en.m.wikipedia.org/wiki/Clifford_Stein" title="Clifford Stein">Clifford Stein</a>. <i><a href="http://en.m.wikipedia.org/wiki/Introduction_to_Algorithms" title="Introduction to Algorithms">Introduction to Algorithms</a></i>, Second Edition. MIT Press and McGraw-Hill, 2001. <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0262032937" class="internal mw-magiclink-isbn">ISBN 0-262-03293-7</a>. Chapter 19: Binomial Heaps, pp.455–475.</li>
<li>Vuillemin, J. (1978). <a rel="nofollow" class="external text" href="http://portal.acm.org/citation.cfm?id=359478">A data structure for manipulating priority queues.</a> <i>Communications of the ACM</i> <b>21</b>, 309–314.</li>
</ul>
</div><a id="anchor_7" href="#section_7" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_8"><button>Show</button><span id="External_links">External links</span></h2><div class="content_block" id="content_8">
<ul>
<li><a rel="nofollow" class="external text" href="http://www.cs.yorku.ca/%7Eaaw/Sotirios/BinomialHeap.html">Java applet simulation of binomial heap</a></li>
<li><a rel="nofollow" class="external text" href="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/511508">Python implementation of binomial heap</a></li>
<li>
<a rel="nofollow" class="external text" href="http://www.cs.unc.edu/%7Ebbb/#binomial_heaps">Two C implementations of binomial heap</a> (a generic one and one optimized for integer keys)</li>
<li><a rel="nofollow" class="external text" href="http://hackage.haskell.org/packages/archive/TreeStructures/latest/doc/html/src/Data-Heap-Binomial.html">Haskell implementation of binomial heap</a></li>
<li><a rel="nofollow" class="external text" href="https://github.com/vy/binomial-heap">Common Lisp implementation of binomial heap</a></li>
</ul>
<p><span id="interwiki-de-ga"></span></p>





</div>
</div>		</div>
	</div>
			<div id="footer">
			<h2 class="section_heading" id="section_footer"><button>Show</button>
		<div class="license">Wikipedia ™</div>		<span class="toggleCopyright">
			<span class="more">more</span><span class="less">less</span>
		</span>
	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Binomial_heap&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li>
				<span class="left"><a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span><span class="right">Images ON / <a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions/DisableImages&amp;returnto=Binomial+heap&amp;mobiletoken=dc83e2c6ae93b1fadc6882196f529c1b" title="Special:MobileOptions/DisableImages" id="imagetoggle">OFF</a></span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Binomial_heap&amp;action=history">contributors</a> like you<br>
				Content available under <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>			</li>
		</ul>
		<ul class="links">
			<li>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Binomial+heap&amp;feedbacksource=MobileFrontend">Contact</a>
			</li><li>
			<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div>
	</div>
				<!--[if gt IE 7]><!-->
		<script type="text/javascript">mw={loader:{state:function(){}}};</script>		<script src="Binomial_heap_files/load_002.php" type="text/javascript"></script>
<script src="Binomial_heap_files/load.php" type="text/javascript"></script>	<script type="text/javascript">
	window.onload = function() {
		mw.mobileFrontend.init();
	};
	</script>
	<!----><!--[endif]---->
	
	<div style="display: none;" id="mf-references"><div></div><button>close</button></div></body></html>