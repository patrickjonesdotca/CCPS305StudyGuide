<!DOCTYPE html>
<html class="jsEnabled togglingEnabled" dir="ltr" lang="en"><head>
		<title>Backtracking - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<meta name="robots" content="noindex,nofollow">		<link rel="stylesheet" href="Backtracking_files/load.css" type="text/css" media="all">		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png">		<script type="text/javascript">
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-header":"This article is available in 18 languages","mobile-frontend-language-footer":"<a href=\"\/wiki\/Special:Special:MobileOptions\/Language\">Wikipedia is available in other languages.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"scriptPath":"\/w","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			document.documentElement.className = 'jsEnabled page-loading';		</script>
		<link rel="canonical" href="http://en.wikipedia.org/wiki/Backtracking">
	</head>
	<body class="mobile mw-mf-checkboxes">
							<div id="mw-mf-header">
					<form id="mw-mf-searchForm" action="/w/index.php" class="search_bar" method="get">
							<img alt="Logo" id="mw-mf-logo" src="Backtracking_files/W_logo_for_Mobile_Frontend.gif" width="35" height="22">
						<input value="Special:Search" name="title" type="hidden">
			<div id="mw-mf-sq" class="divclearable">
				<input name="search" id="mw-mf-search" size="22" autocomplete="off" maxlength="1024" class="search" placeholder="Type your search here..." type="search">
				<img src="Backtracking_files/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear">
			</div>
						<button id="goButton" class="goButton" type="submit">
				<img src="Backtracking_files/blank.gif" alt="Go" title="Go">
			</button>
					</form>
									<div class="nav" id="nav">
				<div id="mw-mf-language-selection">
		Language:<br>
		<select id="languageselection"><option value="http://en.wikipedia.org/wiki/Backtracking" selected="selected">English</option><option value="//cs.m.wikipedia.org/wiki/Backtracking">česky</option><option value="//de.m.wikipedia.org/wiki/Backtracking">Deutsch</option><option value="//es.m.wikipedia.org/wiki/Vuelta_atr%C3%A1s">español</option><option value="//fa.m.wikipedia.org/wiki/%D9%BE%D8%B3%E2%80%8C%DA%AF%D8%B1%D8%AF_(%D8%A7%D9%84%DA%AF%D9%88%D8%B1%DB%8C%D8%AA%D9%85)">فارسی</option><option value="//fr.m.wikipedia.org/wiki/Retour_sur_trace">français</option><option value="//ko.m.wikipedia.org/wiki/%ED%87%B4%EA%B0%81%EA%B2%80%EC%83%89">한국어</option><option value="//it.m.wikipedia.org/wiki/Backtracking">italiano</option><option value="//he.m.wikipedia.org/wiki/%D7%92%D7%99%D7%A9%D7%95%D7%A9_%D7%A0%D7%A1%D7%95%D7%92">עברית</option><option value="//nl.m.wikipedia.org/wiki/Backtracking">Nederlands</option><option value="//ja.m.wikipedia.org/wiki/%E3%83%90%E3%83%83%E3%82%AF%E3%83%88%E3%83%A9%E3%83%83%E3%82%AD%E3%83%B3%E3%82%B0">日本語</option><option value="//pl.m.wikipedia.org/wiki/Algorytm_z_nawrotami">polski</option><option value="//pt.m.wikipedia.org/wiki/Backtracking">português</option><option value="//ro.m.wikipedia.org/wiki/Backtracking">română</option><option value="//ru.m.wikipedia.org/wiki/%D0%9F%D0%BE%D0%B8%D1%81%D0%BA_%D1%81_%D0%B2%D0%BE%D0%B7%D0%B2%D1%80%D0%B0%D1%82%D0%BE%D0%BC">русский</option><option value="//uk.m.wikipedia.org/wiki/%D0%9F%D0%BE%D1%88%D1%83%D0%BA_%D0%B7_%D0%B2%D0%B5%D1%80%D1%82%D0%B0%D0%BD%D0%BD%D1%8F%D0%BC">українська</option><option value="//vi.m.wikipedia.org/wiki/Quay_lui_(khoa_h%E1%BB%8Dc_m%C3%A1y_t%C3%ADnh)">Tiếng Việt</option><option value="//zh.m.wikipedia.org/wiki/%E5%9B%9E%E6%BA%AF%E6%B3%95">中文</option></select>
	</div><br>
			<a href="http://en.m.wikipedia.org/wiki/Main_Page" id="homeButton" class="button">Home</a>
			<a href="http://en.m.wikipedia.org/wiki/Special:Random" id="randomButton" class="button">Random</a>
			</div>
		</div>
				<div id="results"><ul class="suggestions-results" title="No Results"><li class="suggestions-result">Type search term above and matching article titles will appear here.</li></ul></div>
		<div class="show" id="content_wrapper">
				<div id="content">
			<h1 id="firstHeading">Backtracking</h1>			
<p><b>Backtracking</b> is a general <a href="http://en.m.wikipedia.org/wiki/Algorithm" title="Algorithm">algorithm</a> for finding all (or some) solutions to some <a href="http://en.m.wikipedia.org/wiki/Computational_problem" title="Computational problem">computational problem</a>, that incrementally builds candidates to the solutions, and abandons each partial candidate <i>c</i> ("backtracks") as soon as it determines that <i>c</i> cannot possibly be completed to a valid solution.<sup id="cite_ref-0" class="reference"><a href="#cite_note-0"><span>[</span>1<span>]</span></a></sup><sup id="cite_ref-1" class="reference"><a href="#cite_note-1"><span>[</span>2<span>]</span></a></sup><sup id="cite_ref-2" class="reference"><a href="#cite_note-2"><span>[</span>3<span>]</span></a></sup></p>
<p>The classic textbook example of the use of backtracking is the <a href="http://en.m.wikipedia.org/wiki/Eight_queens_puzzle" title="Eight queens puzzle">eight queens puzzle</a>, that asks for all arrangements of eight queens on a standard <a href="http://en.m.wikipedia.org/wiki/Chess" title="Chess">chessboard</a> so that no queen attacks any other. In the common backtracking approach, the partial candidates are arrangements of <i>k</i> queens in the first <i>k</i>
 rows of the board, all in different rows and columns. Any partial 
solution that contains two mutually attacking queens can be abandoned, 
since it cannot possibly be completed to a valid solution.</p>
<p>Backtracking can be applied only for problems which admit the concept
 of a "partial candidate solution" and a relatively quick test of 
whether it can possibly be completed to a valid solution. It is useless,
 for example, for locating a given value in an unordered table. When it 
is applicable, however, backtracking is often much faster than <a href="http://en.m.wikipedia.org/wiki/Brute_force_search" title="Brute force search" class="mw-redirect">brute force enumeration</a> of all complete candidates, since it can eliminate a large number of candidates with a single test.</p>
<p>Backtracking is an important tool for solving <a href="http://en.m.wikipedia.org/wiki/Constraint_satisfaction_problem" title="Constraint satisfaction problem">constraint satisfaction problems</a>, such as <a href="http://en.m.wikipedia.org/wiki/Crosswords" title="Crosswords" class="mw-redirect">crosswords</a>, <a href="http://en.m.wikipedia.org/wiki/Verbal_arithmetic" title="Verbal arithmetic">verbal arithmetic</a>, <a href="http://en.m.wikipedia.org/wiki/Algorithmics_of_sudoku" title="Algorithmics of sudoku" class="mw-redirect">Sudoku</a>, and many other puzzles. It is often the most convenient (if not the most efficient<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from January 2011">citation needed</span></a></i>]</sup>) technique for <a href="http://en.m.wikipedia.org/wiki/Parsing" title="Parsing">parsing</a>, for the <a href="http://en.m.wikipedia.org/wiki/Knapsack_problem" title="Knapsack problem">knapsack problem</a> and other <a href="http://en.m.wikipedia.org/wiki/Combinatorial_optimization" title="Combinatorial optimization">combinatorial optimization</a> problems. It is also the basis of the so-called <a href="http://en.m.wikipedia.org/wiki/Logic_programming" title="Logic programming">logic programming</a> languages such as <a href="http://en.m.wikipedia.org/wiki/Icon_programming_language" title="Icon programming language" class="mw-redirect">Icon</a>, <a href="http://en.m.wikipedia.org/wiki/Planner_programming_language" title="Planner programming language" class="mw-redirect">Planner</a> and <a href="http://en.m.wikipedia.org/wiki/Prolog" title="Prolog">Prolog</a>. Backtracking is also utilized in the (diff) difference engine for the <a href="http://en.m.wikipedia.org/wiki/MediaWiki" title="MediaWiki">MediaWiki</a> software.</p>
<p>Backtracking depends on user-given "<a href="http://en.m.wikipedia.org/wiki/Procedural_parameter" title="Procedural parameter">black box procedures</a>"
 that define the problem to be solved, the nature of the partial 
candidates, and how they are extended into complete candidates. It is 
therefore a <a href="http://en.m.wikipedia.org/wiki/Metaheuristic" title="Metaheuristic">metaheuristic</a>
 rather than a specific algorithm&nbsp;– although, unlike many other 
meta-heuristics, it is guaranteed to find all solutions to a finite 
problem in a bounded amount of time.</p>
<p>The term "backtrack" was coined by American mathematician <a href="http://en.m.wikipedia.org/wiki/Derrick_Henry_Lehmer" title="Derrick Henry Lehmer">D. H. Lehmer</a> in the 1950s.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3"><span>[</span>4<span>]</span></a></sup> The pioneer string-processing language <a href="http://en.m.wikipedia.org/wiki/SNOBOL" title="SNOBOL">SNOBOL</a> (1962) may have been the first to provide a built-in general backtracking facility.</p>
<div class="section"><h2 class="section_heading" id="section_1"><button>Show</button><span id="Description_of_the_method">Description of the method</span></h2><div class="content_block" id="content_1">
<p>The backtracking algorithm enumerates a set of <i>partial candidates</i> that, in principle, could be <i>completed</i>
 in various ways to give all the possible solutions to the given 
problem. The completion is done incrementally, by a sequence of <i>candidate extension steps.</i></p>
<p>Conceptually, the partial candidates are the nodes of a <a href="http://en.m.wikipedia.org/wiki/Tree_structure" title="Tree structure">tree structure</a>, the <i>potential search tree.</i>
 Each partial candidate is the parent of the candidates that differ from
 it by a single extension step; the leaves of the tree are the partial 
candidates that cannot be extended any further.</p>
<p>The backtracking algorithm traverses this search tree <a href="http://en.m.wikipedia.org/wiki/Recursion_%28computer_science%29" title="Recursion (computer science)">recursively</a>, from the root down, in <a href="http://en.m.wikipedia.org/wiki/Depth-first_search" title="Depth-first search">depth-first order</a>. At each node <i>c</i>, the algorithm checks whether <i>c</i> can be completed to a valid solution. If it cannot, the whole sub-tree rooted at <i>c</i> is skipped (<i>pruned</i>). Otherwise, the algorithm (1) checks whether <i>c</i> itself is a valid solution, and if so reports it to the user; and (2) recursively enumerates all sub-trees of <i>c</i>. The two tests and the children of each node are defined by user-given procedures.</p>
<p>Therefore, the <i>actual search tree</i> that is traversed by the 
algorithm is only a part of the potential tree. The total cost of the 
algorithm is the number of nodes of the actual tree times the cost of 
obtaining and processing each node. This fact should be considered when 
choosing the potential search tree and implementing the pruning test.</p>
<h3> <span class="mw-headline" id="Pseudocode">Pseudocode</span>
</h3>
<p>In order to apply backtracking to a specific class of problems, one must provide the data <i>P</i> for the particular instance of the problem that is to be solved, and six <a href="http://en.m.wikipedia.org/wiki/Procedural_parameter" title="Procedural parameter">procedural parameters</a>, <i>root</i>, <i>reject</i>, <i>accept</i>, <i>first</i>, <i>next</i>, and <i>output</i>. These procedures should take the instance data <i>P</i> as a parameter and should do the following:</p>
<ol>
<li><b><i>root</i>(<i>P</i>)<i>: return the partial candidate at the root of the search tree.</i></b></li>
<li>
<i>reject</i>(<i>P</i>,<i>c</i>): return <i>true</i> only if the partial candidate <i>c</i> is not worth completing.</li>
<li>
<i>accept</i>(<i>P</i>,<i>c</i>): return <i>true</i> if <i>c</i> is a solution of <i>P</i>, and <i>false</i> otherwise.</li>
<li>
<i>first</i>(<i>P</i>,<i>c</i>): generate the first extension of candidate <i>c</i>.</li>
<li>
<i>next</i>(<i>P</i>,<i>s</i>): generate the next alternative extension of a candidate, after the extension <i>s</i>.</li>
<li>
<i>output</i>(<i>P</i>,<i>c</i>): use the solution <i>c</i> of <i>P</i>, as appropriate to the application.</li>
</ol>
<p>The backtracking algorithm reduces then to the call <i>bt</i>(<i>root</i>(<i>P</i>)), where <i>bt</i> is the following recursive procedure:</p>
<pre> <b>procedure</b> <i>bt</i>(<i>c</i>)
   <b>if</b> <i>reject</i>(<i>P</i>,<i>c</i>) <b>then</b> <b>return</b>
   <b>if</b> <i>accept</i>(<i>P</i>,<i>c</i>) <b>then</b> <i>output</i>(<i>P</i>,<i>c</i>)
   <i>s</i> ← <i>first</i>(<i>P</i>,<i>c</i>)
   <b>while</b> <i>s</i> ≠ Λ <b>do</b>
     <i>bt</i>(<i>s</i>)
     <i>s</i> ← <i>next</i>(<i>P</i>,<i>s</i>)
</pre>
<h3> <span class="mw-headline" id="Usage_considerations">Usage considerations</span>
</h3>
<p>The <i>reject</i> procedure should be a <a href="http://en.m.wikipedia.org/wiki/Boolean-valued_function" title="Boolean-valued function">boolean-valued function</a> that returns <i>true</i> only if it is certain that no possible extension of <i>c</i> is a valid solution for <i>P</i>. If the procedure cannot reach a definite conclusion, it should return <i>false</i>. An incorrect <i>true</i> result may cause the <i>bt</i> procedure to miss some valid solutions. The procedure may assume that <i>reject</i>(<i>P</i>,<i>t</i>) returned <i>false</i> for every ancestor <i>t</i> of <i>c</i> in the search tree.</p>
<p>On the other hand, the efficiency of the backtracking algorithm depends on <i>reject</i> returning <i>true</i> for candidates that are as close to the root as possible. If <i>reject</i> always returns <i>false</i>, the algorithm will still find all solutions, but it will be equivalent to a brute-force search.</p>
<p>The <i>accept</i> procedure should return <i>true</i> if <i>c</i> is a complete and valid solution for the problem instance <i>P</i>, and <i>false</i> otherwise. It may assume that the partial candidate <i>c</i> and all its ancestors in the tree have passed the <i>reject</i> test.</p>
<p>Note that the general pseudo-code above does not assume that the 
valid solutions are always leaves of the potential search tree. In other
 words, it admits the possibility that a valid solution for <i>P</i> can be further extended to yield other valid solutions.</p>
<p>The <i>first</i> and <i>next</i> procedures are used by the backtracking algorithm to enumerate the children of a node <i>c</i> of the tree, that is, the candidates that differ from <i>c</i> by a single extension step. The call <i>first</i>(<i>P</i>,<i>c</i>) should yield the first child of <i>c</i>, in some order; and the call <i>next</i>(<i>P</i>,<i>s</i>) should return the next sibling of node <i>s</i>,
 in that order. Both functions should return a distinctive "null" 
candidate, denoted here by 'Λ', if the requested child does not exist.</p>
<p>Together, the <i>root</i>, <i>first</i>, and <i>next</i> functions define the set of partial candidates and the potential search tree. They should be chosen so that every solution of <i>P</i>
 occurs somewhere in the tree, and no partial candidate occurs more than
 once. Moreover, they should admit an efficient and effective <i>reject</i> predicate.</p>
<h3> <span class="mw-headline" id="Early_stopping_variants">Early stopping variants</span>
</h3>
<p>The pseudo-code above will call <i>output</i> for all candidates that are a solution to the given instance <i>P</i>.
 The algorithm is easily modified to stop after finding the first 
solution, or a specified number of solutions; or after testing a 
specified number of partial candidates, or after spending a given amount
 of <a href="http://en.m.wikipedia.org/wiki/Central_processing_unit" title="Central processing unit">CPU</a> time.</p>
</div><a id="anchor_1" href="#section_1" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_2"><button>Show</button><span id="Examples">Examples</span></h2><div class="content_block" id="content_2">
<p>Typical examples are</p>
<ul>
<li>
<a href="http://en.m.wikipedia.org/wiki/Puzzle" title="Puzzle">Puzzles</a> such as <a href="http://en.m.wikipedia.org/wiki/Eight_queens_puzzle" title="Eight queens puzzle">eight queens puzzle</a>, <a href="http://en.m.wikipedia.org/wiki/Crosswords" title="Crosswords" class="mw-redirect">crosswords</a>, <a href="http://en.m.wikipedia.org/wiki/Verbal_arithmetic" title="Verbal arithmetic">verbal arithmetic</a>, <a href="http://en.m.wikipedia.org/wiki/Algorithmics_of_sudoku" title="Algorithmics of sudoku" class="mw-redirect">Sudoku</a>, <a href="http://en.m.wikipedia.org/wiki/Peg_solitaire" title="Peg solitaire">Peg Solitaire</a>
</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Combinatorial_optimization" title="Combinatorial optimization">combinatorial optimization</a> problems such as <a href="http://en.m.wikipedia.org/wiki/Parsing" title="Parsing">parsing</a> and the <a href="http://en.m.wikipedia.org/wiki/Knapsack_problem" title="Knapsack problem">knapsack problem</a>
</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Logic_programming" title="Logic programming">logic programming</a> languages such as <a href="http://en.m.wikipedia.org/wiki/Icon_programming_language" title="Icon programming language" class="mw-redirect">Icon</a>, <a href="http://en.m.wikipedia.org/wiki/Planner_programming_language" title="Planner programming language" class="mw-redirect">Planner</a> and <a href="http://en.m.wikipedia.org/wiki/Prolog" title="Prolog">Prolog</a>, which use backtracking internally to generate answers.</li>
<li>Backtracking is also utilized in the "<a href="http://en.m.wikipedia.org/wiki/Diff" title="Diff">diff</a>" (<a href="http://en.m.wikipedia.org/wiki/Revision_control" title="Revision control">version comparing</a>) engine for the <a href="http://en.m.wikipedia.org/wiki/MediaWiki" title="MediaWiki">MediaWiki</a> software.</li>
</ul>
<p>Below is an example for the <a href="http://en.m.wikipedia.org/wiki/Constraint_satisfaction_problem" title="Constraint satisfaction problem">constraint satisfaction problem</a>:</p>
<h3> <span class="mw-headline" id="Constraint_satisfaction">Constraint satisfaction</span>
</h3>
<p>The general <a href="http://en.m.wikipedia.org/wiki/Constraint_satisfaction_problem" title="Constraint satisfaction problem">constraint satisfaction problem</a> consists in finding a list of integers <i>x</i> = (<i>x</i>[1],<i>x</i>[2], ..., <i>x</i>[<i>n</i>]), each in some range {1, 2, ..., <i>m</i>}, that satisfies some arbitrary constraint (boolean function) <i>F</i>.</p>
<p>For this class of problems, the instance data <i>P</i> would be the integers <i>m</i> and <i>n</i>, and the predicate <i>F</i>. In a typical backtracking solution to this problem, one could define a partial candidate as a list of integers <i>c</i> = (<i>c</i>[1],<i>c</i>[2], ... <i>c</i>[k]), for any <i>k</i> between 0 and <i>n</i>, that are to be assigned to the first <i>k</i> variables <i>x</i>[1],<i>x</i>[2], ..., <i>x</i>[<i>k</i>]). The root candidate would then be the empty list (). The <i>first</i> and <i>next</i> procedures would then be</p>
<pre> <b>function</b> <i>first</i>(<i>P</i>,<i>c</i>)
   <i>k</i> ← <b>length</b>(<i>c</i>)
   <b>if</b> <i>k</i> = <i>n</i>
     <b>then</b> <b>return</b> Λ
     <b>else</b> <b>return</b> (<i>c</i>[1], <i>c</i>[2], ..., <i>c</i>[<i>k</i>], 1)
</pre>
<pre> <b>function</b> <i>next</i>(<i>P</i>,<i>s</i>)
   <i>k</i> ← <b>length</b>(<i>s</i>)
   <b>if</b> <i>s</i>[<i>k</i>] = <i>m</i>
     <b>then</b> <b>return</b> Λ
     <b>else</b> <b>return</b> (<i>s</i>[1], <i>s</i>[2], ..., <i>s</i>[<i>k</i>-1], 1 + <i>s</i>[<i>k</i>])
</pre>
<p>Here "<b>length</b>(<i>c</i>)" is the number of elements in the list <i>c</i>.</p>
<p>The call <i>reject</i>(<i>P</i>,<i>c</i>) should return <i>true</i> if the constraint <i>F</i> cannot be satisfied by any list of <i>n</i> integers that begins with the <i>k</i> elements of <i>c</i>. For backtracking to be effective, there must be a way to detect this situation, at least for some candidates <i>c</i>, without enumerating all those <i>m</i><sup><i>n</i>-<i>k</i></sup><i>n</i>-tuples.</p>
<p>For example, if <i>F</i> is the <a href="http://en.m.wikipedia.org/wiki/Logical_conjunction" title="Logical conjunction">conjunction</a> of several boolean predicates, <i>F</i> = <i>F</i>[1] <img class="tex" alt="\wedge" src="Backtracking_files/1ba4f06f68614e5da79a8ebd378d532a.png"><i>F</i>[2] <img class="tex" alt="\wedge" src="Backtracking_files/1ba4f06f68614e5da79a8ebd378d532a.png"><img class="tex" alt="\cdots" src="Backtracking_files/33ac38248f756c206658df33d70efc31.png"><img class="tex" alt="\wedge" src="Backtracking_files/1ba4f06f68614e5da79a8ebd378d532a.png"><i>F</i>[p], and each <i>F</i>[i] depends only on a small subset of the variables <i>x</i>[1], ..., <i>x</i>[<i>n</i>], then the <i>reject</i> procedure could simply check the terms <i>F</i>[i] that depend only on variables <i>x</i>[1], ..., <i>x</i>[<i>k</i>], and return <i>true</i> if any of those terms returns <i>false</i>. In fact, <i>reject</i> needs only check those terms that do depend on <i>x</i>[<i>k</i>], since the terms that depend only on <i>x</i>[1], ..., <i>x</i>[<i>k</i>-1] will have been tested further up in the search tree.</p>
<p>Assuming that <i>reject</i> is implemented as above, then <i>accept</i>(<i>P</i>,<i>c</i>) needs only check whether <i>c</i> is complete, that is, whether it has <i>n</i> elements.</p>
<p>It is generally better to order the list of variables so that it 
begins with the most critical ones (i.e. the ones with fewest value 
options, or which have a greater impact on subsequent choices).</p>
<p>One could also allow the <i>next</i> function to choose which 
variable should be assigned when extending a partial candidate, based on
 the values of the variables already assigned by it. Further 
improvements can be obtained by the technique of <a href="http://en.m.wikipedia.org/wiki/Constraint_propagation" title="Constraint propagation" class="mw-redirect">constraint propagation</a>.</p>
<p>In addition to retaining minimal recovery values used in backing up, backtracking implementations commonly keep a <span class="new" title="Variable trail (page does not exist)">variable trail</span>,
 to record value change history. An efficient implementation will avoid 
creating a variable trail entry between two successive changes when 
there is no choice point, as the backtracking will erase all of the 
changes as a single operation.</p>
<p>An alternative to the variable trail is to keep a <a href="http://en.m.wikipedia.org/wiki/Timestamp" title="Timestamp">timestamp</a>
 of when the last change was made to the variable. The timestamp is 
compared to the timestamp of a choice point. If the choice point has an 
associated time later than that of the variable, it is unnecessary to 
revert the variable when the choice point is backtracked, as it was 
changed before the choice point occurred.</p>
</div><a id="anchor_2" href="#section_2" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_3"><button>Show</button><span id="See_also">See also</span></h2><div class="content_block" id="content_3">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Ariadne%27s_thread_%28logic%29" title="Ariadne's thread (logic)">Ariadne's thread (logic)</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Backjumping" title="Backjumping">Backjumping</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Recursion_%28computer_science%29" title="Recursion (computer science)">Recursion (computer science)</a></li>
</ul>
</div><a id="anchor_3" href="#section_3" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_4"><button>Show</button><span id="Notes">Notes</span></h2><div class="content_block" id="content_4">
<div class="reflist" style="list-style-type: decimal;">
<ol class="references">
<li id="cite_note-0">
<span class="mw-cite-backlink"><b><a href="#cite_ref-0">^</a></b></span> <span class="reference-text"><span class="citation book">Donald E. Knuth (1968). <i><a href="http://en.m.wikipedia.org/wiki/The_Art_of_Computer_Programming" title="The Art of Computer Programming">The Art of Computer Programming</a></i>. Addison-Wesley.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=%5B%5BThe+Art+of+Computer+Programming%5D%5D&amp;rft.aulast=Donald+E.+Knuth&amp;rft.au=Donald+E.+Knuth&amp;rft.date=1968&amp;rft.pub=Addison-Wesley&amp;rfr_id=info:sid/en.wikipedia.org:Backtracking"><span style="display: none;">&nbsp;</span></span></span>
</li>
<li id="cite_note-1">
<span class="mw-cite-backlink"><b><a href="#cite_ref-1">^</a></b></span> <span class="reference-text"><span class="citation book">Thomas H. Cormen; Charles E. Leiserson, Ronald R. Rivest, Cliff Stein (1990). <i>Introduction to Algorithms</i>. McGraw-Hill.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Introduction+to+Algorithms&amp;rft.aulast=Thomas+H.+Cormen&amp;rft.au=Thomas+H.+Cormen&amp;rft.date=1990&amp;rft.pub=McGraw-Hill&amp;rfr_id=info:sid/en.wikipedia.org:Backtracking"><span style="display: none;">&nbsp;</span></span></span>
</li>
<li id="cite_note-2">
<span class="mw-cite-backlink"><b><a href="#cite_ref-2">^</a></b></span> <span class="reference-text"><span class="citation web">Gurari, Eitan (1999). <a rel="nofollow" class="external text" href="http://www.cse.ohio-state.edu/%7Egurari/course/cis680/cis680Ch19.html#QQ1-51-128">Backtracking algorithms "CIS 680: DATA STRUCTURES: Chapter 19: Backtracking Algorithms"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.cse.ohio-state.edu/%7Egurari/course/cis680/cis680Ch19.html#QQ1-51-128">http://www.cse.ohio-state.edu/~gurari/course/cis680/cis680Ch19.html#QQ1-51-128</a> Backtracking algorithms</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=CIS+680%3A+DATA+STRUCTURES%3A+Chapter+19%3A+Backtracking+Algorithms&amp;rft.atitle=&amp;rft.aulast=Gurari%2C+Eitan&amp;rft.au=Gurari%2C+Eitan&amp;rft.date=1999&amp;rft_id=http%3A%2F%2Fwww.cse.ohio-state.edu%2F%7Egurari%2Fcourse%2Fcis680%2Fcis680Ch19.html%23QQ1-51-128+Backtracking+algorithms&amp;rfr_id=info:sid/en.wikipedia.org:Backtracking"><span style="display: none;">&nbsp;</span></span></span>
</li>
<li id="cite_note-3">
<span class="mw-cite-backlink"><b><a href="#cite_ref-3">^</a></b></span> <span class="reference-text"><span class="citation book">Rossi, Francesca; Beek, Peter Van; Walsh, Toby (August 2006). <a rel="nofollow" class="external text" href="http://books.google.com/books?id=Kjap9ZWcKOoC&amp;pg=PA14">"Constraint Satisfaction: An Emerging Paradigm"</a>. <a rel="nofollow" class="external text" href="http://books.google.com/books?id=Kjap9ZWcKOoC"><i>Handbook of Constraint Programming</i></a>. <a rel="nofollow" class="external text" href="http://www.elsevier.com/wps/find/bookdescription.cws_home/BS_FAI/description#description">Foundations of Artificial Intelligence</a>. <a href="http://en.m.wikipedia.org/wiki/Amsterdam" title="Amsterdam">Amsterdam</a>: <a href="http://en.m.wikipedia.org/wiki/Elsevier" title="Elsevier">Elsevier</a>. p.&nbsp;14. <a href="http://en.m.wikipedia.org/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&nbsp;<a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-0-444-52726-4" title="Special:BookSources/978-0-444-52726-4">978-0-444-52726-4</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://books.google.com/books?id=Kjap9ZWcKOoC&amp;pg=PA14">http://books.google.com/books?id=Kjap9ZWcKOoC&amp;pg=PA14</a></span><span class="reference-accessdate">. Retrieved 2008-12-30</span>. "Bitner and Reingold credit Lehmer with first using the term 'backtrack' in the 1950s."</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Constraint+Satisfaction%3A+An+Emerging+Paradigm&amp;rft.atitle=Handbook+of+Constraint+Programming&amp;rft.aulast=Rossi&amp;rft.aufirst=Francesca&amp;rft.au=Rossi%2C%26%2332%3BFrancesca&amp;rft.date=August+2006&amp;rft.series=%5Bhttp%3A%2F%2Fwww.elsevier.com%2Fwps%2Ffind%2Fbookdescription.cws_home%2FBS_FAI%2Fdescription%23description+Foundations+of+Artificial+Intelligence%5D&amp;rft.pages=p.%26nbsp%3B14&amp;rft.place=%5B%5BAmsterdam%5D%5D&amp;rft.pub=%5B%5BElsevier%5D%5D&amp;rft.isbn=978-0-444-52726-4&amp;rft_id=http%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DKjap9ZWcKOoC&amp;rfr_id=info:sid/en.wikipedia.org:Backtracking"><span style="display: none;">&nbsp;</span></span></span>
</li>
</ol>
</div>
</div><a id="anchor_4" href="#section_4" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_5"><button>Show</button><span id="References">References</span></h2><div class="content_block" id="content_5">
<div class="refbegin" style="">
<ul>
<li>
<span class="citation book">Gilles Brassard, Paul Bratley (1995). <i>Fundamentals of Algorithmics</i>. Prentice-Hall.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Fundamentals+of+Algorithmics&amp;rft.aulast=Gilles+Brassard%2C+Paul+Bratley&amp;rft.au=Gilles+Brassard%2C+Paul+Bratley&amp;rft.date=1995&amp;rft.pub=Prentice-Hall&amp;rfr_id=info:sid/en.wikipedia.org:Backtracking"><span style="display: none;">&nbsp;</span></span>
</li>
</ul>
</div>
</div><a id="anchor_5" href="#section_5" class="section_anchors back_to_top">↑Jump back a section</a></div><div class="section"><h2 class="section_heading" id="section_6"><button>Show</button><span id="External_links">External links</span></h2><div class="content_block" id="content_6">
<ul>
<li>
<a rel="nofollow" class="external text" href="http://www.hbmeyer.de/backtrack/backtren.htm">HBmeyer.de</a>, Interactive animation of a backtracking algorithm</li>
<li>
<a rel="nofollow" class="external text" href="http://github.com/kapild/Permutations">Sample Java Code</a>, Sample code for backtracking of 8 Queens problem.</li>
</ul>

</div>
</div>		</div>
	</div>
			<div id="footer">
			<h2 class="section_heading" id="section_footer"><button>Show</button>
		<div class="license">Wikipedia ™</div>		<span class="toggleCopyright">
			<span class="more">more</span><span class="less">less</span>
		</span>
	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Backtracking&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li>
				<span class="left"><a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span><span class="right">Images ON / <a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions/DisableImages&amp;returnto=Backtracking&amp;mobiletoken=dc83e2c6ae93b1fadc6882196f529c1b" title="Special:MobileOptions/DisableImages" id="imagetoggle">OFF</a></span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Backtracking&amp;action=history">contributors</a> like you<br>
				Content available under <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>			</li>
		</ul>
		<ul class="links">
			<li>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Backtracking&amp;feedbacksource=MobileFrontend">Contact</a>
			</li><li>
			<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="http://en.m.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div>
	</div>
				<!--[if gt IE 7]><!-->
		<script type="text/javascript">mw={loader:{state:function(){}}};</script>		<script src="Backtracking_files/load_002.php" type="text/javascript"></script>
<script src="Backtracking_files/load.php" type="text/javascript"></script>	<script type="text/javascript">
	window.onload = function() {
		mw.mobileFrontend.init();
	};
	</script>
	<!----><!--[endif]---->
	
	<div style="display: none;" id="mf-references"><div></div><button>close</button></div></body></html>